// koffee 1.4.0
var Action, Quaternion, Vector, _;

_ = require('kxk')._;

Quaternion = require('./lib/quaternion');

Vector = require('./lib/vector');

Action = (function() {
    Action.NOOP = 0;

    Action.ROTATE = 1;

    Action.FLY = 2;

    Action.TOGGLE = 3;

    Action.FALL = 4;

    Action.PUSH = 5;

    Action.EXPLODE = 6;

    Action.IMPLODE = 7;

    Action.FORWARD = 8;

    Action.CLIMB_UP = 9;

    Action.CLIMB_DOWN = 10;

    Action.TURN_LEFT = 11;

    Action.TURN_RIGHT = 12;

    Action.JUMP = 13;

    Action.JUMP_FORWARD = 14;

    Action.FALL_FORWARD = 15;

    Action.SHOOT = 16;

    Action.LOOK_UP = 17;

    Action.LOOK_DOWN = 18;

    Action.LOOK_RESET = 19;

    Action.TUCKER = 20;

    Action.SHOW = 1;

    Action.HIDE = 2;

    Action.DELETE = 3;

    Action.ONCE = 0;

    Action.CONTINUOUS = 1;

    Action.REPEAT = 2;

    Action.TIMED = 3;

    function Action(o, i, n, d, m) {
        var ref, ref1, ref2;
        if (_.isPlainObject(o)) {
            i = (ref = o.id) != null ? ref : -1;
            n = o.name;
            d = (ref1 = o.duration) != null ? ref1 : 0;
            m = (ref2 = o.mode) != null ? ref2 : d && Action.TIMED || Action.ONCE;
            o = o.func;
        } else {
            if (i != null) {
                i;
            } else {
                i = -1;
            }
            if (d != null) {
                d;
            } else {
                d = 0;
            }
            if (m != null) {
                m;
            } else {
                m = d && Action.TIMED || Action.ONCE;
            }
        }
        this.object = o;
        this.name = n;
        this.id = i;
        this.mode = m;
        this.duration = d;
        this.event = null;
        this.deleted = false;
        this.reset();
    }

    Action.prototype.del = function() {
        if (this.event != null) {
            this.event.removeAction(this);
        }
        if (this.object != null) {
            this.object.removeAction(this);
        }
        return this.deleted = true;
    };

    Action.prototype.perform = function() {
        if (this.object.performAction != null) {
            return this.object.performAction(this);
        } else if (_.isFunction(this.object)) {
            return this.object(this);
        }
    };

    Action.prototype.init = function() {
        var base;
        return typeof (base = this.object).initAction === "function" ? base.initAction(this) : void 0;
    };

    Action.prototype.finish = function() {
        var base;
        return typeof (base = this.object).finishAction === "function" ? base.finishAction(this) : void 0;
    };

    Action.prototype.finished = function() {
        var ref;
        if ((ref = this.object) != null) {
            if (typeof ref.actionFinished === "function") {
                ref.actionFinished(this);
            }
        }
        if (this.deleted) {
            return;
        }
        return this.reset();
    };

    Action.prototype.atStart = function() {
        return this.current === 0;
    };

    Action.prototype.reset = function() {
        this.start = 0;
        this.rest = 0;
        this.last = 0;
        return this.current = 0;
    };

    Action.prototype.takeOver = function(action) {
        var newPos, oldPos, relOther, relTime, sinFac;
        this.current = action.current;
        this.start = action.start;
        this.last = action.last;
        this.rest = action.rest;
        relOther = action.getRelativeTime();
        relTime = this.getRelativeTime();
        switch (action.id) {
            case Action.FORWARD:
                oldPos = this.object.position.plus(this.object.getDir().mul(relOther));
                break;
            case Action.CLIMB_DOWN:
                oldPos = this.object.position.plus(this.object.getDir().mul((relOther / 0.2) / 2));
                break;
            case Action.JUMP:
                oldPos = this.object.position.plus(this.object.getUp().mul(Math.sin(Math.PI / 2 * relOther)));
        }
        sinFac = Math.sin(Math.PI / 2 * relTime);
        switch (this.id) {
            case Action.JUMP:
                newPos = this.object.position.plus(this.object.getUp().mul(sinFac));
                break;
            case Action.JUMP_FORWARD:
                newPos = this.object.position.plus(this.object.getDir(this.object.new_dir_sgn).mul(relTime).plus(this.object.getUp().mul(sinFac)));
        }
        this.object.takenOffset = newPos.to(oldPos);
        return this.object.takenOrig = newPos.to(oldPos);
    };

    Action.prototype.getRelativeDelta = function() {
        return (this.current - this.last) / this.getDuration();
    };

    Action.prototype.getDuration = function() {
        return world.mapMsTime(this.duration);
    };

    Action.prototype.getRelativeTime = function() {
        var s;
        s = 1 / (16 + this.getDuration());
        return s * (16 + this.current);
    };

    Action.prototype.performWithEvent = function(event) {
        var currentDiff, eventTime, msDur, ref;
        eventTime = event.getTime();
        if (this.start === 0) {
            this.start = eventTime;
            this.current = 0;
            this.rest = 0;
            this.last = 0;
            if (this.mode === Action.ONCE) {
                event.removeAction(this);
            }
            this.perform();
            this.last = this.current;
            if (this.mode === Action.ONCE) {
                return this.finished();
            }
        } else {
            currentDiff = eventTime - this.start;
            msDur = this.getDuration();
            if (currentDiff >= (msDur - 4)) {
                this.current = msDur;
                this.rest = currentDiff - msDur;
                this.perform();
                this.last = 0;
                if (this.mode === Action.CONTINUOUS) {
                    this.current = this.rest;
                    this.start = eventTime;
                    this.last = 0;
                    this.rest = 0;
                    return;
                }
                if ((ref = this.mode) === Action.ONCE || ref === Action.TIMED) {
                    event.removeAction(this);
                }
                this.finish();
                if (this.mode === Action.REPEAT) {
                    if (this.current >= this.getDuration()) {
                        this.reset();
                    }
                    return;
                }
                return event.addFinishedAction(this);
            } else {
                this.current = currentDiff;
                this.perform();
                return this.last = this.current;
            }
        }
    };

    return Action;

})();

module.exports = Action;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/action.coffee