// koffee 1.4.0
var Action, Bomb, Material, Pushable, Vector,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

Pushable = require('./pushable');

Action = require('./action');

Vector = require('./lib/vector');

Material = require('./material');

Bomb = (function(superClass) {
    extend(Bomb, superClass);

    Bomb.prototype.isSpaceEgoistic = function() {
        return true;
    };

    function Bomb() {
        var geom, geom2;
        this.angle = 0.0;
        this.size = 0.55;
        this.splitted = false;
        geom = new THREE.DodecahedronGeometry(1);
        geom2 = new THREE.DodecahedronGeometry(1);
        geom2.rotateX(Vector.DEG2RAD(90));
        geom.merge(geom2);
        geom2.dispose();
        this.mesh = new THREE.Mesh(geom, Material.bomb);
        this.updateMesh();
        Bomb.__super__.constructor.apply(this, arguments);
        this.addEventWithName('explode');
        this.addAction(new Action(this, Action.ROTATE, "rotation", 2000, Action.CONTINUOUS));
        this.addAction(new Action(this, Action.IMPLODE, "implode", 100));
        this.addAction(new Action(this, Action.EXPLODE, "explode", 100));
        this.startTimedAction(this.getActionWithId(Action.ROTATE));
    }

    Bomb.prototype.del = function() {
        this.mesh.geometry.dispose();
        return Bomb.__super__.del.apply(this, arguments);
    };

    Bomb.prototype.updateMesh = function() {
        var a;
        a = Vector.DEG2RAD(this.angle);
        this.mesh.rotation.set(a, a / 2, a / 4);
        return this.mesh.scale.set(this.size, this.size, this.size);
    };

    Bomb.prototype.splitterInDirection = function(dir) {
        var Splitter, occupant, pos, splitter;
        splitter = false;
        pos = this.getPos().plus(dir);
        if (world.isUnoccupiedPos(pos)) {
            splitter = true;
        } else {
            occupant = world.getRealOccupantAtPos(pos);
            if (occupant) {
                if (occupant instanceof Bomb) {
                    occupant.bulletImpact();
                    return;
                }
                if (world.mayObjectPushToPos(this, pos, this.getActionWithId(Action.EXPLODE).duration)) {
                    splitter = true;
                }
            }
        }
        if (splitter) {
            Splitter = require('./splitter');
            return world.addObjectAtPos(new Splitter(dir), pos);
        }
    };

    Bomb.prototype.bulletImpact = function() {
        var directions, i, j;
        if (!this.splitted) {
            this.splitted = true;
            directions = [[1, 0, 0], [0, 1, 0], [0, 0, 1], [-1, 0, 0], [0, -1, 0], [0, 0, -1]];
            for (i = j = 0; j < 6; i = ++j) {
                this.splitterInDirection(new Vector(directions[i][0], directions[i][1], directions[i][2]));
            }
            this.startTimedAction(this.getActionWithId(Action.IMPLODE));
            world.playSound('BOMB_EXPLODE', this.getPos());
            return this.getEventWithName("explode").triggerActions();
        }
    };

    Bomb.prototype.performAction = function(action) {
        switch (action.id) {
            case Action.ROTATE:
                this.angle += action.getRelativeDelta() * 360;
                break;
            case Action.IMPLODE:
                this.size = 1.0 - action.getRelativeTime();
                break;
            case Action.EXPLODE:
                this.size = action.getRelativeTime();
                break;
            default:
                Bomb.__super__.performAction.call(this, action);
                return;
        }
        return this.updateMesh();
    };

    Bomb.prototype.actionFinished = function(action) {
        switch (action.id) {
            case Action.IMPLODE:
                return this.del();
            case Action.EXPLODE:
                this.splitterInDirection(this.direction);
                world.playSound('BOMB_SPLITTER', this.getPos());
                return this.startTimedAction(this.getActionWithId(Action.IMPLODE));
            default:
                return Bomb.__super__.actionFinished.call(this, action);
        }
    };

    return Bomb;

})(Pushable);

module.exports = Bomb;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/bomb.coffee