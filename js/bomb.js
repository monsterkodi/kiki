// koffee 1.4.0
var Action, Bomb, Material, Pushable, Vector,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

Pushable = require('./pushable');

Action = require('./action');

Vector = require('./lib/vector');

Material = require('./material');

Bomb = (function(superClass) {
    extend(Bomb, superClass);

    Bomb.prototype.isSpaceEgoistic = function() {
        return true;
    };

    function Bomb() {
        var geom, geom2;
        this.angle = 0.0;
        this.size = 0.55;
        this.splitted = false;
        geom = new THREE.DodecahedronGeometry(1);
        geom2 = new THREE.DodecahedronGeometry(1);
        geom2.rotateX(Vector.DEG2RAD(90));
        geom.merge(geom2);
        this.mesh = new THREE.Mesh(geom, Material.bomb);
        this.updateMesh();
        Bomb.__super__.constructor.apply(this, arguments);
        this.addEventWithName('explode');
        this.addAction(new Action(this, Action.ROTATE, "rotation", 2000, Action.CONTINUOUS));
        this.addAction(new Action(this, Action.IMPLODE, "implode", 100));
        this.addAction(new Action(this, Action.EXPLODE, "explode", 100));
        this.startTimedAction(this.getActionWithId(Action.ROTATE));
    }

    Bomb.prototype.updateMesh = function() {
        var a;
        a = Vector.DEG2RAD(this.angle);
        this.mesh.rotation.set(a, a / 2, a / 4);
        return this.mesh.scale.set(this.size, this.size, this.size);
    };

    Bomb.prototype.splitterInDirection = function(dir) {
        var Splitter, occupant, pos, splitter;
        splitter = false;
        pos = this.getPos().plus(dir);
        if (world.isUnoccupiedPos(pos)) {
            splitter = true;
        } else {
            occupant = world.getRealOccupantAtPos(pos);
            if (occupant) {
                if (occupant instanceof Bomb) {
                    occupant.bulletImpact();
                    return;
                }
                if (world.mayObjectPushToPos(this, pos, this.getActionWithId(Action.EXPLODE).duration)) {
                    splitter = true;
                }
            }
        }
        if (splitter) {
            Splitter = require('./splitter');
            return world.addObjectAtPos(new Splitter(dir), pos);
        }
    };

    Bomb.prototype.bulletImpact = function() {
        var directions, i, j;
        if (!this.splitted) {
            this.splitted = true;
            directions = [[1, 0, 0], [0, 1, 0], [0, 0, 1], [-1, 0, 0], [0 - 1, 0], [0, 0 - 1]];
            for (i = j = 0; j < 6; i = ++j) {
                this.splitterInDirection(new Vector(directions[i][0], directions[i][1], directions[i][2]));
            }
            this.startTimedAction(this.getActionWithId(Action.IMPLODE));
            world.playSound('BOMB_EXPLODE', this.getPos());
            return this.getEventWithName("explode").triggerActions();
        }
    };

    Bomb.prototype.performAction = function(action) {
        switch (action.id) {
            case Action.ROTATE:
                this.angle += action.getRelativeDelta() * 360;
                break;
            case Action.IMPLODE:
                this.size = 1.0 - action.getRelativeTime();
                break;
            case Action.EXPLODE:
                this.size = action.getRelativeTime();
                break;
            default:
                Bomb.__super__.performAction.call(this, action);
                return;
        }
        return this.updateMesh();
    };

    Bomb.prototype.actionFinished = function(action) {
        switch (action.id) {
            case Action.IMPLODE:
                return this.del();
            case Action.EXPLODE:
                this.splitterInDirection(this.direction);
                world.playSound('BOMB_SPLITTER', this.getPos());
                return this.startTimedAction(this.getActionWithId(Action.IMPLODE));
            default:
                return Bomb.__super__.actionFinished.call(this, action);
        }
    };

    return Bomb;

})(Pushable);

module.exports = Bomb;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9tYi5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQU1BLElBQUEsd0NBQUE7SUFBQTs7O0FBQUEsUUFBQSxHQUFXLE9BQUEsQ0FBUSxZQUFSOztBQUNYLE1BQUEsR0FBVyxPQUFBLENBQVEsVUFBUjs7QUFDWCxNQUFBLEdBQVcsT0FBQSxDQUFRLGNBQVI7O0FBQ1gsUUFBQSxHQUFXLE9BQUEsQ0FBUSxZQUFSOztBQUVMOzs7bUJBRUYsZUFBQSxHQUFpQixTQUFBO2VBQUc7SUFBSDs7SUFFZCxjQUFBO0FBRUMsWUFBQTtRQUFBLElBQUMsQ0FBQSxLQUFELEdBQVk7UUFDWixJQUFDLENBQUEsSUFBRCxHQUFZO1FBQ1osSUFBQyxDQUFBLFFBQUQsR0FBWTtRQUVaLElBQUEsR0FBTyxJQUFJLEtBQUssQ0FBQyxvQkFBVixDQUErQixDQUEvQjtRQUNQLEtBQUEsR0FBUSxJQUFJLEtBQUssQ0FBQyxvQkFBVixDQUErQixDQUEvQjtRQUNSLEtBQUssQ0FBQyxPQUFOLENBQWMsTUFBTSxDQUFDLE9BQVAsQ0FBZSxFQUFmLENBQWQ7UUFDQSxJQUFJLENBQUMsS0FBTCxDQUFXLEtBQVg7UUFFQSxJQUFDLENBQUEsSUFBRCxHQUFRLElBQUksS0FBSyxDQUFDLElBQVYsQ0FBZSxJQUFmLEVBQXFCLFFBQVEsQ0FBQyxJQUE5QjtRQUNSLElBQUMsQ0FBQSxVQUFELENBQUE7UUFDQSx1Q0FBQSxTQUFBO1FBRUEsSUFBQyxDQUFBLGdCQUFELENBQWtCLFNBQWxCO1FBRUEsSUFBQyxDQUFBLFNBQUQsQ0FBVyxJQUFJLE1BQUosQ0FBVyxJQUFYLEVBQWMsTUFBTSxDQUFDLE1BQXJCLEVBQThCLFVBQTlCLEVBQTBDLElBQTFDLEVBQWdELE1BQU0sQ0FBQyxVQUF2RCxDQUFYO1FBQ0EsSUFBQyxDQUFBLFNBQUQsQ0FBVyxJQUFJLE1BQUosQ0FBVyxJQUFYLEVBQWMsTUFBTSxDQUFDLE9BQXJCLEVBQThCLFNBQTlCLEVBQXlD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O0lBRFU7O21CQVdkLGFBQUEsR0FBZSxTQUFDLE1BQUQ7QUFFWCxnQkFBTyxNQUFNLENBQUMsRUFBZDtBQUFBLGlCQUNTLE1BQU0sQ0FBQyxNQURoQjtnQkFDNkIsSUFBQyxDQUFBLEtBQUQsSUFBVSxNQUFNLENBQUMsZ0JBQVAsQ0FBQSxDQUFBLEdBQTRCO0FBQTFEO0FBRFQsaUJBRVMsTUFBTSxDQUFDLE9BRmhCO2dCQUU2QixJQUFDLENBQUEsSUFBRCxHQUFRLEdBQUEsR0FBTSxNQUFNLENBQUMsZUFBUCxDQUFBO0FBQWxDO0FBRlQsaUJBR1MsTUFBTSxDQUFDLE9BSGhCO2dCQUc2QixJQUFDLENBQUEsSUFBRCxHQUFRLE1BQU0sQ0FBQyxlQUFQLENBQUE7QUFBNUI7QUFIVDtnQkFLUSx3Q0FBTSxNQUFOO0FBQ0E7QUFOUjtlQU9BLElBQUMsQ0FBQSxVQUFELENBQUE7SUFUVzs7bUJBV2YsY0FBQSxHQUFnQixTQUFDLE1BQUQ7QUFDWixnQkFBTyxNQUFNLENBQUMsRUFBZDtBQUFBLGlCQUNTLE1BQU0sQ0FBQyxPQURoQjt1QkFDNkIsSUFBQyxDQUFBLEdBQUQsQ0FBQTtBQUQ3QixpQkFFUyxNQUFNLENBQUMsT0FGaEI7Z0JBR1EsSUFBQyxDQUFBLG1CQUFELENBQXFCLElBQUMsQ0FBQSxTQUF0QjtnQkFDQSxLQUFLLENBQUMsU0FBTixDQUFnQixlQUFoQixFQUFpQyxJQUFDLENBQUEsTUFBRCxDQUFBLENBQWpDO3VCQUNBLElBQUMsQ0FBQSxnQkFBRCxDQUFrQixJQUFDLENBQUEsZUFBRCxDQUFpQixNQUFNLENBQUMsT0FBeEIsQ0FBbEI7QUFMUjt1QkFPUSx5Q0FBTSxNQUFOO0FBUFI7SUFEWTs7OztHQTFFRDs7QUFvRm5CLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiIyAwMDAwMDAwICAgICAwMDAwMDAwICAgMDAgICAgIDAwICAwMDAwMDAwICBcbiMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG4jIDAwMDAwMDAgICAgMDAwICAgMDAwICAwMDAwMDAwMDAgIDAwMDAwMDAgIFxuIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwIDAgMDAwICAwMDAgICAwMDBcbiMgMDAwMDAwMCAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgXG5cblB1c2hhYmxlID0gcmVxdWlyZSAnLi9wdXNoYWJsZSdcbkFjdGlvbiAgID0gcmVxdWlyZSAnLi9hY3Rpb24nXG5WZWN0b3IgICA9IHJlcXVpcmUgJy4vbGliL3ZlY3Rvcidcbk1hdGVyaWFsID0gcmVxdWlyZSAnLi9tYXRlcmlhbCdcblxuY2xhc3MgQm9tYiBleHRlbmRzIFB1c2hhYmxlXG4gICAgXG4gICAgaXNTcGFjZUVnb2lzdGljOiAtPiB0cnVlXG4gICAgXG4gICAgQDogLT5cbiAgICAgICAgXG4gICAgICAgIEBhbmdsZSAgICA9IDAuMFxuICAgICAgICBAc2l6ZSAgICAgPSAwLjU1XG4gICAgICAgIEBzcGxpdHRlZCA9IGZhbHNlXG5cbiAgICAgICAgZ2VvbSA9IG5ldyBUSFJFRS5Eb2RlY2FoZWRyb25HZW9tZXRyeSAxXG4gICAgICAgIGdlb20yID0gbmV3IFRIUkVFLkRvZGVjYWhlZHJvbkdlb21ldHJ5IDFcbiAgICAgICAgZ2VvbTIucm90YXRlWCBWZWN0b3IuREVHMlJBRCA5MFxuICAgICAgICBnZW9tLm1lcmdlIGdlb20yXG4gICAgICAgICAgICAgICAgXG4gICAgICAgIEBtZXNoID0gbmV3IFRIUkVFLk1lc2ggZ2VvbSwgTWF0ZXJpYWwuYm9tYlxuICAgICAgICBAdXBkYXRlTWVzaCgpXG4gICAgICAgIHN1cGVyXG4gICAgXG4gICAgICAgIEBhZGRFdmVudFdpdGhOYW1lICdleHBsb2RlJ1xuICAgICAgICBcbiAgICAgICAgQGFkZEFjdGlvbiBuZXcgQWN0aW9uIEAsIEFjdGlvbi5ST1RBVEUsICBcInJvdGF0aW9uXCIsIDIwMDAsIEFjdGlvbi5DT05USU5VT1VTXG4gICAgICAgIEBhZGRBY3Rpb24gbmV3IEFjdGlvbiBALCBBY3Rpb24uSU1QTE9ERSwgXCJpbXBsb2RlXCIsIDEwMFxuICAgICAgICBAYWRkQWN0aW9uIG5ldyBBY3Rpb24gQCwgQWN0aW9uLkVYUExPREUsIFwiZXhwbG9kZVwiLCAxMDBcbiAgICAgICAgXG4gICAgICAgIEBzdGFydFRpbWVkQWN0aW9uIEBnZXRBY3Rpb25XaXRoSWQgQWN0aW9uLlJPVEFURVxuXG4gICAgdXBkYXRlTWVzaDogLT4gXG4gICAgICAgIGEgPSBWZWN0b3IuREVHMlJBRCBAYW5nbGUgXG4gICAgICAgIEBtZXNoLnJvdGF0aW9uLnNldCBhLCBhLzIsIGEvNFxuICAgICAgICBAbWVzaC5zY2FsZS5zZXQgQHNpemUsIEBzaXplLCBAc2l6ZVxuICAgICAgICBcbiAgICBzcGxpdHRlckluRGlyZWN0aW9uOiAoZGlyKSAtPlxuICAgICAgICBcbiAgICAgICAgc3BsaXR0ZXIgPSBmYWxzZVxuICAgICAgICBwb3MgPSBAZ2V0UG9zKCkucGx1cyBkaXJcbiAgICAgICAgXG4gICAgICAgIGlmIHdvcmxkLmlzVW5vY2N1cGllZFBvcyBwb3NcbiAgICAgICAgICAgIHNwbGl0dGVyID0gdHJ1ZVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBvY2N1cGFudCA9IHdvcmxkLmdldFJlYWxPY2N1cGFudEF0UG9zIHBvc1xuICAgICAgICAgICAgaWYgb2NjdXBhbnRcbiAgICAgICAgICAgICAgICBpZiBvY2N1cGFudCBpbnN0YW5jZW9mIEJvbWJcbiAgICAgICAgICAgICAgICAgICAgb2NjdXBhbnQuYnVsbGV0SW1wYWN0KClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgaWYgd29ybGQubWF5T2JqZWN0UHVzaFRvUG9zIEAsIHBvcywgQGdldEFjdGlvbldpdGhJZChBY3Rpb24uRVhQTE9ERSkuZHVyYXRpb25cbiAgICAgICAgICAgICAgICAgICAgc3BsaXR0ZXIgPSB0cnVlXG4gICAgICAgICAgICBcbiAgICAgICAgaWYgc3BsaXR0ZXJcbiAgICAgICAgICAgIFNwbGl0dGVyID0gcmVxdWlyZSAnLi9zcGxpdHRlcidcbiAgICAgICAgICAgIHdvcmxkLmFkZE9iamVjdEF0UG9zIG5ldyBTcGxpdHRlcihkaXIpLCBwb3NcbiAgICBcbiAgICBidWxsZXRJbXBhY3Q6IC0+XG4gICAgICAgIGlmIG5vdCBAc3BsaXR0ZWRcbiAgICAgICAgICAgIEBzcGxpdHRlZCA9IHRydWUgXG4gICAgICAgICAgICBkaXJlY3Rpb25zID0gW1sxIDAgMF0sIFswIDEgMF0sIFswIDAgMV0sIFstMSAwIDBdLCBbMCAtMSAwXSwgWzAgMCAtMV1dXG4gICAgICAgICAgICBmb3IgaSBpbiBbMC4uLjZdXG4gICAgICAgICAgICAgICAgQHNwbGl0dGVySW5EaXJlY3Rpb24gbmV3IFZlY3RvciBkaXJlY3Rpb25zW2ldWzBdLCBkaXJlY3Rpb25zW2ldWzFdLCBkaXJlY3Rpb25zW2ldWzJdXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIEBzdGFydFRpbWVkQWN0aW9uIEBnZXRBY3Rpb25XaXRoSWQgQWN0aW9uLklNUExPREVcbiAgICAgICAgICAgIHdvcmxkLnBsYXlTb3VuZCAnQk9NQl9FWFBMT0RFJywgQGdldFBvcygpXG4gICAgICAgICAgICBAZ2V0RXZlbnRXaXRoTmFtZShcImV4cGxvZGVcIikudHJpZ2dlckFjdGlvbnMoKVxuICAgIFxuICAgIHBlcmZvcm1BY3Rpb246IChhY3Rpb24pIC0+XG4gICAgICAgICMga2xvZyBcImJvbWIucGVyZm9ybUFjdGlvbiAje2FjdGlvbi5pZH1cIlxuICAgICAgICBzd2l0Y2ggYWN0aW9uLmlkXG4gICAgICAgICAgICB3aGVuIEFjdGlvbi5ST1RBVEUgIHRoZW4gQGFuZ2xlICs9IGFjdGlvbi5nZXRSZWxhdGl2ZURlbHRhKCkgKiAzNjBcbiAgICAgICAgICAgIHdoZW4gQWN0aW9uLklNUExPREUgdGhlbiBAc2l6ZSA9IDEuMCAtIGFjdGlvbi5nZXRSZWxhdGl2ZVRpbWUoKVxuICAgICAgICAgICAgd2hlbiBBY3Rpb24uRVhQTE9ERSB0aGVuIEBzaXplID0gYWN0aW9uLmdldFJlbGF0aXZlVGltZSgpXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgc3VwZXIgYWN0aW9uXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIEB1cGRhdGVNZXNoKClcbiAgICBcbiAgICBhY3Rpb25GaW5pc2hlZDogKGFjdGlvbikgLT5cbiAgICAgICAgc3dpdGNoIGFjdGlvbi5pZFxuICAgICAgICAgICAgd2hlbiBBY3Rpb24uSU1QTE9ERSB0aGVuIEBkZWwoKVxuICAgICAgICAgICAgd2hlbiBBY3Rpb24uRVhQTE9ERVxuICAgICAgICAgICAgICAgIEBzcGxpdHRlckluRGlyZWN0aW9uIEBkaXJlY3Rpb25cbiAgICAgICAgICAgICAgICB3b3JsZC5wbGF5U291bmQgJ0JPTUJfU1BMSVRURVInLCBAZ2V0UG9zKClcbiAgICAgICAgICAgICAgICBAc3RhcnRUaW1lZEFjdGlvbiBAZ2V0QWN0aW9uV2l0aElkIEFjdGlvbi5JTVBMT0RFXG4gICAgICAgICAgICBlbHNlIFxuICAgICAgICAgICAgICAgIHN1cGVyIGFjdGlvblxuICAgICAgICBcbm1vZHVsZS5leHBvcnRzID0gQm9tYlxuIl19
//# sourceURL=../coffee/bomb.coffee