// koffee 1.4.0
var Cage, Material;

Material = require('./material');

Cage = (function() {
    function Cage(size1, gap) {
        var geom;
        this.size = size1;
        Cage.gap = gap;
        geom = Cage.wallTiles(this.size, 'inside', 0);
        this.raster = new THREE.Mesh(geom, Material.raster);
        this.raster.translateX(-0.5);
        this.raster.translateY(-0.5);
        this.raster.translateZ(-0.5);
        this.raster.receiveShadow = true;
        world.scene.add(this.raster);
        geom = Cage.wallTiles(this.size, 'inside', Cage.gap);
        this.cage = new THREE.Mesh(geom, Material.plate);
        this.cage.translateX(-0.5);
        this.cage.translateY(-0.5);
        this.cage.translateZ(-0.5);
        this.cage.receiveShadow = true;
        world.scene.add(this.cage);
    }

    Cage.prototype.del = function() {
        world.scene.remove(this.raster);
        return world.scene.remove(this.cage);
    };

    Cage.wallTiles = function(size, side, raster) {
        var faces, geom, i, j, k, l, m, n, normals, o, offset, p, plates, positions, ref, ref1, ref2, ref3, ref4, ref5, s, triangles, x, xyPlate, xzPlate, y, yxPlate, yzPlate, z, zxPlate, zyPlate;
        if (raster == null) {
            raster = Cage.gap;
        }
        faces = size.x * size.y * 2 + size.x * size.z * 2 + size.y * size.z * 2;
        triangles = faces * 2;
        positions = new Float32Array(triangles * 3 * 3);
        normals = new Float32Array(triangles * 3 * 3);
        s = 1 - raster;
        o = raster;
        i = -1;
        offset = (side === 'outside' && -1 || 1) * raster / 20;
        xyPlate = function(x, y, z) {
            positions[i += 1] = x + o;
            normals[i] = 0;
            positions[i += 1] = y + o;
            normals[i] = 0;
            positions[i += 1] = z;
            normals[i] = 1;
            positions[i += 1] = x + s;
            normals[i] = 0;
            positions[i += 1] = y + o;
            normals[i] = 0;
            positions[i += 1] = z;
            normals[i] = 1;
            positions[i += 1] = x + o;
            normals[i] = 0;
            positions[i += 1] = y + s;
            normals[i] = 0;
            positions[i += 1] = z;
            normals[i] = 1;
            positions[i += 1] = x + s;
            normals[i] = 0;
            positions[i += 1] = y + o;
            normals[i] = 0;
            positions[i += 1] = z;
            normals[i] = 1;
            positions[i += 1] = x + s;
            normals[i] = 0;
            positions[i += 1] = y + s;
            normals[i] = 0;
            positions[i += 1] = z;
            normals[i] = 1;
            positions[i += 1] = x + o;
            normals[i] = 0;
            positions[i += 1] = y + s;
            normals[i] = 0;
            positions[i += 1] = z;
            return normals[i] = 1;
        };
        yxPlate = function(x, y, z) {
            positions[i += 1] = x + o;
            normals[i] = 0;
            positions[i += 1] = y + o;
            normals[i] = 0;
            positions[i += 1] = z;
            normals[i] = -1;
            positions[i += 1] = x + o;
            normals[i] = 0;
            positions[i += 1] = y + s;
            normals[i] = 0;
            positions[i += 1] = z;
            normals[i] = -1;
            positions[i += 1] = x + s;
            normals[i] = 0;
            positions[i += 1] = y + o;
            normals[i] = 0;
            positions[i += 1] = z;
            normals[i] = -1;
            positions[i += 1] = x + s;
            normals[i] = 0;
            positions[i += 1] = y + o;
            normals[i] = 0;
            positions[i += 1] = z;
            normals[i] = -1;
            positions[i += 1] = x + o;
            normals[i] = 0;
            positions[i += 1] = y + s;
            normals[i] = 0;
            positions[i += 1] = z;
            normals[i] = -1;
            positions[i += 1] = x + s;
            normals[i] = 0;
            positions[i += 1] = y + s;
            normals[i] = 0;
            positions[i += 1] = z;
            return normals[i] = -1;
        };
        zxPlate = function(x, y, z) {
            positions[i += 1] = x + o;
            normals[i] = 0;
            positions[i += 1] = y;
            normals[i] = 1;
            positions[i += 1] = z + o;
            normals[i] = 0;
            positions[i += 1] = x + o;
            normals[i] = 0;
            positions[i += 1] = y;
            normals[i] = 1;
            positions[i += 1] = z + s;
            normals[i] = 0;
            positions[i += 1] = x + s;
            normals[i] = 0;
            positions[i += 1] = y;
            normals[i] = 1;
            positions[i += 1] = z + o;
            normals[i] = 0;
            positions[i += 1] = x + s;
            normals[i] = 0;
            positions[i += 1] = y;
            normals[i] = 1;
            positions[i += 1] = z + o;
            normals[i] = 0;
            positions[i += 1] = x + o;
            normals[i] = 0;
            positions[i += 1] = y;
            normals[i] = 1;
            positions[i += 1] = z + s;
            normals[i] = 0;
            positions[i += 1] = x + s;
            normals[i] = 0;
            positions[i += 1] = y;
            normals[i] = 1;
            positions[i += 1] = z + s;
            return normals[i] = 0;
        };
        xzPlate = function(x, y, z) {
            positions[i += 1] = x + o;
            normals[i] = 0;
            positions[i += 1] = y;
            normals[i] = -1;
            positions[i += 1] = z + o;
            normals[i] = 0;
            positions[i += 1] = x + s;
            normals[i] = 0;
            positions[i += 1] = y;
            normals[i] = -1;
            positions[i += 1] = z + o;
            normals[i] = 0;
            positions[i += 1] = x + o;
            normals[i] = 0;
            positions[i += 1] = y;
            normals[i] = -1;
            positions[i += 1] = z + s;
            normals[i] = 0;
            positions[i += 1] = x + s;
            normals[i] = 0;
            positions[i += 1] = y;
            normals[i] = -1;
            positions[i += 1] = z + s;
            normals[i] = 0;
            positions[i += 1] = x + o;
            normals[i] = 0;
            positions[i += 1] = y;
            normals[i] = -1;
            positions[i += 1] = z + s;
            normals[i] = 0;
            positions[i += 1] = x + s;
            normals[i] = 0;
            positions[i += 1] = y;
            normals[i] = -1;
            positions[i += 1] = z + o;
            return normals[i] = 0;
        };
        yzPlate = function(x, y, z) {
            positions[i += 1] = x;
            normals[i] = 1;
            positions[i += 1] = y + o;
            normals[i] = 0;
            positions[i += 1] = z + o;
            normals[i] = 0;
            positions[i += 1] = x;
            normals[i] = 1;
            positions[i += 1] = y + s;
            normals[i] = 0;
            positions[i += 1] = z + o;
            normals[i] = 0;
            positions[i += 1] = x;
            normals[i] = 1;
            positions[i += 1] = y + o;
            normals[i] = 0;
            positions[i += 1] = z + s;
            normals[i] = 0;
            positions[i += 1] = x;
            normals[i] = 1;
            positions[i += 1] = y + s;
            normals[i] = 0;
            positions[i += 1] = z + o;
            normals[i] = 0;
            positions[i += 1] = x;
            normals[i] = 1;
            positions[i += 1] = y + s;
            normals[i] = 0;
            positions[i += 1] = z + s;
            normals[i] = 0;
            positions[i += 1] = x;
            normals[i] = 1;
            positions[i += 1] = y + o;
            normals[i] = 0;
            positions[i += 1] = z + s;
            return normals[i] = 0;
        };
        zyPlate = function(x, y, z) {
            positions[i += 1] = x;
            normals[i] = -1;
            positions[i += 1] = y + o;
            normals[i] = 0;
            positions[i += 1] = z + o;
            normals[i] = 0;
            positions[i += 1] = x;
            normals[i] = -1;
            positions[i += 1] = y + o;
            normals[i] = 0;
            positions[i += 1] = z + s;
            normals[i] = 0;
            positions[i += 1] = x;
            normals[i] = -1;
            positions[i += 1] = y + s;
            normals[i] = 0;
            positions[i += 1] = z + o;
            normals[i] = 0;
            positions[i += 1] = x;
            normals[i] = -1;
            positions[i += 1] = y + s;
            normals[i] = 0;
            positions[i += 1] = z + o;
            normals[i] = 0;
            positions[i += 1] = x;
            normals[i] = -1;
            positions[i += 1] = y + o;
            normals[i] = 0;
            positions[i += 1] = z + s;
            normals[i] = 0;
            positions[i += 1] = x;
            normals[i] = -1;
            positions[i += 1] = y + s;
            normals[i] = 0;
            positions[i += 1] = z + s;
            return normals[i] = 0;
        };
        plates = side === 'outside' && [yxPlate, xyPlate, xzPlate, zxPlate, zyPlate, yzPlate] || [xyPlate, yxPlate, zxPlate, xzPlate, yzPlate, zyPlate];
        for (x = j = 0, ref = size.x; 0 <= ref ? j < ref : j > ref; x = 0 <= ref ? ++j : --j) {
            for (y = k = 0, ref1 = size.y; 0 <= ref1 ? k < ref1 : k > ref1; y = 0 <= ref1 ? ++k : --k) {
                plates[0](x, y, offset);
                plates[1](x, y, size.z - offset);
            }
        }
        for (x = l = 0, ref2 = size.x; 0 <= ref2 ? l < ref2 : l > ref2; x = 0 <= ref2 ? ++l : --l) {
            for (z = m = 0, ref3 = size.z; 0 <= ref3 ? m < ref3 : m > ref3; z = 0 <= ref3 ? ++m : --m) {
                plates[2](x, offset, z);
                plates[3](x, size.y - offset, z);
            }
        }
        for (y = n = 0, ref4 = size.y; 0 <= ref4 ? n < ref4 : n > ref4; y = 0 <= ref4 ? ++n : --n) {
            for (z = p = 0, ref5 = size.z; 0 <= ref5 ? p < ref5 : p > ref5; z = 0 <= ref5 ? ++p : --p) {
                plates[4](offset, y, z);
                plates[5](size.x - offset, y, z);
            }
        }
        geom = new THREE.BufferGeometry;
        geom.addAttribute('position', new THREE.BufferAttribute(positions, 3));
        geom.addAttribute('normal', new THREE.BufferAttribute(normals, 3));
        return geom;
    };

    return Cage;

})();

module.exports = Cage;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/cage.coffee