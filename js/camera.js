// koffee 1.4.0
var Camera, Matrix, Quaternion, Vector, clamp,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

clamp = require('kxk').clamp;

Matrix = require('./lib/matrix');

Vector = require('./lib/vector');

Quaternion = require('./lib/quaternion');

Camera = (function(superClass) {
    extend(Camera, superClass);

    Camera.INSIDE = 0;

    Camera.BEHIND = 1;

    Camera.FOLLOW = 2;

    function Camera(player, opt) {
        var ref, ref1, ref2, ref3;
        this.player = player;
        this.fov = (ref = opt != null ? opt.fov : void 0) != null ? ref : 90;
        this.near = (ref1 = opt != null ? opt.near : void 0) != null ? ref1 : 0.01;
        this.eye_distance = this.near;
        this.far = (ref2 = opt != null ? opt.far : void 0) != null ? ref2 : 30;
        this.mode = Camera.BEHIND;
        this.aspect = (ref3 = opt.aspect) != null ? ref3 : -1;
        this.dist = 10;
        Camera.__super__.constructor.apply(this, arguments);
        this.cam = new THREE.PerspectiveCamera(this.fov, this.aspect, this.near, this.far);
        this.cam.position.z = this.dist;
    }

    Camera.prototype.step = function() {
        var camPos, pos;
        switch (this.mode) {
            case Camera.INSIDE:
                this.insideProjection();
                break;
            case Camera.BEHIND:
                this.behindProjection();
                break;
            case Camera.FOLLOW:
                this.followProjection();
        }
        camPos = this.getPosition();
        this.cam.position.copy(camPos);
        this.cam.up.copy(this.getYVector());
        this.cam.lookAt(camPos.plus(this.getZVector()));
        this.cam.updateProjectionMatrix();
        if (this.light != null) {
            pos = this.getPosition().plus(this.light_offset);
            this.light.setDirection(-this.getZVector());
            return this.light.setPosition(new Vector(pos[X], pos[Y], pos[Z], 1.0));
        }
    };

    Camera.prototype.getLookAtPosition = function() {
        return this.getZVector().mul(-this.eye_distance).plus(this.getPosition());
    };

    Camera.prototype.setOrientation = function(o) {
        this.setYVector(o.rotate(Vector.unitY));
        this.setZVector(o.rotate(Vector.unitZ));
        this.setXVector(o.rotate(Vector.minusX));
        this.cam.up.copy(this.getYVector());
        return this.cam.lookAt(this.getPosition().plus(this.getZVector()));
    };

    Camera.prototype.setFov = function(fov) {
        return this.fov = Math.max(2.0, Math.min(fov, 175.0));
    };

    Camera.prototype.insideProjection = function() {
        var camPos, lookAngle, lookDelta, newLookVector, playerDir, playerPos, playerUp, posDelta, rot;
        playerPos = this.player.currentPos();
        playerDir = this.player.currentDir();
        playerUp = this.player.currentUp();
        lookAngle = this.player.look_angle;
        posDelta = world.getSpeed() / 10.0;
        camPos = playerPos;
        if (lookAngle < 0) {
            camPos.add(playerUp.mul(-2 * lookAngle / 90));
        }
        this.setPosition(this.getPosition().mul(1.0 - posDelta).plus(camPos.mul(posDelta)));
        if (lookAngle) {
            this.setXVector(playerDir.cross(playerUp).normal());
            rot = Quaternion.rotationAroundVector(lookAngle, this.getXVector());
            this.setYVector(rot.rotate(playerUp));
            this.setZVector(rot.rotate(playerDir));
        } else {
            lookDelta = (2.0 - this.getZVector().dot(playerDir)) * world.getSpeed() / 50.0;
            newLookVector = this.getZVector().mul(1.0 - lookDelta).plus(playerDir.mul(lookDelta));
            newLookVector.normalize();
            this.setXVector(playerUp.cross(newLookVector).normal());
            this.setYVector(playerUp);
            this.setZVector(newLookVector);
        }
        return this.projection;
    };

    Camera.prototype.behindProjection = function() {
        var botToCamera, camPos, lookAngle, lookDelta, min_f, newLookVector, playerDir, playerPos, playerUp, posDelta, rot;
        playerPos = this.player.currentPos();
        playerDir = this.player.currentDir();
        playerUp = this.player.currentUp();
        lookAngle = this.player.look_angle;
        botToCamera = playerUp.minus(playerDir.mul(2));
        min_f = botToCamera.length();
        botToCamera.normalize();
        min_f = Math.min(world.getWallDistanceForRay(playerPos, botToCamera), min_f);
        camPos = playerPos.plus(botToCamera.mul(Math.max(min_f, 0.72) * (1 - Math.abs(lookAngle) / 90)));
        if (lookAngle < 0) {
            camPos.add(playerUp.mul(-2 * lookAngle / 90));
        }
        camPos = world.getInsideWallPosWithDelta(camPos, 0.2);
        posDelta = 0.2;
        this.setPosition(this.getPosition().mul(1.0 - posDelta).plus(camPos.mul(posDelta)));
        if (lookAngle) {
            this.setXVector(playerDir.cross(playerUp).normal());
            rot = Quaternion.rotationAroundVector(lookAngle, this.getXVector());
            this.setYVector(rot.rotate(playerUp));
            return this.setZVector(rot.rotate(playerDir));
        } else {
            lookDelta = 0.3;
            newLookVector = this.getZVector().mul(1.0 - lookDelta).plus((playerDir.minus(playerUp.mul(0.2)).normal()).mul(lookDelta));
            newLookVector.normalize();
            this.setZVector(newLookVector);
            this.setXVector(playerUp.cross(newLookVector).normal());
            return this.setYVector(newLookVector.cross(this.getXVector()).normal());
        }
    };

    Camera.prototype.followProjection = function() {
        var botToCamera, botToCameraNormal, camPos, cameraBotDistance, delta, desiredDistance, difference, horizontalAngle, lookDelta, mappedToXZ, newLeftVector, newLookVector, newUpVector, playerDir, playerLeft, playerPos, playerUp, rotFactor, rotQuat, upDelta, verticalAngle, wall_distance;
        camPos = this.getPosition();
        desiredDistance = 2.0;
        playerPos = this.player.currentPos();
        playerDir = this.player.currentDir();
        playerUp = this.player.currentUp();
        playerLeft = this.player.currentLeft();
        botToCamera = camPos.minus(playerPos);
        cameraBotDistance = botToCamera.length();
        if (cameraBotDistance >= desiredDistance) {
            difference = cameraBotDistance - desiredDistance;
            delta = difference * difference / 400.0;
            camPos = camPos.mul(1.0 - delta).plus(playerPos.mul(delta));
        } else {
            difference = desiredDistance - cameraBotDistance;
            delta = difference / 20.0;
            camPos = camPos.mul(1.0 - delta).plus((playerPos.plus(botToCamera.normal().mul(desiredDistance))).mul(delta));
        }
        botToCamera = camPos.minus(playerPos);
        botToCameraNormal = botToCamera.normal();
        verticalAngle = Vector.RAD2DEG(Math.acos(clamp(-1.0, 1.0, botToCameraNormal.dot(playerUp))));
        if (verticalAngle > 45) {
            rotQuat = Quaternion.rotationAroundVector(verticalAngle / 400.0, botToCameraNormal.cross(playerUp));
            botToCamera = rotQuat.rotate(botToCamera);
            botToCameraNormal = botToCamera.normal();
            camPos = playerPos.plus(botToCamera);
        }
        rotFactor = 1.0;
        wall_distance = world.getWallDistanceForPos(camPos);
        if (wall_distance < 0.5) {
            if (wall_distance < 0.2) {
                camPos = world.getInsideWallPosWithDelta(camPos, 0.2);
                botToCamera = camPos.minus(playerPos);
                botToCameraNormal = botToCamera.normal();
            }
            rotFactor = 0.5 / (wall_distance - 0.2);
        }
        mappedToXZ = (botToCamera.minus(playerUp.mul(botToCamera.dot(playerUp)))).normal();
        horizontalAngle = Vector.RAD2DEG(Math.acos(clamp(-1.0, 1.0, -playerDir.dot(mappedToXZ))));
        if (botToCameraNormal.dot(playerLeft) < 0) {
            horizontalAngle = -horizontalAngle;
        }
        rotQuat = Quaternion.rotationAroundVector(horizontalAngle / (rotFactor * 400.0), playerUp);
        camPos = playerPos.plus(rotQuat.rotate(botToCamera));
        botToCamera = camPos.minus(playerPos);
        botToCameraNormal = botToCamera.normal();
        this.setPosition(camPos);
        lookDelta = this.getZVector().dot(botToCameraNormal);
        lookDelta *= lookDelta / 30.0;
        newLookVector = this.getZVector().mul(1.0 - lookDelta).plus(botToCameraNormal.neg().mul(lookDelta));
        newLookVector.normalize();
        upDelta = 1.5 - this.getYVector().dot(playerUp);
        upDelta *= upDelta / 100.0;
        newUpVector = this.getYVector().mul(1.0 - upDelta).plus(playerUp.mul(upDelta));
        newUpVector.normalize();
        newLeftVector = newUpVector.cross(newLookVector);
        this.setXVector(newLeftVector);
        this.setYVector(newUpVector);
        this.setZVector(newLookVector);
        return this.projection;
    };

    return Camera;

})(Matrix);

module.exports = Camera;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/camera.coffee