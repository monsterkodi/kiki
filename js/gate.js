// koffee 1.4.0
var Action, Gate, Light, Material, Switch, Vector,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

Vector = require('./lib/vector');

Switch = require('./switch');

Light = require('./light');

Action = require('./action');

Material = require('./material');

Gate = (function(superClass) {
    extend(Gate, superClass);

    Gate.prototype.isSpaceEgoistic = function() {
        return false;
    };

    function Gate(active) {
        Gate.__super__.constructor.call(this, active);
        this.ENTER_EVENT = this.addEventWithName("enter");
        this.value = 0.0;
        this.getActionWithId(Action.ROTATE).duration = 50000;
        this.sound_on = 'GATE_OPEN';
        this.sound_off = 'GATE_CLOSE';
    }

    Gate.prototype.createLight = function() {
        return this.light = new Light({
            pos: this.position,
            radius: 10.0,
            shadow: true
        });
    };

    Gate.prototype.createMesh = function() {
        var t1, t2, t3, torusRadius;
        torusRadius = 0.05;
        t1 = new THREE.TorusBufferGeometry(0.5 - torusRadius, torusRadius, 16, 32);
        this.mesh = new THREE.Mesh(t1, Material.gate);
        this.mesh.castShadow = true;
        this.mesh.receiveShadow = true;
        t2 = new THREE.TorusGeometry(0.5 - torusRadius, torusRadius, 16, 32);
        t3 = new THREE.TorusGeometry(0.5 - torusRadius, torusRadius, 16, 32);
        t2.rotateY(Vector.DEG2RAD(90));
        t3.rotateX(Vector.DEG2RAD(90));
        t2.merge(t3);
        this.tors = new THREE.Mesh(t2, Material.gate);
        this.tors.castShadow = true;
        this.tors.receiveShadow = true;
        this.mesh.add(this.tors);
        this.mesh.castShadow = true;
        this.mesh.receiveShadow = true;
        return this.mesh;
    };

    Gate.prototype.bulletImpact = function() {};

    Gate.prototype.newCellMate = function(object) {
        if (object.name === 'player' && this.active) {
            world.playSound('GATE_WARP');
            this.events[this.ENTER_EVENT].triggerActions();
            return this.active = false;
        }
    };

    return Gate;

})(Switch);

module.exports = Gate;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2F0ZS5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQU1BLElBQUEsNkNBQUE7SUFBQTs7O0FBQUEsTUFBQSxHQUFXLE9BQUEsQ0FBUSxjQUFSOztBQUNYLE1BQUEsR0FBVyxPQUFBLENBQVEsVUFBUjs7QUFDWCxLQUFBLEdBQVcsT0FBQSxDQUFRLFNBQVI7O0FBQ1gsTUFBQSxHQUFXLE9BQUEsQ0FBUSxVQUFSOztBQUNYLFFBQUEsR0FBVyxPQUFBLENBQVEsWUFBUjs7QUFFTDs7O21CQUVGLGVBQUEsR0FBaUIsU0FBQTtlQUFHO0lBQUg7O0lBRWQsY0FBQyxNQUFEO1FBQ0Msc0NBQU0sTUFBTjtRQUNBLElBQUMsQ0FBQSxXQUFELEdBQWUsSUFBQyxDQUFBLGdCQUFELENBQWtCLE9BQWxCO1FBQ2YsSUFBQyxDQUFBLEtBQUQsR0FBUztRQUNULElBQUMsQ0FBQSxlQUFELENBQWlCLE1BQU0sQ0FBQyxNQUF4QixDQUErQixDQUFDLFFBQWhDLEdBQTJDO1FBQzNDLElBQUMsQ0FBQSxRQUFELEdBQWE7UUFDYixJQUFDLENBQUEsU0FBRCxHQUFhO0lBTmQ7O21CQVFILFdBQUEsR0FBYSxTQUFBO2VBQ1QsSUFBQyxDQUFBLEtBQUQsR0FBUyxJQUFJLEtBQUosQ0FDTDtZQUFBLEdBQUEsRUFBUSxJQUFDLENBQUEsUUFBVDtZQUNBLE1BQUEsRUFBUSxJQURSO1lBRUEsTUFBQSxFQUFRLElBRlI7U0FESztJQURBOzttQkFNYixVQUFBLEdBQVksU0FBQTtBQUNSLFlBQUE7UUFBQSxXQUFBLEdBQWM7UUFDZCxFQUFBLEdBQUssSUFBSSxLQUFLLENBQUMsbUJBQVYsQ0FBOEIsR0FBQSxHQUFJLFdBQWxDLEVBQStDLFdBQS9DLEVBQTRELEVBQTVELEVBQWdFLEVBQWhFO1FBRUwsSUFBQyxDQUFBLElBQUQsR0FBUSxJQUFJLEtBQUssQ0FBQyxJQUFWLENBQWUsRUFBZixFQUFtQixRQUFRLENBQUMsSUFBNUI7UUFDUixJQUFDLENBQUEsSUFBSSxDQUFDLFVBQU4sR0FBbUI7UUFDbkIsSUFBQyxDQUFBLElBQUksQ0FBQyxhQUFOLEdBQXNCO1FBRXRCLEVBQUEsR0FBSyxJQUFJLEtBQUssQ0FBQyxhQUFWLENBQXdCLEdBQUEsR0FBSSxXQUE1QixFQUF5QyxXQUF6QyxFQUFzRCxFQUF0RCxFQUEwRCxFQUExRDtRQUNMLEVBQUEsR0FBSyxJQUFJLEtBQUssQ0FBQyxhQUFWLENBQXdCLEdBQUEsR0FBSSxXQUE1QixFQUF5QyxXQUF6QyxFQUFzRCxFQUF0RCxFQUEwRCxFQUExRDtRQUNMLEVBQUUsQ0FBQyxPQUFILENBQVcsTUFBTSxDQUFDLE9BQVAsQ0FBZSxFQUFmLENBQVg7UUFDQSxFQUFFLENBQUMsT0FBSCxDQUFXLE1BQU0sQ0FBQyxPQUFQLENBQWUsRUFBZixDQUFYO1FBQ0EsRUFBRSxDQUFDLEtBQUgsQ0FBUyxFQUFUO1FBQ0EsSUFBQyxDQUFBLElBQUQsR0FBUSxJQUFJLEtBQUssQ0FBQyxJQUFWLENBQWUsRUFBZixFQUFtQixRQUFRLENBQUMsSUFBNUI7UUFDUixJQUFDLENBQUEsSUFBSSxDQUFDLFVBQU4sR0FBbUI7UUFDbkIsSUFBQyxDQUFBLElBQUksQ0FBQyxhQUFOLEdBQXNCO1FBQ3RCLElBQUMsQ0FBQSxJQUFJLENBQUMsR0FBTixDQUFVLElBQUMsQ0FBQSxJQUFYO1FBQ0EsSUFBQyxDQUFBLElBQUksQ0FBQyxVQUFOLEdBQW1CO1FBQ25CLElBQUMsQ0FBQSxJQUFJLENBQUMsYUFBTixHQUFzQjtlQUN0QixJQUFDLENBQUE7SUFuQk87O21CQXFCWixZQUFBLEdBQWMsU0FBQSxHQUFBOzttQkFFZCxXQUFBLEdBQWEsU0FBQyxNQUFEO1FBQ1QsSUFBRyxNQUFNLENBQUMsSUFBUCxLQUFlLFFBQWYsSUFBNEIsSUFBQyxDQUFBLE1BQWhDO1lBQ0ksS0FBSyxDQUFDLFNBQU4sQ0FBZ0IsV0FBaEI7WUFFQSxJQUFDLENBQUEsTUFBTyxDQUFBLElBQUMsQ0FBQSxXQUFELENBQWEsQ0FBQyxjQUF0QixDQUFBO21CQUNBLElBQUMsQ0FBQSxNQUFELEdBQVUsTUFKZDs7SUFEUzs7OztHQXpDRTs7QUFnRG5CLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiIyAgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMDAwICAwMDAwMDAwMFxuIyAwMDAgICAgICAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgIFxuIyAwMDAgIDAwMDAgIDAwMDAwMDAwMCAgICAgMDAwICAgICAwMDAwMDAwIFxuIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgIFxuIyAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAwMDAwMFxuXG5WZWN0b3IgICA9IHJlcXVpcmUgJy4vbGliL3ZlY3RvcidcblN3aXRjaCAgID0gcmVxdWlyZSAnLi9zd2l0Y2gnXG5MaWdodCAgICA9IHJlcXVpcmUgJy4vbGlnaHQnXG5BY3Rpb24gICA9IHJlcXVpcmUgJy4vYWN0aW9uJ1xuTWF0ZXJpYWwgPSByZXF1aXJlICcuL21hdGVyaWFsJ1xuXG5jbGFzcyBHYXRlIGV4dGVuZHMgU3dpdGNoXG4gICAgXG4gICAgaXNTcGFjZUVnb2lzdGljOiAtPiBmYWxzZVxuXG4gICAgQDogKGFjdGl2ZSkgLT5cbiAgICAgICAgc3VwZXIgYWN0aXZlXG4gICAgICAgIEBFTlRFUl9FVkVOVCA9IEBhZGRFdmVudFdpdGhOYW1lIFwiZW50ZXJcIlxuICAgICAgICBAdmFsdWUgPSAwLjBcbiAgICAgICAgQGdldEFjdGlvbldpdGhJZChBY3Rpb24uUk9UQVRFKS5kdXJhdGlvbiA9IDUwMDAwIFxuICAgICAgICBAc291bmRfb24gID0gJ0dBVEVfT1BFTidcbiAgICAgICAgQHNvdW5kX29mZiA9ICdHQVRFX0NMT1NFJ1xuXG4gICAgY3JlYXRlTGlnaHQ6IC0+IFxuICAgICAgICBAbGlnaHQgPSBuZXcgTGlnaHQgXG4gICAgICAgICAgICBwb3M6ICAgIEBwb3NpdGlvblxuICAgICAgICAgICAgcmFkaXVzOiAxMC4wXG4gICAgICAgICAgICBzaGFkb3c6IHRydWVcbiAgICAgICAgICAgIFxuICAgIGNyZWF0ZU1lc2g6ICgpIC0+IFxuICAgICAgICB0b3J1c1JhZGl1cyA9IDAuMDVcbiAgICAgICAgdDEgPSBuZXcgVEhSRUUuVG9ydXNCdWZmZXJHZW9tZXRyeSAwLjUtdG9ydXNSYWRpdXMsIHRvcnVzUmFkaXVzLCAxNiwgMzJcbiAgICAgICAgICAgIFxuICAgICAgICBAbWVzaCA9IG5ldyBUSFJFRS5NZXNoIHQxLCBNYXRlcmlhbC5nYXRlXG4gICAgICAgIEBtZXNoLmNhc3RTaGFkb3cgPSB0cnVlXG4gICAgICAgIEBtZXNoLnJlY2VpdmVTaGFkb3cgPSB0cnVlXG4gICAgICAgIFxuICAgICAgICB0MiA9IG5ldyBUSFJFRS5Ub3J1c0dlb21ldHJ5IDAuNS10b3J1c1JhZGl1cywgdG9ydXNSYWRpdXMsIDE2LCAzMlxuICAgICAgICB0MyA9IG5ldyBUSFJFRS5Ub3J1c0dlb21ldHJ5IDAuNS10b3J1c1JhZGl1cywgdG9ydXNSYWRpdXMsIDE2LCAzMlxuICAgICAgICB0Mi5yb3RhdGVZIFZlY3Rvci5ERUcyUkFEIDkwIFxuICAgICAgICB0My5yb3RhdGVYIFZlY3Rvci5ERUcyUkFEIDkwIFxuICAgICAgICB0Mi5tZXJnZSB0M1xuICAgICAgICBAdG9ycyA9IG5ldyBUSFJFRS5NZXNoIHQyLCBNYXRlcmlhbC5nYXRlXG4gICAgICAgIEB0b3JzLmNhc3RTaGFkb3cgPSB0cnVlXG4gICAgICAgIEB0b3JzLnJlY2VpdmVTaGFkb3cgPSB0cnVlXG4gICAgICAgIEBtZXNoLmFkZCBAdG9yc1xuICAgICAgICBAbWVzaC5jYXN0U2hhZG93ID0gdHJ1ZVxuICAgICAgICBAbWVzaC5yZWNlaXZlU2hhZG93ID0gdHJ1ZVxuICAgICAgICBAbWVzaFxuICAgIFxuICAgIGJ1bGxldEltcGFjdDogLT5cblxuICAgIG5ld0NlbGxNYXRlOiAob2JqZWN0KSAtPlxuICAgICAgICBpZiBvYmplY3QubmFtZSA9PSAncGxheWVyJyBhbmQgQGFjdGl2ZVxuICAgICAgICAgICAgd29ybGQucGxheVNvdW5kICdHQVRFX1dBUlAnXG4gICAgICAgICAgICAjIGtsb2cgJ2dhdGUgdHJpZ2dlciBlbnRlciBldmVudCcsIEBldmVudHNbQEVOVEVSX0VWRU5UXS5hY3Rpb25zLmxlbmd0aFxuICAgICAgICAgICAgQGV2ZW50c1tARU5URVJfRVZFTlRdLnRyaWdnZXJBY3Rpb25zKCkgXG4gICAgICAgICAgICBAYWN0aXZlID0gZmFsc2VcbiAgICAgICAgICAgICAgICBcbm1vZHVsZS5leHBvcnRzID0gR2F0ZVxuIl19
//# sourceURL=../coffee/gate.coffee