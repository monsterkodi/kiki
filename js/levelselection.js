// koffee 1.4.0

/*
000      00000000  000   000  00000000  000       0000000  00000000  000      
000      000       000   000  000       000      000       000       000      
000      0000000    000 000   0000000   000      0000000   0000000   000      
000      000          000     000       000           000  000       000      
0000000  00000000      0      00000000  0000000  0000000   00000000  0000000
 */
var LevelSelName, LevelSelection, clamp, elem, prefs, ref,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), prefs = ref.prefs, clamp = ref.clamp, elem = ref.elem;

LevelSelName = require('./levelselname');

LevelSelection = (function() {
    function LevelSelection(gameWorld) {
        var World, ref1, view;
        this.gameWorld = gameWorld;
        this.resized = bind(this.resized, this);
        this.modKeyComboEvent = bind(this.modKeyComboEvent, this);
        World = require('./world');
        this.levels = World.levels.list;
        this.index = (((ref1 = this.gameWorld.level_index) != null ? ref1 : 0) + 1) % this.levels.length;
        this.gameWorld.menu.del();
        view = elem({
            "class": 'preview'
        });
        view.style.position = 'absolute';
        view.style.left = '0';
        view.style.right = '0';
        view.style.top = '0';
        view.style.bottom = '0';
        this.gameWorld.view.appendChild(view);
        this.world = new World(view, true);
        this.world.create(this.levels[this.index]);
        this.addName();
        this.resized(this.gameWorld.screenSize.w, this.gameWorld.screenSize.h);
    }

    LevelSelection.prototype.addName = function() {
        this.world.text = new LevelSelName(this.levels[this.index]);
        this.world.text.addText("");
        return this.world.text.addText("" + (prefs.get("solvedâ–¸" + this.levels[this.index], false) && 'solved' || this.index + 1), 0.8);
    };

    LevelSelection.prototype.navigate = function(action) {
        var oldIndex;
        oldIndex = this.index;
        switch (action) {
            case 'right':
            case 'down':
                this.index += 1;
                break;
            case 'left':
            case 'up':
                this.index -= 1;
                break;
            case 'page up':
                this.index -= 10;
                break;
            case 'page down':
                this.index += 10;
                break;
            case 'home':
                this.index = 0;
                break;
            case 'end':
                this.index = this.levels.length - 1;
        }
        this.index = clamp(0, this.levels.length - 1, this.index);
        if (oldIndex !== this.index) {
            this.world.playSound('MENU_ITEM');
            this.world.create(this.levels[this.index]);
            this.addName();
            return this.resized(this.gameWorld.screenSize.w, this.gameWorld.screenSize.h);
        }
    };

    LevelSelection.prototype.del = function() {
        delete this.gameWorld.levelSelection;
        return this.world.del();
    };

    LevelSelection.prototype.load = function() {
        this.world.playSound('MENU_SELECT');
        global.world = this.gameWorld;
        this.gameWorld.create(this.levels[this.index], false);
        return this.del();
    };

    LevelSelection.prototype.close = function() {
        var ref1;
        this.world.playSound('MENU_ABORT');
        global.world = this.gameWorld;
        this.del();
        return this.gameWorld.applyScheme((ref1 = this.gameWorld.dict.scheme) != null ? ref1 : 'default');
    };

    LevelSelection.prototype.modKeyComboEvent = function(mod, key, combo, event) {
        switch (combo) {
            case 'esc':
                return this.close();
            case 'enter':
            case 'space':
                return this.load();
            case 'left':
            case 'right':
            case 'up':
            case 'down':
            case 'page up':
            case 'page down':
            case 'home':
            case 'end':
                return this.navigate(combo);
        }
    };

    LevelSelection.prototype.resized = function(w, h) {
        return this.world.resized(w, h);
    };

    LevelSelection.prototype.step = function() {
        return this.world.step();
    };

    return LevelSelection;

})();

module.exports = LevelSelection;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/levelselection.coffee