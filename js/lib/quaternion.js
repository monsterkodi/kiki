// koffee 1.4.0
var Quaternion, Vector;

Vector = require('./vector');

Quaternion = (function() {
    function Quaternion(w, x, y, z) {
        if (w == null) {
            w = 1;
        }
        if (x == null) {
            x = 0;
        }
        if (y == null) {
            y = 0;
        }
        if (z == null) {
            z = 0;
        }
        if (w instanceof Vector) {
            this.x = w.x;
            this.y = w.y;
            this.z = w.z;
            this.w = 0;
        } else if (w instanceof Quaternion) {
            this.x = w.x;
            this.y = w.y;
            this.z = w.z;
            this.w = w.w;
        } else if (Array.isArray(w)) {
            this.w = w[0];
            this.x = w[1];
            this.y = w[2];
            this.z = w[3];
        } else {
            this.x = x;
            this.y = y;
            this.z = z;
            this.w = w;
        }
        if (Number.isNaN(this.x)) {
            throw new Error;
        }
    }

    Quaternion.prototype.copy = function() {
        return new Quaternion(this);
    };

    Quaternion.prototype.clone = function(q) {
        this.x = q.x;
        this.y = q.y;
        this.z = q.z;
        this.w = q.w;
        return this;
    };

    Quaternion.prototype.rounded = function() {
        var back, backDiff, i, l, len, minDist, minQuat, q, ref, up, upDiff;
        minDist = 1000;
        minQuat = null;
        up = this.rotate(Vector.unitY);
        back = this.rotate(Vector.unitZ);
        ref = [Quaternion.XupY, Quaternion.XupZ, Quaternion.XdownY, Quaternion.XdownZ, Quaternion.YupX, Quaternion.YupZ, Quaternion.YdownX, Quaternion.YdownZ, Quaternion.ZupX, Quaternion.ZupY, Quaternion.ZdownX, Quaternion.ZdownY, Quaternion.minusXupY, Quaternion.minusXupZ, Quaternion.minusXdownY, Quaternion.minusXdownZ, Quaternion.minusYupX, Quaternion.minusYupZ, Quaternion.minusYdownX, Quaternion.minusYdownZ, Quaternion.minusZupX, Quaternion.minusZupY, Quaternion.minusZdownX, Quaternion.minusZdownY];
        for (i = 0, len = ref.length; i < len; i++) {
            q = ref[i];
            upDiff = 1 - up.dot(q.rotate(Vector.unitY));
            backDiff = 1 - back.dot(q.rotate(Vector.unitZ));
            l = upDiff + backDiff;
            if (l < minDist) {
                minDist = l;
                minQuat = q;
                if (l < 0.0001) {
                    break;
                }
            }
        }
        return minQuat;
    };

    Quaternion.prototype.round = function() {
        return this.clone(this.normalize().rounded());
    };

    Quaternion.prototype.euler = function() {
        return [Vector.RAD2DEG(Math.atan2(2 * (this.w * this.x + this.y * this.z), 1 - 2 * (this.x * this.x + this.y * this.y))), Vector.RAD2DEG(Math.asin(2 * (this.w * this.y - this.z * this.x))), Vector.RAD2DEG(Math.atan2(2 * (this.w * this.z + this.x * this.y), 1 - 2 * (this.y * this.y + this.z * this.z)))];
    };

    Quaternion.prototype.add = function(quat) {
        this.w += quat.w;
        this.x += quat.x;
        this.y += quat.y;
        this.z += quat.z;
        return this;
    };

    Quaternion.prototype.sub = function(quat) {
        this.w -= quat.w;
        this.x -= quat.x;
        this.y -= quat.y;
        this.z -= quat.z;
        return this;
    };

    Quaternion.prototype.minus = function(quat) {
        return this.copy().sub(quat);
    };

    Quaternion.prototype.dot = function(q) {
        return this.x * q.x + this.y * q.y + this.z * q.z + this.w * q.w;
    };

    Quaternion.prototype.rotate = function(v) {
        var qv, rq;
        qv = new Quaternion(v);
        rq = this.mul(qv.mul(this.getConjugate()));
        return new Vector(rq.x, rq.y, rq.z);
    };

    Quaternion.prototype.normalize = function() {
        var l;
        l = Math.sqrt(this.w * this.w + this.x * this.x + this.y * this.y + this.z * this.z);
        if (l !== 0.0) {
            this.w /= l;
            this.x /= l;
            this.y /= l;
            this.z /= l;
        }
        return this;
    };

    Quaternion.prototype.invert = function() {
        var l;
        l = Math.sqrt(this.w * this.w + this.x * this.x + this.y * this.y + this.z * this.z);
        if (l !== 0.0) {
            this.w /= l;
            this.x = -this.x / l;
            this.y = -this.y / l;
            this.z = -this.z / l;
        }
        return this;
    };

    Quaternion.prototype.isZero = function() {
        var ref, ref1;
        return ((this.x === (ref1 = this.y) && ref1 === (ref = this.z)) && ref === 0) && this.w === 1;
    };

    Quaternion.prototype.reset = function() {
        this.x = this.y = this.z = 0;
        this.w = 1;
        return this;
    };

    Quaternion.prototype.conjugate = function() {
        this.x = -this.x;
        this.y = -this.y;
        this.z = -this.z;
        return this;
    };

    Quaternion.prototype.getNormal = function() {
        return this.copy().normalize();
    };

    Quaternion.prototype.getConjugate = function() {
        return this.copy().conjugate();
    };

    Quaternion.prototype.getInverse = function() {
        return this.copy().invert();
    };

    Quaternion.prototype.neg = function() {
        return new Quaternion(-this.w, -this.x, -this.y, -this.z);
    };

    Quaternion.prototype.vector = function() {
        return new Vector(this.x, this.y, this.z);
    };

    Quaternion.prototype.length = function() {
        return Math.sqrt(this.w * this.w + this.x * this.x + this.y * this.y + this.z * this.z);
    };

    Quaternion.prototype.eql = function(q) {
        return this.w === q.w && (this.x = q.x && this.y === q.y && this.z === q.z);
    };

    Quaternion.prototype.mul = function(quatOrScalar) {
        var A, B, C, D, E, F, G, H, quat;
        if (quatOrScalar instanceof Quaternion) {
            quat = quatOrScalar;
            A = (this.w + this.x) * (quat.w + quat.x);
            B = (this.z - this.y) * (quat.y - quat.z);
            C = (this.w - this.x) * (quat.y + quat.z);
            D = (this.y + this.z) * (quat.w - quat.x);
            E = (this.x + this.z) * (quat.x + quat.y);
            F = (this.x - this.z) * (quat.x - quat.y);
            G = (this.w + this.y) * (quat.w - quat.z);
            H = (this.w - this.y) * (quat.w + quat.z);
            return new Quaternion(B + (-E - F + G + H) / 2, A - (E + F + G + H) / 2, C + (E - F + G - H) / 2, D + (E - F - G + H) / 2);
        } else {
            return new Quaternion(this.w * f, this.x * f, this.y * f, z * f);
        }
    };

    Quaternion.prototype.slerp = function(quat, t) {
        var cosom, omega, scale0, scale1, sinom, to1;
        to1 = [0, 0, 0, 0];
        cosom = this.x * quat.x + this.y * quat.y + this.z * quat.z + this.w * quat.w;
        if (cosom < 0) {
            cosom = -cosom;
            to1[0] = -quat.x;
            to1[1] = -quat.y;
            to1[2] = -quat.z;
            to1[3] = -quat.w;
        } else {
            to1[0] = quat.x;
            to1[1] = quat.y;
            to1[2] = quat.z;
            to1[3] = quat.w;
        }
        if ((1.0 - cosom) > 0.001) {
            omega = Math.acos(cosom);
            sinom = Math.sin(omega);
            scale0 = Math.sin((1.0 - t) * omega) / sinom;
            scale1 = Math.sin(t * omega) / sinom;
        } else {
            scale0 = 1.0 - t;
            scale1 = t;
        }
        return new Quaternion(scale0 * this.w + scale1 * to1[3], scale0 * this.x + scale1 * to1[0], scale0 * this.y + scale1 * to1[1], scale0 * this.z + scale1 * to1[2]);
    };

    Quaternion.rotationAroundVector = function(theta, x, y, z) {
        var s, t, v;
        v = new Vector(x, y, z);
        v.normalize();
        t = Vector.DEG2RAD(theta) / 2.0;
        s = Math.sin(t);
        return (new Quaternion(Math.cos(t), v.x * s, v.y * s, v.z * s)).normalize();
    };

    Quaternion.rotationFromEuler = function(x, y, z) {
        var q;
        x = Vector.DEG2RAD(x);
        y = Vector.DEG2RAD(y);
        z = Vector.DEG2RAD(z);
        q = new Quaternion(Math.cos(x / 2) * Math.cos(y / 2) * Math.cos(z / 2) + Math.sin(x / 2) * Math.sin(y / 2) * Math.sin(z / 2), Math.sin(x / 2) * Math.cos(y / 2) * Math.cos(z / 2) - Math.cos(x / 2) * Math.sin(y / 2) * Math.sin(z / 2), Math.cos(x / 2) * Math.sin(y / 2) * Math.cos(z / 2) + Math.sin(x / 2) * Math.cos(y / 2) * Math.sin(z / 2), Math.cos(x / 2) * Math.cos(y / 2) * Math.sin(z / 2) - Math.sin(x / 2) * Math.sin(y / 2) * Math.cos(z / 2));
        return q.normalize();
    };

    Quaternion.rot_0 = new Quaternion();

    Quaternion.rot_90_X = Quaternion.rotationAroundVector(90, Vector.unitX);

    Quaternion.rot_90_Y = Quaternion.rotationAroundVector(90, Vector.unitY);

    Quaternion.rot_90_Z = Quaternion.rotationAroundVector(90, Vector.unitZ);

    Quaternion.rot_180_X = Quaternion.rotationAroundVector(180, Vector.unitX);

    Quaternion.rot_180_Y = Quaternion.rotationAroundVector(180, Vector.unitY);

    Quaternion.rot_180_Z = Quaternion.rotationAroundVector(180, Vector.unitZ);

    Quaternion.rot_270_X = Quaternion.rotationAroundVector(270, Vector.unitX);

    Quaternion.rot_270_Y = Quaternion.rotationAroundVector(270, Vector.unitY);

    Quaternion.rot_270_Z = Quaternion.rotationAroundVector(270, Vector.unitZ);

    Quaternion.XupY = Quaternion.rot_270_Y;

    Quaternion.XupZ = Quaternion.rot_90_X.mul(Quaternion.rot_270_Y);

    Quaternion.XdownY = Quaternion.rot_180_X.mul(Quaternion.rot_270_Y);

    Quaternion.XdownZ = Quaternion.rot_270_X.mul(Quaternion.rot_270_Y);

    Quaternion.YupX = Quaternion.rot_90_Y.mul(Quaternion.rot_90_X);

    Quaternion.YupZ = Quaternion.rot_90_X;

    Quaternion.YdownX = Quaternion.rot_270_Y.mul(Quaternion.rot_90_X);

    Quaternion.YdownZ = Quaternion.rot_180_Y.mul(Quaternion.rot_90_X);

    Quaternion.ZupX = Quaternion.rot_90_Z.mul(Quaternion.rot_180_X);

    Quaternion.ZupY = Quaternion.rot_180_Z.mul(Quaternion.rot_180_X);

    Quaternion.ZdownX = Quaternion.rot_270_Z.mul(Quaternion.rot_180_X);

    Quaternion.ZdownY = Quaternion.rot_180_X;

    Quaternion.minusXupY = Quaternion.rot_90_Y;

    Quaternion.minusXupZ = Quaternion.rot_90_X.mul(Quaternion.rot_90_Y);

    Quaternion.minusXdownY = Quaternion.rot_180_X.mul(Quaternion.rot_90_Y);

    Quaternion.minusXdownZ = Quaternion.rot_270_X.mul(Quaternion.rot_90_Y);

    Quaternion.minusYupX = Quaternion.rot_270_Y.mul(Quaternion.rot_270_X);

    Quaternion.minusYupZ = Quaternion.rot_180_Y.mul(Quaternion.rot_270_X);

    Quaternion.minusYdownX = Quaternion.rot_90_Y.mul(Quaternion.rot_270_X);

    Quaternion.minusYdownZ = Quaternion.rot_270_X;

    Quaternion.minusZupX = Quaternion.rot_270_Z;

    Quaternion.minusZupY = Quaternion.rot_0;

    Quaternion.minusZdownX = Quaternion.rot_90_Z;

    Quaternion.minusZdownY = Quaternion.rot_180_Z;

    Quaternion.rot_0.name = 'rot_0';

    Quaternion.rot_90_X.name = 'rot_90_X';

    Quaternion.rot_90_Y.name = 'rot_90_Y';

    Quaternion.rot_90_Z.name = 'rot_90_Z';

    Quaternion.rot_180_X.name = 'rot_180_X';

    Quaternion.rot_180_Y.name = 'rot_180_Y';

    Quaternion.rot_180_Z.name = 'rot_180_Z';

    Quaternion.rot_270_X.name = 'rot_270_X';

    Quaternion.rot_270_Y.name = 'rot_270_Y';

    Quaternion.rot_270_Z.name = 'rot_270_Z';

    Quaternion.XupY.name = 'XupY';

    Quaternion.XupZ.name = 'XupZ';

    Quaternion.XdownY.name = 'XdownY';

    Quaternion.XdownZ.name = 'XdownZ';

    Quaternion.YupX.name = 'YupX';

    Quaternion.YupZ.name = 'YupZ';

    Quaternion.YdownX.name = 'YdownX';

    Quaternion.YdownZ.name = 'YdownZ';

    Quaternion.ZupX.name = 'ZupX';

    Quaternion.ZupY.name = 'ZupY';

    Quaternion.ZdownX.name = 'ZdownX';

    Quaternion.ZdownY.name = 'ZdownY';

    Quaternion.minusXupY.name = 'minusXupY';

    Quaternion.minusXupZ.name = 'minusXupZ';

    Quaternion.minusXdownY.name = 'minusXdownY';

    Quaternion.minusXdownZ.name = 'minusXdownZ';

    Quaternion.minusYupX.name = 'minusYupX';

    Quaternion.minusYupZ.name = 'minusYupZ';

    Quaternion.minusYdownX.name = 'minusYdownX';

    Quaternion.minusYdownZ.name = 'minusYdownZ';

    Quaternion.minusZupX.name = 'minusZupX';

    Quaternion.minusZupY.name = 'minusZupY';

    Quaternion.minusZdownX.name = 'minusZdownX';

    Quaternion.minusZdownY.name = 'minusZdownY';

    return Quaternion;

})();

module.exports = Quaternion;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/lib/quaternion.coffee