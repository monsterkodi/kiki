// koffee 1.4.0
var Vector, log;

log = require('../tools/log');

Vector = (function() {
    function Vector(x, y, z, w) {
        var ref, ref1;
        if (x == null) {
            x = 0;
        }
        if (y == null) {
            y = 0;
        }
        if (z == null) {
            z = 0;
        }
        if (w == null) {
            w = 0;
        }
        if ((x.x != null) && (x.y != null)) {
            this.copy(x);
        } else if (Array.isArray(x)) {
            this.x = x[0];
            this.y = x[1];
            this.z = (ref = x[2]) != null ? ref : 0;
            this.w = (ref1 = x[3]) != null ? ref1 : 0;
        } else {
            this.x = x;
            this.y = y;
            this.z = z != null ? z : 0;
            this.w = w != null ? w : 0;
        }
        if (Number.isNaN(this.x || Number.isNaN(this.w))) {
            throw new Error;
        }
    }

    Vector.prototype.clone = function() {
        return new Vector(this);
    };

    Vector.prototype.copy = function(v) {
        var ref, ref1;
        this.x = v.x;
        this.y = v.y;
        this.z = (ref = v.z) != null ? ref : 0;
        this.w = (ref1 = v.w) != null ? ref1 : 0;
        return this;
    };

    Vector.prototype.normal = function() {
        return new Vector(this).normalize();
    };

    Vector.prototype.parallel = function(n) {
        var dot;
        dot = this.x * n.x + this.y * n.y + this.z * n.z;
        return new Vector(dot * n.x, dot * n.y, dot * n.z);
    };

    Vector.prototype.perpendicular = function(n) {
        var dot;
        dot = this.x * n.x + this.y * n.y + this.z * n.z;
        return new Vector(this.x - dot * n.x, this.y - dot * n.y, this.z - dot * n.z);
    };

    Vector.prototype.reflect = function(n) {
        var dot;
        dot = 2 * (this.x * n.x + this.y * n.y + this.z * n.z);
        return new Vector(this.x - dot * n.x, this.y - dot * n.y, this.z - dot * n.z);
    };

    Vector.prototype.cross = function(v) {
        return new Vector(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x);
    };

    Vector.prototype.normalize = function() {
        var l;
        l = this.length();
        if (l) {
            l = 1.0 / l;
            this.x *= l;
            this.y *= l;
            this.z *= l;
            this.w *= l;
        }
        return this;
    };

    Vector.prototype.xyperp = function() {
        return new Vector(-this.y, this.x);
    };

    Vector.prototype.round = function() {
        return new Vector(Math.round(this.x), Math.round(this.y), Math.round(this.z), this.w);
    };

    Vector.prototype.xyangle = function(v) {
        var otherXY, thisXY;
        thisXY = new Vector(this.x, this.y).normal();
        otherXY = new Vector(v.x, v.y).normal();
        if (thisXY.xyperp().dot(otherXY >= 0)) {
            return Vector.RAD2DEG(Math.acos(thisXY.dot(otherXY)));
        }
        return -Vector.RAD2DEG(Math.acos(thisXY.dot(otherXY)));
    };

    Vector.prototype.length = function() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
    };

    Vector.prototype.angle = function(v) {
        return Vector.RAD2DEG(Math.acos(this.normal().dot(v.normal())));
    };

    Vector.prototype.dot = function(v) {
        var ref;
        return this.x * v.x + this.y * v.y + this.z * v.z + this.w * ((ref = v.w) != null ? ref : 0);
    };

    Vector.prototype.mul = function(f) {
        return new Vector(this.x * f, this.y * f, this.z * f, this.w * f);
    };

    Vector.prototype.div = function(d) {
        return new Vector(this.x / d, this.y / d, this.z / d, this.w / d);
    };

    Vector.prototype.plus = function(v) {
        return new Vector(v).add(this);
    };

    Vector.prototype.minus = function(v) {
        return new Vector(v).neg().add(this);
    };

    Vector.prototype.neg = function() {
        return new Vector(-this.x, -this.y, -this.z, -this.w);
    };

    Vector.prototype.add = function(v) {
        var ref, ref1;
        this.x += v.x;
        this.y += v.y;
        this.z += (ref = v.z) != null ? ref : 0;
        this.w += (ref1 = v.w) != null ? ref1 : 0;
        return this;
    };

    Vector.prototype.sub = function(v) {
        var ref, ref1;
        this.x -= v.x;
        this.y -= v.y;
        this.z -= (ref = v.z) != null ? ref : 0;
        this.w -= (ref1 = v.w) != null ? ref1 : 0;
        return this;
    };

    Vector.prototype.scale = function(f) {
        this.x *= f;
        this.y *= f;
        this.z *= f;
        this.w *= f;
        return this;
    };

    Vector.prototype.reset = function() {
        this.x = this.y = this.z = this.w = 0;
        return this;
    };

    Vector.prototype.isZero = function() {
        var ref, ref1, ref2;
        return (((this.x === (ref2 = this.y) && ref2 === (ref1 = this.z)) && ref1 === (ref = this.w)) && ref === 0);
    };

    Vector.rayPlaneIntersection = function(rayPos, rayDirection, planePos, planeNormal) {
        var x;
        x = planePos.minus(rayPos).dot(planeNormal) / rayDirection.dot(planeNormal);
        return rayPos.plus(rayDirection.mul(x));
    };

    Vector.pointMappedToPlane = function(point, planePos, planeNormal) {
        return point.minus(planeNormal).dot(point.minus(planePos).dot(planeNormal));
    };

    Vector.rayPlaneIntersectionFactor = function(rayPos, rayDir, planePos, planeNormal) {
        var r, rayDot;
        rayDot = rayDir.dot(planeNormal);
        if (Number.isNaN(rayDot)) {
            throw new Error;
        }
        if (rayDot === 0) {
            return 2;
        }
        r = planePos.minus(rayPos).dot(planeNormal) / rayDot;
        if (Number.isNaN(r)) {
            console.log('rayPos', rayPos);
            console.log('rayDir', rayDir);
            console.log('planePos', planePos);
            console.log('planeNormal', planeNormal);
            throw new Error;
        }
        return r;
    };

    Vector.DEG2RAD = function(d) {
        return Math.PI * d / 180.0;
    };

    Vector.RAD2DEG = function(r) {
        return r * 180.0 / Math.PI;
    };

    Vector.unitX = new Vector(1, 0, 0);

    Vector.unitY = new Vector(0, 1, 0);

    Vector.unitZ = new Vector(0, 0, 1);

    Vector.minusX = new Vector(-1, 0, 0);

    Vector.minusY = new Vector(0, -1, 0);

    Vector.minusZ = new Vector(0, 0, -1);

    Vector.X = 0;

    Vector.Y = 1;

    Vector.Z = 2;

    Vector.W = 3;

    Vector.SX = 0;

    Vector.SY = 5;

    Vector.SZ = 10;

    Vector.TX = 12;

    Vector.TY = 13;

    Vector.TZ = 14;

    return Vector;

})();

module.exports = Vector;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVjdG9yLmpzIiwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBT0EsSUFBQTs7QUFBQSxHQUFBLEdBQU0sT0FBQSxDQUFRLGNBQVI7O0FBRUE7SUFFVyxnQkFBQyxDQUFELEVBQUssQ0FBTCxFQUFTLENBQVQsRUFBYSxDQUFiO0FBQ1QsWUFBQTs7WUFEVSxJQUFFOzs7WUFBRSxJQUFFOzs7WUFBRSxJQUFFOzs7WUFBRSxJQUFFOztRQUN4QixJQUFHLGFBQUEsSUFBUyxhQUFaO1lBQ0ksSUFBQyxDQUFBLElBQUQsQ0FBTSxDQUFOLEVBREo7U0FBQSxNQUVLLElBQUcsS0FBSyxDQUFDLE9BQU4sQ0FBYyxDQUFkLENBQUg7WUFDRCxJQUFDLENBQUEsQ0FBRCxHQUFLLENBQUUsQ0FBQSxDQUFBO1lBQ1AsSUFBQyxDQUFBLENBQUQsR0FBSyxDQUFFLENBQUEsQ0FBQTtZQUNQLElBQUMsQ0FBQSxDQUFELGdDQUFZO1lBQ1osSUFBQyxDQUFBLENBQUQsa0NBQVksRUFKWDtTQUFBLE1BQUE7WUFNRCxJQUFDLENBQUEsQ0FBRCxHQUFLO1lBQ0wsSUFBQyxDQUFBLENBQUQsR0FBSztZQUNMLElBQUMsQ0FBQSxDQUFELGVBQUssSUFBSTtZQUNULElBQUMsQ0FBQSxDQUFELGVBQUssSUFBSSxFQVRSOztRQVVMLElBQUcsTUFBTSxDQUFDLEtBQVAsQ0FBYSxJQUFDLENBQUEsQ0FBRCxJQUFNLE1BQU0sQ0FBQyxLQUFQLENBQWEsSUFBQyxDQUFBLENBQWQsQ0FBbkIsQ0FBSDtBQUNJLGtCQUFNLElBQUksTUFEZDs7SUFiUzs7cUJBZ0JiLEtBQUEsR0FBTyxTQUFBO2VBQUcsSUFBSSxNQUFKLENBQVcsSUFBWDtJQUFIOztxQkFDUCxJQUFBLEdBQU0sU0FBQyxDQUFEO0FBQ0YsWUFBQTtRQUFBLElBQUMsQ0FBQSxDQUFELEdBQUssQ0FBQyxDQUFDO1FBQ1AsSUFBQyxDQUFBLENBQUQsR0FBSyxDQUFDLENBQUM7UUFDUCxJQUFD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MDAwICAwMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAgXG4jICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDBcbiMgICAgMDAwIDAwMCAgIDAwMDAwMDAgICAwMDAgICAgICAgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMDAwMDAgIFxuIyAgICAgIDAwMCAgICAgMDAwICAgICAgIDAwMCAgICAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG4jICAgICAgIDAgICAgICAwMDAwMDAwMCAgIDAwMDAwMDAgICAgIDAwMCAgICAgIDAwMDAwMDAgICAwMDAgICAwMDBcblxubG9nID0gcmVxdWlyZSAnLi4vdG9vbHMvbG9nJ1xuXG5jbGFzcyBWZWN0b3JcblxuICAgIGNvbnN0cnVjdG9yOiAoeD0wLHk9MCx6PTAsdz0wKSAtPlxuICAgICAgICBpZiB4Lng/IGFuZCB4Lnk/XG4gICAgICAgICAgICBAY29weSB4XG4gICAgICAgIGVsc2UgaWYgQXJyYXkuaXNBcnJheSB4XG4gICAgICAgICAgICBAeCA9IHhbMF1cbiAgICAgICAgICAgIEB5ID0geFsxXVxuICAgICAgICAgICAgQHogPSB4WzJdID8gMFxuICAgICAgICAgICAgQHcgPSB4WzNdID8gMFxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBAeCA9IHhcbiAgICAgICAgICAgIEB5ID0geVxuICAgICAgICAgICAgQHogPSB6ID8gMFxuICAgICAgICAgICAgQHcgPSB3ID8gMFxuICAgICAgICBpZiBOdW1iZXIuaXNOYU4gQHggb3IgTnVtYmVyLmlzTmFOIEB3XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JcbiAgICAgICAgICAgIFxuICAgIGNsb25lOiAtPiBuZXcgVmVjdG9yIEBcbiAgICBjb3B5OiAodikgLT4gXG4gICAgICAgIEB4ID0gdi54XG4gICAgICAgIEB5ID0gdi55IFxuICAgICAgICBAeiA9IHYueiA/IDBcbiAgICAgICAgQHcgPSB2LncgPyAwXG4gICAgICAgIEBcblxuICAgIG5vcm1hbDogLT4gbmV3IFZlY3RvcihAKS5ub3JtYWxpemUoKVxuICAgIFxuICAgIHBhcmFsbGVsOiAobikgLT5cbiAgICAgICAgZG90ID0gQHgqbi54ICsgQHkqbi55ICsgQHoqbi56XG4gICAgICAgIG5ldyBWZWN0b3IgZG90Km4ueCwgZG90Km4ueSwgZG90Km4uelxuXG4gICAgIyByZXR1cm5zIHRoZSBwcm9qZWN0aW9uIG9mIG5vcm1hbGl6ZWQgdmVjdG9yIG4gdG8gdmVjdG9yIHRoYXQgaXMgcGVycGVuZGljdWxhciB0byB0aGlzXG4gICAgcGVycGVuZGljdWxhcjogKG4pIC0+XG4gICAgICAgIGRvdCA9IEB4Km4ueCArIEB5Km4ueSArIEB6Km4uelxuICAgICAgICBuZXcgVmVjdG9yIEB4LWRvdCpuLngsIEB5LWRvdCpuLnksIEB6LWRvdCpuLnogXG5cbiAgICByZWZsZWN0OiAobikgLT5cbiAgICAgICAgZG90ID0gMiooQHgqbi54ICsgQHkqbi55ICsgQHoqbi56KVxuICAgICAgICBuZXcgVmVjdG9yIEB4LWRvdCpuLngsIEB5LWRvdCpuLnksIEB6LWRvdCpuLnpcblxuICAgIGNyb3NzOiAodikgLT4gbmV3IFZlY3RvciBAeSp2LnotQHoqdi55LCBAeip2LngtQHgqdi56LCBAeCp2LnktQHkqdi54XG4gICAgbm9ybWFsaXplOiAtPlxuICAgICAgICBsID0gQGxlbmd0aCgpXG4gICAgICAgIGlmIGxcbiAgICAgICAgICAgIGwgPSAxLjAvbFxuICAgICAgICAgICAgQHggKj0gbFxuICAgICAgICAgICAgQHkgKj0gbFxuICAgICAgICAgICAgQHogKj0gbFxuICAgICAgICAgICAgQHcgKj0gbFxuICAgICAgICBAICAgIFxuXG4gICAgeHlwZXJwOiAtPiBuZXcgVmVjdG9yIC1AeSwgQHhcbiAgICByb3VuZDogIC0+IG5ldyBWZWN0b3IgTWF0aC5yb3VuZChAeCksIE1hdGgucm91bmQoQHkpLCBNYXRoLnJvdW5kKEB6KSwgQHdcblxuICAgIHh5YW5nbGU6ICh2KSAtPlxuICAgICAgICB0aGlzWFkgID0gbmV3IFZlY3RvcihAeCwgQHkpLm5vcm1hbCgpXG4gICAgICAgIG90aGVyWFkgPSBuZXcgVmVjdG9yKHYueCwgdi55KS5ub3JtYWwoKVxuICAgICAgICBpZiB0aGlzWFkueHlwZXJwKCkuZG90IG90aGVyWFkgPj0gMCBcbiAgICAgICAgICAgIHJldHVybiBWZWN0b3IuUkFEMkRFRyhNYXRoLmFjb3ModGhpc1hZLmRvdCBvdGhlclhZKSlcbiAgICAgICAgLVZlY3Rvci5SQUQyREVHKE1hdGguYWNvcyh0aGlzWFkuZG90IG90aGVyWFkpKVxuXG4gICAgbGVuZ3RoOiAgICAtPiBNYXRoLnNxcnQgQHgqQHgrQHkqQHkrQHoqQHorQHcqQHdcbiAgICBhbmdsZTogKHYpIC0+IFZlY3Rvci5SQUQyREVHIE1hdGguYWNvcyBAbm9ybWFsKCkuZG90IHYubm9ybWFsKClcbiAgICBkb3Q6ICAgKHYpIC0+IEB4KnYueCArIEB5KnYueSArIEB6KnYueiArIEB3Kih2LncgPyAwKVxuICAgIFxuICAgIG11bDogICAoZikgLT4gbmV3IFZlY3RvciBAeCpmLCBAeSpmLCBAeipmLCBAdypmXG4gICAgZGl2OiAgIChkKSAtPiBuZXcgVmVjdG9yIEB4L2QsIEB5L2QsIEB6L2QsIEB3L2RcbiAgICBwbHVzOiAgKHYpIC0+IG5ldyBWZWN0b3IodikuYWRkIEBcbiAgICBtaW51czogKHYpIC0+IG5ldyBWZWN0b3IodikubmVnKCkuYWRkIEBcbiAgICBuZWc6ICAgICAgIC0+IG5ldyBWZWN0b3IgLUB4LCAtQHksIC1AeiwgLUB3XG4gICAgIFxuICAgIGFkZDogKHYpIC0+XG4gICAgICAgIEB4ICs9IHYueCBcbiAgICAgICAgQHkgKz0gdi55IFxuICAgICAgICBAeiArPSB2LnogPyAwXG4gICAgICAgIEB3ICs9IHYudyA/IDBcbiAgICAgICAgQFxuICAgIFxuICAgIHN1YjogKHYpIC0+XG4gICAgICAgIEB4IC09IHYueCBcbiAgICAgICAgQHkgLT0gdi55IFxuICAgICAgICBAeiAtPSB2LnogPyAwXG4gICAgICAgIEB3IC09IHYudyA/IDBcbiAgICAgICAgQFxuICAgIFxuICAgIHNjYWxlOiAoZikgLT5cbiAgICAgICAgQHggKj0gZlxuICAgICAgICBAeSAqPSBmXG4gICAgICAgIEB6ICo9IGZcbiAgICAgICAgQHcgKj0gZlxuICAgICAgICBAXG4gICAgICAgIFxuICAgIHJlc2V0OiAtPlxuICAgICAgICBAeCA9IEB5ID0gQHogPSBAdyA9IDBcbiAgICAgICAgQFxuICAgIFxuICAgIGlzWmVybzogLT4gQHggPT0gQHkgPT0gQHogPT0gQHcgPT0gMFxuXG4gICAgQHJheVBsYW5lSW50ZXJzZWN0aW9uOiAocmF5UG9zLCByYXlEaXJlY3Rpb24sIHBsYW5lUG9zLCBwbGFuZU5vcm1hbCkgLT5cbiAgICAgICAgeCA9IHBsYW5lUG9zLm1pbnVzKHJheVBvcykuZG90KHBsYW5lTm9ybWFsKSAvIHJheURpcmVjdGlvbi5kb3QocGxhbmVOb3JtYWwpXG4gICAgICAgIHJldHVybiByYXlQb3MucGx1cyByYXlEaXJlY3Rpb24ubXVsIHhcblxuICAgIEBwb2ludE1hcHBlZFRvUGxhbmU6IChwb2ludCwgcGxhbmVQb3MsIHBsYW5lTm9ybWFsKSAtPlxuICAgICAgICBwb2ludC5taW51cyhwbGFuZU5vcm1hbCkuZG90IHBvaW50Lm1pbnVzKHBsYW5lUG9zKS5kb3QocGxhbmVOb3JtYWwpXG5cbiAgICBAcmF5UGxhbmVJbnRlcnNlY3Rpb25GYWN0b3I6IChyYXlQb3MsIHJheURpciwgcGxhbmVQb3MsIHBsYW5lTm9ybWFsKSAtPlxuICAgICAgICByYXlEb3QgPSByYXlEaXIuZG90IHBsYW5lTm9ybWFsXG4gICAgICAgIGlmIE51bWJlci5pc05hTiByYXlEb3RcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvclxuICAgICAgICByZXR1cm4gMiBpZiByYXlEb3QgPT0gMFxuICAgICAgICByID0gcGxhbmVQb3MubWludXMocmF5UG9zKS5kb3QocGxhbmVOb3JtYWwpIC8gcmF5RG90XG4gICAgICAgIGlmIE51bWJlci5pc05hTiByXG4gICAgICAgICAgICBsb2cgJ3JheVBvcycsIHJheVBvc1xuICAgICAgICAgICAgbG9nICdyYXlEaXInLCByYXlEaXJcbiAgICAgICAgICAgIGxvZyAncGxhbmVQb3MnLCBwbGFuZVBvc1xuICAgICAgICAgICAgbG9nICdwbGFuZU5vcm1hbCcsIHBsYW5lTm9ybWFsXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JcbiAgICAgICAgclxuXG4gICAgQERFRzJSQUQ6IChkKSAtPiBNYXRoLlBJKmQvMTgwLjBcbiAgICBAUkFEMkRFRzogKHIpIC0+IHIqMTgwLjAvTWF0aC5QSVxuICAgIFxuICAgIEB1bml0WCAgPSBuZXcgVmVjdG9yIDEsMCwwXG4gICAgQHVuaXRZICA9IG5ldyBWZWN0b3IgMCwxLDBcbiAgICBAdW5pdFogID0gbmV3IFZlY3RvciAwLDAsMVxuICAgIEBtaW51c1ggPSBuZXcgVmVjdG9yIC0xLDAsMFxuICAgIEBtaW51c1kgPSBuZXcgVmVjdG9yIDAsLTEsMFxuICAgIEBtaW51c1ogPSBuZXcgVmVjdG9yIDAsMCwtMVxuICAgIFxuICAgIEBYICA9IDBcbiAgICBAWSAgPSAxXG4gICAgQFogID0gMlxuICAgIEBXICA9IDNcbiAgICBAU1ggPSAwXG4gICAgQFNZID0gNVxuICAgIEBTWiA9IDEwXG4gICAgQFRYID0gMTJcbiAgICBAVFkgPSAxM1xuICAgIEBUWiA9IDE0XG5cbm1vZHVsZS5leHBvcnRzID0gVmVjdG9yIl19
//# sourceURL=../../coffee/lib/vector.coffee