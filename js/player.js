// koffee 1.4.0
var Action, Bot, Camera, Player, Quaternion, Timer, Vector, clamp,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

clamp = require('kxk').clamp;

Bot = require('./bot');

Action = require('./action');

Timer = require('./timer');

Vector = require('./lib/vector');

Camera = require('./camera');

Quaternion = require('./lib/quaternion');

Player = (function(superClass) {
    extend(Player, superClass);

    function Player() {
        Player.__super__.constructor.apply(this, arguments);
        this.name = 'player';
        this.key = {
            forward: 'w',
            backward: 's',
            left: 'a',
            right: 'd',
            lookUp: 'up',
            lookDown: 'down',
            shoot: 'enter',
            jump: 'space',
            view: 'c',
            push: 'shift'
        };
        this.camera = new Camera(this, {
            aspect: world.view.offsetWidth / world.view.offsetHeight
        });
        this.look_action = null;
        this.look_angle = 0.0;
        this.new_dir_sgn = 1.0;
        this.rotate = 0;
        this.recorder = null;
        this.playback = null;
        this.addAction(new Action(this, Action.LOOK_UP, "look up", 220));
        this.addAction(new Action(this, Action.LOOK_DOWN, "look down", 220));
        this.addAction(new Action(this, Action.LOOK_RESET, "look reset", 60));
        this.addEventWithName("landed");
    }

    Player.prototype.bulletHitSound = function() {
        return 'BULLET_HIT_PLAYER';
    };

    Player.prototype.initAction = function(action) {
        switch (action.id) {
            case Action.CLIMB_DOWN:
                world.playSound('BOT_CLIMB');
                break;
            case Action.FORWARD:
                world.playSound('BOT_MOVE');
                break;
            case Action.TURN_LEFT:
            case Action.TURN_RIGHT:
                world.playSound('BOT_TURN');
                break;
            case Action.JUMP:
                world.playSound('BOT_JUMP');
        }
        return Player.__super__.initAction.call(this, action);
    };

    Player.prototype.performAction = function(action) {
        var relTime;
        relTime = action.getRelativeTime();
        switch (action.id) {
            case Action.NOOP:
                break;
            case Action.LOOK_UP:
                return this.look_angle = relTime * 90.0;
            case Action.LOOK_DOWN:
                return this.look_angle = relTime * -90.0;
            case Action.LOOK_RESET:
                if (this.look_angle > 0) {
                    return this.look_angle = Math.min(this.look_angle, (1.0 - relTime) * 90.0);
                } else {
                    return this.look_angle = Math.max(this.look_angle, (1.0 - relTime) * -90.0);
                }
                break;
            default:
                return Player.__super__.performAction.call(this, action);
        }
    };

    Player.prototype.finishAction = function(action) {
        var ref;
        if (action.id === Action.LOOK_RESET) {
            this.look_action = null;
            return this.look_angle = 0.0;
        } else {
            if (action.id === ((ref = this.move_action) != null ? ref.id : void 0)) {
                this.dir_sgn = this.new_dir_sgn;
            }
            if (action.id !== Action.LOOK_UP && action.id !== Action.LOOK_DOWN) {
                Player.__super__.finishAction.call(this, action);
            }
            if (action.id === Action.TURN_LEFT || action.id === Action.TURN_RIGHT) {
                if (this.rotate) {
                    this.rotate_action = this.getActionWithId(this.rotate);
                    this.rotate_action.reset();
                    return Timer.addAction(this.rotate_action);
                }
            }
        }
    };

    Player.prototype.die = function() {};

    Player.prototype.modKeyComboEventDown = function(mod, key, combo, event) {
        var action, ref;
        switch (key) {
            case this.key.forward:
            case this.key.backward:
                this.push = mod === this.key.push;
                this.move = true;
                if (this.move_action == null) {
                    this.new_dir_sgn = this.dir_sgn = (key === this.key.backward) && -1 || 1;
                    this.moveBot();
                } else {
                    if (this.move_action.id === Action.JUMP && this.move_action.getRelativeTime() < 1) {
                        if (world.isUnoccupiedPos(this.position.plus(this.getUp()).plus(this.getDir())) && world.isUnoccupiedPos(this.position.plus(this.getDir()))) {
                            action = this.getActionWithId(Action.JUMP_FORWARD);
                            action.takeOver(this.move_action);
                            Timer.removeAction(this.move_action);
                            this.move_action = action;
                            Timer.addAction(this.move_action);
                        }
                    }
                    this.new_dir_sgn = (key === this.key.backward) && -1 || 1;
                }
                return true;
            case this.key.left:
            case this.key.right:
                this.rotate = (key === this.key.left) && Action.TURN_LEFT || Action.TURN_RIGHT;
                if (this.rotate_action == null) {
                    this.rotate_action = this.getActionWithId(this.rotate);
                    Timer.addAction(this.rotate_action);
                }
                return true;
            case this.key.jump:
                this.jump = true;
                this.jump_once = true;
                if (this.move_action == null) {
                    this.moveBot();
                    this.jump_once = false;
                } else {
                    if (this.move_action.id === Action.FORWARD && this.move_action.getRelativeTime() < 0.6 || this.move_action.id === Action.CLIMB_DOWN && this.move_action.getRelativeTime() < 0.4) {
                        if (world.isUnoccupiedPos(this.position.plus(this.getUp()))) {
                            if (world.isUnoccupiedPos(this.position.plus(this.getUp().plus(this.getDir())))) {
                                action = this.getActionWithId(Action.JUMP_FORWARD);
                            } else {
                                action = this.getActionWithId(Action.JUMP);
                            }
                            action.takeOver(this.move_action);
                            Timer.removeAction(this.move_action);
                            this.move_action = action;
                            this.jump_once = false;
                            Timer.addAction(this.move_action);
                        }
                    } else if ((ref = this.move_action.id) === Action.JUMP || ref === Action.JUMP_FORWARD) {
                        this.jump_once = false;
                    }
                }
                return true;
            case this.key.push:
                this.push = true;
                return true;
            case this.key.shoot:
                if (!this.shoot) {
                    this.shoot = true;
                    Timer.addAction(this.getActionWithId(Action.SHOOT));
                }
                return true;
            case this.key.lookUp:
            case this.key.lookDown:
                if (!this.look_action) {
                    this.look_action = this.getActionWithId((key === this.key.lookUp) && Action.LOOK_UP || Action.LOOK_DOWN);
                    this.look_action.reset();
                    Timer.addAction(this.look_action);
                }
                return true;
            case this.key.view:
                world.changeCameraMode();
                return true;
        }
        return false;
    };

    Player.prototype.modKeyComboEventUp = function(mod, key, combo, event) {
        if (this.key.push === 'shift') {
            this.push = false;
        }
        switch (key) {
            case this.key.shoot:
                Timer.removeAction(this.getActionWithId(Action.SHOOT));
                this.shoot = false;
                return true;
            case this.key.forward:
            case this.key.backward:
                this.move = false;
                return true;
            case this.key.jump:
                this.jump = false;
                return true;
            case this.key.left:
            case this.key.right:
                this.rotate = 0;
                return true;
            case this.key.push:
                this.push = false;
                return true;
            case this.key.lookDown:
            case this.key.lookUp:
                if (this.look_action && this.look_action.id !== Action.LOOK_RESET) {
                    Timer.removeAction(this.look_action);
                }
                this.look_action = this.getActionWithId(Action.LOOK_RESET);
                Timer.addAction(this.look_action);
                return true;
            case this.key.view:
                return true;
        }
        return false;
    };

    return Player;

})(Bot);

module.exports = Player;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/player.coffee