// koffee 1.4.0
var Action, Bot, Camera, Player, Timer, prefs, ref, valid,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

ref = require('kxk'), valid = ref.valid, prefs = ref.prefs;

Bot = require('./bot');

Action = require('./action');

Timer = require('./timer');

Camera = require('./camera');

Player = (function(superClass) {
    extend(Player, superClass);

    function Player() {
        var pkey;
        Player.__super__.constructor.apply(this, arguments);
        this.name = 'player';
        if (valid(pkey = prefs.get('keys', {}))) {
            this.key = pkey;
        } else {
            this.key = {
                forward: 'w',
                backward: 's',
                left: 'a',
                right: 'd',
                lookUp: 'e',
                lookDown: 'q',
                shoot: 'enter',
                jump: 'space',
                view: 'c',
                push: 'shift'
            };
            prefs.set('keys', this.key);
        }
        this.camera = new Camera(this, {
            aspect: world.view.offsetWidth / world.view.offsetHeight
        });
        this.look_action = null;
        this.look_angle = 0.0;
        this.new_dir_sgn = 1.0;
        this.rotate = 0;
        this.recorder = null;
        this.playback = null;
        this.addAction(new Action(this, Action.LOOK_UP, 'look up', 220));
        this.addAction(new Action(this, Action.LOOK_DOWN, 'look down', 220));
        this.addAction(new Action(this, Action.LOOK_RESET, 'look reset', 60));
        this.addEventWithName("landed");
    }

    Player.prototype.bulletHitSound = function() {
        return 'BULLET_HIT_PLAYER';
    };

    Player.prototype.initAction = function(action) {
        switch (action.id) {
            case Action.CLIMB_DOWN:
                world.playSound('BOT_CLIMB');
                break;
            case Action.FORWARD:
                world.playSound('BOT_MOVE');
                break;
            case Action.TURN_LEFT:
            case Action.TURN_RIGHT:
                world.playSound('BOT_TURN');
                break;
            case Action.JUMP:
                world.playSound('BOT_JUMP');
        }
        return Player.__super__.initAction.call(this, action);
    };

    Player.prototype.performAction = function(action) {
        var correct, relTime;
        relTime = action.getRelativeTime();
        switch (action.id) {
            case Action.NOOP:
                break;
            case Action.LOOK_UP:
                return this.look_angle = relTime * 90.0;
            case Action.LOOK_DOWN:
                return this.look_angle = relTime * -90.0;
            case Action.LOOK_RESET:
                if (this.look_angle > 0) {
                    return this.look_angle = Math.min(this.look_angle, (1.0 - relTime) * 90.0);
                } else {
                    return this.look_angle = Math.max(this.look_angle, (1.0 - relTime) * -90.0);
                }
                break;
            default:
                Player.__super__.performAction.call(this, action);
                if (this.takenOffset) {
                    correct = this.takenOrig.mul(action.getRelativeDelta());
                    if (this.takenOffset.length() < correct.length()) {
                        delete this.takenOffset;
                        return delete this.takenOrig;
                    } else {
                        return this.takenOffset.sub(correct);
                    }
                }
        }
    };

    Player.prototype.finishAction = function(action) {
        var ref1;
        if (action.id === Action.LOOK_RESET) {
            this.look_action = null;
            return this.look_angle = 0.0;
        } else {
            if (action.id === ((ref1 = this.move_action) != null ? ref1.id : void 0)) {
                this.dir_sgn = this.new_dir_sgn;
            }
            if (action.id !== Action.LOOK_UP && action.id !== Action.LOOK_DOWN) {
                Player.__super__.finishAction.call(this, action);
            }
            if (action.id === Action.TURN_LEFT || action.id === Action.TURN_RIGHT) {
                if (this.rotate) {
                    this.rotate_action = this.getActionWithId(this.rotate);
                    this.rotate_action.reset();
                    return Timer.addAction(this.rotate_action);
                }
            }
        }
    };

    Player.prototype.die = function() {};

    Player.prototype.modKeyComboEventDown = function(mod, key, combo, event) {
        var action, dir, ref1;
        switch (key) {
            case 'up':
            case 'down':
            case this.key.forward:
            case this.key.backward:
                this.push = (mod === 'ctrl' || mod === this.key.push);
                this.move = true;
                if (this.move_action == null) {
                    this.new_dir_sgn = this.dir_sgn = (key === 'down' || key === this.key.backward) && -1 || 1;
                    this.moveBot();
                } else {
                    this.new_dir_sgn = (key === 'down' || key === this.key.backward) && -1 || 1;
                    if (this.move_action.id === Action.JUMP && this.move_action.getRelativeTime() < 1) {
                        dir = (key === 'down' || key === this.key.backward) && -1 || 1;
                        if (world.isUnoccupiedPos(this.position.plus(this.getUp()).plus(this.getDir(dir))) && world.isUnoccupiedPos(this.position.plus(this.getDir(dir)))) {
                            action = this.getActionWithId(Action.JUMP_FORWARD);
                            action.takeOver(this.move_action);
                            Timer.removeAction(this.move_action);
                            this.move_action = action;
                            this.dir_sgn = dir;
                            Timer.addAction(this.move_action);
                        }
                    }
                }
                return true;
            case 'left':
            case 'right':
            case this.key.left:
            case this.key.right:
                this.rotate = (key === 'left' || key === this.key.left) && Action.TURN_LEFT || Action.TURN_RIGHT;
                if (this.rotate_action == null) {
                    this.rotate_action = this.getActionWithId(this.rotate);
                    Timer.addAction(this.rotate_action);
                }
                return true;
            case this.key.jump:
                this.jump = true;
                this.jump_once = true;
                if (this.move_action == null) {
                    this.moveBot();
                    this.jump_once = false;
                } else {
                    if (this.move_action.id === Action.FORWARD && this.move_action.getRelativeTime() < 0.6 || this.move_action.id === Action.CLIMB_DOWN && this.move_action.getRelativeTime() < 0.2) {
                        if (world.isUnoccupiedPos(this.position.plus(this.getUp()))) {
                            if (world.isUnoccupiedPos(this.position.plus(this.getUp().plus(this.getDir())))) {
                                action = this.getActionWithId(Action.JUMP_FORWARD);
                                world.playSound('BOT_JUMP');
                            } else {
                                action = this.getActionWithId(Action.JUMP);
                            }
                            action.takeOver(this.move_action);
                            Timer.removeAction(this.move_action);
                            this.move_action = action;
                            this.jump_once = false;
                            Timer.addAction(this.move_action);
                        }
                    } else if ((ref1 = this.move_action.id) === Action.JUMP || ref1 === Action.JUMP_FORWARD) {
                        this.jump_once = false;
                    }
                }
                return true;
            case 'ctrl':
            case this.key.push:
                this.push = true;
                return true;
            case 'f':
            case this.key.shoot:
                if (!this.shoot) {
                    this.shoot = true;
                    Timer.addAction(this.getActionWithId(Action.SHOOT));
                }
                return true;
            case this.key.lookUp:
            case this.key.lookDown:
                if (!this.look_action) {
                    this.look_action = this.getActionWithId((key === this.key.lookUp) && Action.LOOK_UP || Action.LOOK_DOWN);
                    this.look_action.reset();
                    Timer.addAction(this.look_action);
                }
                return true;
            case this.key.view:
                world.changeCameraMode();
                return true;
        }
        return false;
    };

    Player.prototype.modKeyComboEventUp = function(mod, key, combo, event) {
        switch (key) {
            case 'f':
            case this.key.shoot:
                Timer.removeAction(this.getActionWithId(Action.SHOOT));
                this.shoot = false;
                return true;
            case 'up':
            case 'down':
            case this.key.forward:
            case this.key.backward:
                this.move = false;
                return true;
            case this.key.jump:
                this.jump = false;
                return true;
            case 'left':
            case 'right':
            case this.key.left:
            case this.key.right:
                this.rotate = 0;
                return true;
            case 'ctrl':
            case this.key.push:
                this.push = false;
                return true;
            case this.key.lookDown:
            case this.key.lookUp:
                if (this.look_action && this.look_action.id !== Action.LOOK_RESET) {
                    Timer.removeAction(this.look_action);
                }
                this.look_action = this.getActionWithId(Action.LOOK_RESET);
                Timer.addAction(this.look_action);
                return true;
            case this.key.view:
                return true;
        }
        return false;
    };

    return Player;

})(Bot);

module.exports = Player;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxheWVyLmpzIiwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBT0EsSUFBQSxxREFBQTtJQUFBOzs7QUFBQSxNQUFtQixPQUFBLENBQVEsS0FBUixDQUFuQixFQUFFLGlCQUFGLEVBQVM7O0FBRVQsR0FBQSxHQUFTLE9BQUEsQ0FBUSxPQUFSOztBQUNULE1BQUEsR0FBUyxPQUFBLENBQVEsVUFBUjs7QUFDVCxLQUFBLEdBQVMsT0FBQSxDQUFRLFNBQVI7O0FBQ1QsTUFBQSxHQUFTLE9BQUEsQ0FBUSxVQUFSOztBQUVIOzs7SUFFQyxnQkFBQTtBQUVDLFlBQUE7UUFBQSx5Q0FBQSxTQUFBO1FBQ0EsSUFBQyxDQUFBLElBQUQsR0FBUTtRQUVSLElBQUcsS0FBQSxDQUFNLElBQUEsR0FBTyxLQUFLLENBQUMsR0FBTixDQUFVLE1BQVYsRUFBaUIsRUFBakIsQ0FBYixDQUFIO1lBQ0ksSUFBQyxDQUFBLEdBQUQsR0FBTyxLQURYO1NBQUEsTUFBQTtZQUdJLElBQUMsQ0FBQSxHQUFELEdBQ0k7Z0JBQUEsT0FBQSxFQUFVLEdBQVY7Z0JBQ0EsUUFBQSxFQUFVLEdBRFY7Z0JBRUEsSUFBQSxFQUFVLEdBRlY7Z0JBR0EsS0FBQSxFQUFVLEdBSFY7Z0JBSUEsTUFBQSxFQUFVLEdBSlY7Z0JBS0EsUUFBQSxFQUFVLEdBTFY7Z0JBTUEsS0FBQSxFQUFVLE9BTlY7Z0JBT0EsSUFBQSxFQUFVLE9BUFY7Z0JBUUEsSUFBQSxFQUFVLEdBUlY7Z0JBU0EsSUFBQSxFQUFVLE9BVFY7O1lBVUosS0FBSyxDQUFDLEdBQU4sQ0FBVSxNQUFWLEVBQWlCLElBQUMsQ0FBQSxHQUFsQixFQWRKOztRQWdCQSxJQUFDLENBQUEsTUFBRCxHQUFVLElBQUksTUFBSixDQUFXLElBQVgsRUFBYztZQUFBLE1BQUEsRUFBUSxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVgsR0FBeUIsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUE1QztTQUFkO1FBRVYsSUFB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MDAgICAwMDAgICAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAwIFxuIyAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgMDAwICAgMDAwIDAwMCAgIDAwMCAgICAgICAwMDAgICAwMDBcbiMgICAwMDAwMDAwMCAgIDAwMCAgICAgIDAwMDAwMDAwMCAgICAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMCAgXG4jICAgMDAwICAgICAgICAwMDAgICAgICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgIDAwMCAgIDAwMFxuIyAgIDAwMCAgICAgICAgMDAwMDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMDAwMDAwICAwMDAgICAwMDBcblxueyB2YWxpZCwgcHJlZnMgfSA9IHJlcXVpcmUgJ2t4aydcblxuQm90ICAgID0gcmVxdWlyZSAnLi9ib3QnXG5BY3Rpb24gPSByZXF1aXJlICcuL2FjdGlvbidcblRpbWVyICA9IHJlcXVpcmUgJy4vdGltZXInXG5DYW1lcmEgPSByZXF1aXJlICcuL2NhbWVyYSdcbiBcbmNsYXNzIFBsYXllciBleHRlbmRzIEJvdFxuICAgIFxuICAgIEA6IC0+XG4gICAgICAgIFxuICAgICAgICBzdXBlclxuICAgICAgICBAbmFtZSA9ICdwbGF5ZXInXG4gICAgICAgIFxuICAgICAgICBpZiB2YWxpZCBwa2V5ID0gcHJlZnMuZ2V0ICdrZXlzJyB7fVxuICAgICAgICAgICAgQGtleSA9IHBrZXlcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgQGtleSA9XG4gICAgICAgICAgICAgICAgZm9yd2FyZDogICd3J1xuICAgICAgICAgICAgICAgIGJhY2t3YXJkOiAncydcbiAgICAgICAgICAgICAgICBsZWZ0OiAgICAgJ2EnXG4gICAgICAgICAgICAgICAgcmlnaHQ6ICAgICdkJ1xuICAgICAgICAgICAgICAgIGxvb2tVcDogICAnZSdcbiAgICAgICAgICAgICAgICBsb29rRG93bjogJ3EnXG4gICAgICAgICAgICAgICAgc2hvb3Q6ICAgICdlbnRlcidcbiAgICAgICAgICAgICAgICBqdW1wOiAgICAgJ3NwYWNlJ1xuICAgICAgICAgICAgICAgIHZpZXc6ICAgICAnYydcbiAgICAgICAgICAgICAgICBwdXNoOiAgICAgJ3NoaWZ0J1xuICAgICAgICAgICAgcHJlZnMuc2V0ICdrZXlzJyBAa2V5XG5cbiAgICAgICAgQGNhbWVyYSA9IG5ldyBDYW1lcmEgQCwgYXNwZWN0OiB3b3JsZC52aWV3Lm9mZnNldFdpZHRoIC8gd29ybGQudmlldy5vZmZzZXRIZWlnaHRcblxuICAgICAgICBAbG9va19hY3Rpb24gPSBudWxsXG4gICAgICAgIEBsb29rX2FuZ2xlICA9IDAuMFxuICAgICAgICBAbmV3X2Rpcl9zZ24gPSAxLjBcbiAgICAgICAgQHJvdGF0ZSAgICAgID0gMFxuICAgICAgICBcbiAgICAgICAgQHJlY29yZGVyICAgID0gbnVsbFxuICAgICAgICBAcGxheWJhY2sgICAgPSBudWxsXG4gICAgICAgIFxuICAgICAgICBAYWRkQWN0aW9uIG5ldyBBY3Rpb24gQCwgQWN0aW9uLkxPT0tfVVAsICAgICdsb29rIHVwJyAgICAyMjBcbiAgICAgICAgQGFkZEFjdGlvbiBuZXcgQWN0aW9uIEAsIEFjdGlvbi5MT09LX0RPV04sICAnbG9vayBkb3duJyAgMjIwXG4gICAgICAgIEBhZGRBY3Rpb24gbmV3IEFjdGlvbiBALCBBY3Rpb24uTE9PS19SRVNFVCwgJ2xvb2sgcmVzZXQnIDYwXG4gICAgXG4gICAgICAgIEBhZGRFdmVudFdpdGhOYW1lIFwibGFuZGVkXCJcbiAgICBcbiAgICBidWxsZXRIaXRTb3VuZDogLT4gJ0JVTExFVF9ISVRfUExBWUVSJ1xuICAgICAgICAgICAgXG4gICAgIyAgICAwMDAwMDAwICAgIDAwMDAwMDAgIDAwMDAwMDAwMCAgMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMFxuICAgICMgICAwMDAgICAwMDAgIDAwMCAgICAgICAgICAwMDAgICAgIDAwMCAgMDAwICAgMDAwICAwMDAwICAwMDBcbiAgICAjICAgMDAwMDAwMDAwICAwMDAgICAgICAgICAgMDAwICAgICAwMDAgIDAwMCAgIDAwMCAgMDAwIDAgMDAwXG4gICAgIyAgIDAwMCAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwMFxuICAgICMgICAwMDAgICAwMDAgICAwMDAwMDAwICAgICAwMDAgICAgIDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDBcbiAgICBcbiAgICBpbml0QWN0aW9uOiAoYWN0aW9uKSAtPlxuICAgICAgICAjIGtsb2cgXCJpbml0QWN0aW9uICN7YWN0aW9uLmlkfSAje2FjdGlvbi5uYW1lfVwiXG4gICAgICAgIHN3aXRjaCBhY3Rpb24uaWRcbiAgICAgICAgICAgIHdoZW4gQWN0aW9uLkNMSU1CX0RPV05cbiAgICAgICAgICAgICAgICB3b3JsZC5wbGF5U291bmQgJ0JPVF9DTElNQidcbiAgICAgICAgICAgIHdoZW4gQWN0aW9uLkZPUldBUkRcbiAgICAgICAgICAgICAgICB3b3JsZC5wbGF5U291bmQgJ0JPVF9NT1ZFJ1xuICAgICAgICAgICAgd2hlbiBBY3Rpb24uVFVSTl9MRUZULCBBY3Rpb24uVFVSTl9SSUdIVFxuICAgICAgICAgICAgICAgIHdvcmxkLnBsYXlTb3VuZCAnQk9UX1RVUk4nXG4gICAgICAgICAgICB3aGVuIEFjdGlvbi5KVU1QXG4gICAgICAgICAgICAgICAgd29ybGQucGxheVNvdW5kICdCT1RfSlVNUCdcbiAgICAgICAgXG4gICAgICAgIHN1cGVyIGFjdGlvblxuICAgICAgICBcbiAgICAjICAgMDAwMDAwMDAgICAwMDAwMDAwMCAgMDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwICAgICAwMFxuICAgICMgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG4gICAgIyAgIDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAgICAgMDAwMDAwICAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAwMDAwMDBcbiAgICAjICAgMDAwICAgICAgICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAwIDAwMFxuICAgICMgICAwMDAgICAgICAgIDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG5cbiAgICBwZXJmb3JtQWN0aW9uOiAoYWN0aW9uKSAtPlxuICAgICAgICBcbiAgICAgICAgcmVsVGltZSA9IGFjdGlvbi5nZXRSZWxhdGl2ZVRpbWUoKVxuICAgICAgICBcbiAgICAgICAgc3dpdGNoIGFjdGlvbi5pZFxuICAgICAgICAgICAgd2hlbiBBY3Rpb24uTk9PUCAgICAgIHRoZW4gcmV0dXJuXG4gICAgICAgICAgICB3aGVuIEFjdGlvbi5MT09LX1VQICAgdGhlbiBAbG9va19hbmdsZSA9IHJlbFRpbWUgKiA5MC4wXG4gICAgICAgICAgICB3aGVuIEFjdGlvbi5MT09LX0RPV04gdGhlbiBAbG9va19hbmdsZSA9IHJlbFRpbWUgKiAtOTAuMFxuICAgICAgICAgICAgd2hlbiBBY3Rpb24uTE9PS19SRVNFVFxuICAgICAgICAgICAgICAgIGlmIEBsb29rX2FuZ2xlID4gMCB0aGVuIEBsb29rX2FuZ2xlID0gTWF0aC5taW4gQGxvb2tfYW5nbGUsICgxLjAtcmVsVGltZSkgKiA5MC4wXG4gICAgICAgICAgICAgICAgZWxzZSAgICAgICAgICAgICAgICAgICAgQGxvb2tfYW5nbGUgPSBNYXRoLm1heCBAbG9va19hbmdsZSwgKDEuMC1yZWxUaW1lKSAqIC05MC4wXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgc3VwZXIgYWN0aW9uIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIEB0YWtlbk9mZnNldFxuICAgICAgICAgICAgICAgICAgICBjb3JyZWN0ID0gQHRha2VuT3JpZy5tdWwgYWN0aW9uLmdldFJlbGF0aXZlRGVsdGEoKVxuICAgICAgICAgICAgICAgICAgICBpZiBAdGFrZW5PZmZzZXQubGVuZ3RoKCkgPCBjb3JyZWN0Lmxlbmd0aCgpXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgQHRha2VuT2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgQHRha2VuT3JpZ1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBAdGFrZW5PZmZzZXQuc3ViIGNvcnJlY3RcbiAgICBcbiAgICAjICAgMDAwMDAwMDAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAwMDAwICAwMDAgICAwMDBcbiAgICAjICAgMDAwICAgICAgIDAwMCAgMDAwMCAgMDAwICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDBcbiAgICAjICAgMDAwMDAwICAgIDAwMCAgMDAwIDAgMDAwICAwMDAgIDAwMDAwMDAgICAwMDAwMDAwMDBcbiAgICAjICAgMDAwICAgICAgIDAwMCAgMDAwICAwMDAwICAwMDAgICAgICAgMDAwICAwMDAgICAwMDBcbiAgICAjICAgMDAwICAgICAgIDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMDAwMDAgICAwMDAgICAwMDBcbiAgICBcbiAgICBmaW5pc2hBY3Rpb246IChhY3Rpb24pIC0+XG4gICAgXG4gICAgICAgIGlmIGFjdGlvbi5pZCA9PSBBY3Rpb24uTE9PS19SRVNFVFxuICAgICAgICAgICAgQGxvb2tfYWN0aW9uID0gbnVsbFxuICAgICAgICAgICAgQGxvb2tfYW5nbGUgID0gMC4wXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGlmIGFjdGlvbi5pZCA9PSBAbW92ZV9hY3Rpb24/LmlkICMgbW92ZSBmaW5pc2hlZCwgdXBkYXRlIGRpcmVjdGlvblxuICAgICAgICAgICAgICAgIEBkaXJfc2duID0gQG5ld19kaXJfc2duXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIGFjdGlvbi5pZCAhPSBBY3Rpb24uTE9PS19VUCBhbmQgYWN0aW9uLmlkICE9IEFjdGlvbi5MT09LX0RPV05cbiAgICAgICAgICAgICAgICBzdXBlciBhY3Rpb25cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgYWN0aW9uLmlkID09IEFjdGlvbi5UVVJOX0xFRlQgb3IgYWN0aW9uLmlkID09IEFjdGlvbi5UVVJOX1JJR0hUXG4gICAgICAgICAgICAgICAgaWYgQHJvdGF0ZVxuICAgICAgICAgICAgICAgICAgICBAcm90YXRlX2FjdGlvbiA9IEBnZXRBY3Rpb25XaXRoSWQgQHJvdGF0ZVxuICAgICAgICAgICAgICAgICAgICBAcm90YXRlX2FjdGlvbi5yZXNldCgpXG4gICAgICAgICAgICAgICAgICAgIFRpbWVyLmFkZEFjdGlvbiBAcm90YXRlX2FjdGlvblxuICAgIFxuICAgIGRpZTogLT5cbiAgICAgICAgICAgICAgICBcbiAgICAjICAgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwICAgMDAwXG4gICAgIyAgIDAwMCAgMDAwICAgMDAwICAgICAgICAwMDAgMDAwIFxuICAgICMgICAwMDAwMDAwICAgIDAwMDAwMDAgICAgIDAwMDAwICBcbiAgICAjICAgMDAwICAwMDAgICAwMDAgICAgICAgICAgMDAwICAgXG4gICAgIyAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgICAgIDAwMCAgIFxuICAgICAgICBcbiAgICBtb2RLZXlDb21ib0V2ZW50RG93bjogKG1vZCwga2V5LCBjb21ibywgZXZlbnQpIC0+XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAjIGtsb2cgXCJwbGF5ZXIubW9kS2V5Q29tYm9FdmVudERvd24gbW9kOiN7bW9kfSBrZXk6I3trZXl9IGNvbWJvOiN7Y29tYm99XCJcbiAgICAgICAgXG4gICAgICAgIHN3aXRjaCBrZXlcbiAgICAgICAgICAgIHdoZW4gJ3VwJyAnZG93bicgQGtleS5mb3J3YXJkLCBAa2V5LmJhY2t3YXJkXG4gICAgICAgICAgICAgICAgQHB1c2ggPSAobW9kIGluIFsnY3RybCcgQGtleS5wdXNoXSlcbiAgICAgICAgICAgICAgICBAbW92ZSA9IHRydWUgIyB0cnkgdG8gbW92ZSBhcyBsb25nIGFzIHRoZSBrZXkgaXMgbm90IHJlbGVhc2VkXG4gICAgICAgICAgICAgICAgaWYgbm90IEBtb3ZlX2FjdGlvbj9cbiAgICAgICAgICAgICAgICAgICAgQG5ld19kaXJfc2duID0gQGRpcl9zZ24gPSAoa2V5IGluIFsnZG93bicgQGtleS5iYWNrd2FyZF0pIGFuZCAtMSBvciAxIFxuICAgICAgICAgICAgICAgICAgICBAbW92ZUJvdCgpICMgcGVyZm9ybSBuZXcgbW92ZSBhY3Rpb24gKGRlcGVuZGluZyBvbiBlbnZpcm9ubWVudClcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIEBuZXdfZGlyX3NnbiA9IChrZXkgaW4gWydkb3duJyBAa2V5LmJhY2t3YXJkXSkgYW5kIC0xIG9yIDFcbiAgICAgICAgICAgICAgICAgICAgaWYgQG1vdmVfYWN0aW9uLmlkID09IEFjdGlvbi5KVU1QIGFuZCBAbW92ZV9hY3Rpb24uZ2V0UmVsYXRpdmVUaW1lKCkgPCAxIFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlyID0gKGtleSBpbiBbJ2Rvd24nIEBrZXkuYmFja3dhcmRdKSBhbmQgLTEgb3IgMSBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHdvcmxkLmlzVW5vY2N1cGllZFBvcyhAcG9zaXRpb24ucGx1cyhAZ2V0VXAoKSkucGx1cyhAZ2V0RGlyKGRpcikpKSBhbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JsZC5pc1Vub2NjdXBpZWRQb3MoQHBvc2l0aW9uLnBsdXMoQGdldERpcihkaXIpKSkgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9IEBnZXRBY3Rpb25XaXRoSWQgQWN0aW9uLkpVTVBfRk9SV0FSRFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24udGFrZU92ZXIgQG1vdmVfYWN0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGltZXIucmVtb3ZlQWN0aW9uIEBtb3ZlX2FjdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAbW92ZV9hY3Rpb24gPSBhY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGRpcl9zZ24gPSBkaXIgIyBuZWVkZWQ/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRpbWVyLmFkZEFjdGlvbiBAbW92ZV9hY3Rpb25cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICBcbiAgICAgICAgICAgIHdoZW4gJ2xlZnQnICdyaWdodCcgQGtleS5sZWZ0LCBAa2V5LnJpZ2h0XG4gICAgICAgICAgICAgICAgQHJvdGF0ZSA9IChrZXkgaW4gWydsZWZ0JyBAa2V5LmxlZnRdKSBhbmQgQWN0aW9uLlRVUk5fTEVGVCBvciBBY3Rpb24uVFVSTl9SSUdIVFxuICAgICAgICAgICAgICAgIGlmIG5vdCBAcm90YXRlX2FjdGlvbj8gIyBwbGF5ZXIgaXMgbm90IHBlcmZvcm1pbmcgYSByb3RhdGlvblxuICAgICAgICAgICAgICAgICAgICBAcm90YXRlX2FjdGlvbiA9IEBnZXRBY3Rpb25XaXRoSWQgQHJvdGF0ZVxuICAgICAgICAgICAgICAgICAgICBUaW1lci5hZGRBY3Rpb24gQHJvdGF0ZV9hY3Rpb25cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB3aGVuIEBrZXkuanVtcFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIEBqdW1wID0gdHJ1ZSAjIHN3aXRjaCB0byBqdW1wIG1vZGUgdW50aWwganVtcF9rZXkgcmVsZWFzZWRcbiAgICAgICAgICAgICAgICBAanVtcF9vbmNlID0gdHJ1ZVxuICAgICAgICAgICAgICAgIGlmIG5vdCBAbW92ZV9hY3Rpb24/IFxuICAgICAgICAgICAgICAgICAgICBAbW92ZUJvdCgpICMgcGVyZm9ybSBqdW1wIGFjdGlvbiAoZGVwZW5kaW5nIG9uIGVudmlyb25tZW50KVxuICAgICAgICAgICAgICAgICAgICBAanVtcF9vbmNlID0gZmFsc2VcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICMga2xvZyAnanVtcDptb3ZpbmcnXG4gICAgICAgICAgICAgICAgICAgIGlmIEBtb3ZlX2FjdGlvbi5pZCA9PSBBY3Rpb24uRk9SV0FSRCBhbmQgQG1vdmVfYWN0aW9uLmdldFJlbGF0aXZlVGltZSgpIDwgMC42IG9yIFxuICAgICAgICAgICAgICAgICAgICAgICAgQG1vdmVfYWN0aW9uLmlkID09IEFjdGlvbi5DTElNQl9ET1dOIGFuZCBAbW92ZV9hY3Rpb24uZ2V0UmVsYXRpdmVUaW1lKCkgPCAwLjJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGFib3J0IGN1cnJlbnQgbW92ZSBhbmQganVtcCBpbnN0ZWFkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBrbG9nICdqdW1wOm1vdmUgb3IgY2xpbWIgZG93bidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB3b3JsZC5pc1Vub2NjdXBpZWRQb3MgQHBvc2l0aW9uLnBsdXMgQGdldFVwKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBrbG9nICdqdW1wOmNhbiBkbydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgd29ybGQuaXNVbm9jY3VwaWVkUG9zIEBwb3NpdGlvbi5wbHVzIEBnZXRVcCgpLnBsdXMgQGdldERpcigpICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9IEBnZXRBY3Rpb25XaXRoSWQgQWN0aW9uLkpVTVBfRk9SV0FSRFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd29ybGQucGxheVNvdW5kICdCT1RfSlVNUCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9IEBnZXRBY3Rpb25XaXRoSWQgQWN0aW9uLkpVTVBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyB3b3JsZC5wbGF5U291bmQgJ0JPVF9KVU1QJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24udGFrZU92ZXIgQG1vdmVfYWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRpbWVyLnJlbW92ZUFjdGlvbiBAbW92ZV9hY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQG1vdmVfYWN0aW9uID0gYWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBqdW1wX29uY2UgPSBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaW1lci5hZGRBY3Rpb24gQG1vdmVfYWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgQG1vdmVfYWN0aW9uLmlkIGluIFtBY3Rpb24uSlVNUCwgQWN0aW9uLkpVTVBfRk9SV0FSRF1cbiAgICAgICAgICAgICAgICAgICAgICAgIEBqdW1wX29uY2UgPSBmYWxzZVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHdoZW4gJ2N0cmwnIEBrZXkucHVzaFxuICAgICAgICAgICAgICAgIEBwdXNoID0gdHJ1ZVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHdoZW4gJ2YnIEBrZXkuc2hvb3RcbiAgICAgICAgICAgICAgICBpZiBub3QgQHNob290XG4gICAgICAgICAgICAgICAgICAgIEBzaG9vdCA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgVGltZXIuYWRkQWN0aW9uIEBnZXRBY3Rpb25XaXRoSWQgQWN0aW9uLlNIT09UXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgd2hlbiBAa2V5Lmxvb2tVcCwgQGtleS5sb29rRG93blxuICAgICAgICAgICAgICAgIGlmIG5vdCBAbG9va19hY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgQGxvb2tfYWN0aW9uID0gQGdldEFjdGlvbldpdGhJZCAoa2V5ID09IEBrZXkubG9va1VwKSBhbmQgQWN0aW9uLkxPT0tfVVAgb3IgQWN0aW9uLkxPT0tfRE9XTlxuICAgICAgICAgICAgICAgICAgICBAbG9va19hY3Rpb24ucmVzZXQoKVxuICAgICAgICAgICAgICAgICAgICBUaW1lci5hZGRBY3Rpb24gQGxvb2tfYWN0aW9uXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgd2hlbiBAa2V5LnZpZXdcbiAgICAgICAgICAgICAgICB3b3JsZC5jaGFuZ2VDYW1lcmFNb2RlKClcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICBcbiAgICAgICAgZmFsc2VcbiAgICBcbiAgICAjICAgMDAwMDAwMDAgICAwMDAwMDAwMCAgMDAwICAgICAgMDAwMDAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAgIDAwMDAwMDAwXG4gICAgIyAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgIFxuICAgICMgICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAgICAgICAwMDAwMDAwICAgMDAwMDAwMDAwICAwMDAwMDAwICAgMDAwMDAwMCBcbiAgICAjICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgICAgICAwMDAgIDAwMCAgICAgXG4gICAgIyAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAgIDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICAwMDAwMDAwMFxuICAgIFxuICAgIG1vZEtleUNvbWJvRXZlbnRVcDogKG1vZCwga2V5LCBjb21ibywgZXZlbnQpIC0+XG4gICAgICAgICMgQHB1c2ggPSBmYWxzZSBpZiBAa2V5LnB1c2ggPT0gJ3NoaWZ0J1xuICAgICAgICAjIGtsb2cgXCJwbGF5ZXIubW9kS2V5Q29tYm9FdmVudFVwIG1vZDoje21vZH0ga2V5OiN7a2V5fSBjb21ibzoje2NvbWJvfVwiXG4gICAgICAgIHN3aXRjaCBrZXkgICAgXG4gICAgICAgICAgICB3aGVuICdmJyBAa2V5LnNob290XG4gICAgICAgICAgICAgICAgVGltZXIucmVtb3ZlQWN0aW9uIEBnZXRBY3Rpb25XaXRoSWQgQWN0aW9uLlNIT09UXG4gICAgICAgICAgICAgICAgQHNob290ID0gZmFsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB3aGVuICd1cCcgJ2Rvd24nIEBrZXkuZm9yd2FyZCwgQGtleS5iYWNrd2FyZFxuICAgICAgICAgICAgICAgIEBtb3ZlID0gZmFsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB3aGVuIEBrZXkuanVtcFxuICAgICAgICAgICAgICAgIEBqdW1wID0gZmFsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB3aGVuICdsZWZ0JyAncmlnaHQnIEBrZXkubGVmdCwgQGtleS5yaWdodFxuICAgICAgICAgICAgICAgIEByb3RhdGUgPSAwXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgd2hlbiAnY3RybCcgQGtleS5wdXNoXG4gICAgICAgICAgICAgICAgQHB1c2ggPSBmYWxzZVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHdoZW4gQGtleS5sb29rRG93biwgQGtleS5sb29rVXBcbiAgICAgICAgICAgICAgICBpZiBAbG9va19hY3Rpb24gYW5kIEBsb29rX2FjdGlvbi5pZCAhPSBBY3Rpb24uTE9PS19SRVNFVFxuICAgICAgICAgICAgICAgICAgICBUaW1lci5yZW1vdmVBY3Rpb24gQGxvb2tfYWN0aW9uXG4gICAgICAgICAgICAgICAgQGxvb2tfYWN0aW9uID0gQGdldEFjdGlvbldpdGhJZCBBY3Rpb24uTE9PS19SRVNFVFxuICAgICAgICAgICAgICAgIFRpbWVyLmFkZEFjdGlvbiBAbG9va19hY3Rpb25cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB3aGVuIEBrZXkudmlldyBcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgXG4gICAgICAgIGZhbHNlXG4gICAgXG5tb2R1bGUuZXhwb3J0cyA9IFBsYXllclxuIl19
//# sourceURL=../coffee/player.coffee