// koffee 1.4.0
var Action, Bot, Camera, Player, Timer, prefs, ref, valid,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

ref = require('kxk'), valid = ref.valid, prefs = ref.prefs;

Bot = require('./bot');

Action = require('./action');

Timer = require('./timer');

Camera = require('./camera');

Player = (function(superClass) {
    extend(Player, superClass);

    function Player() {
        var pkey;
        Player.__super__.constructor.apply(this, arguments);
        this.name = 'player';
        if (valid(pkey = prefs.get('keys', {}))) {
            this.key = pkey;
        } else {
            this.key = {
                forward: 'w',
                backward: 's',
                left: 'a',
                right: 'd',
                lookUp: 'e',
                lookDown: 'q',
                shoot: 'enter',
                jump: 'space',
                view: 'c',
                push: 'shift'
            };
            prefs.set('keys', this.key);
        }
        this.camera = new Camera(this, {
            aspect: world.view.offsetWidth / world.view.offsetHeight
        });
        this.look_action = null;
        this.look_angle = 0.0;
        this.new_dir_sgn = 1.0;
        this.rotate = 0;
        this.recorder = null;
        this.playback = null;
        this.addAction(new Action(this, Action.LOOK_UP, 'look up', 220));
        this.addAction(new Action(this, Action.LOOK_DOWN, 'look down', 220));
        this.addAction(new Action(this, Action.LOOK_RESET, 'look reset', 60));
        this.addEventWithName("landed");
    }

    Player.prototype.bulletHitSound = function() {
        return 'BULLET_HIT_PLAYER';
    };

    Player.prototype.initAction = function(action) {
        switch (action.id) {
            case Action.CLIMB_DOWN:
                world.playSound('BOT_CLIMB');
                break;
            case Action.FORWARD:
                world.playSound('BOT_MOVE');
                break;
            case Action.TURN_LEFT:
            case Action.TURN_RIGHT:
                world.playSound('BOT_TURN');
                break;
            case Action.JUMP:
            case Action.JUMP_FORWARD:
                world.playSound('BOT_JUMP');
        }
        return Player.__super__.initAction.call(this, action);
    };

    Player.prototype.performAction = function(action) {
        var relTime;
        relTime = action.getRelativeTime();
        switch (action.id) {
            case Action.NOOP:
                break;
            case Action.LOOK_UP:
                return this.look_angle = relTime * 90.0;
            case Action.LOOK_DOWN:
                return this.look_angle = relTime * -90.0;
            case Action.LOOK_RESET:
                if (this.look_angle > 0) {
                    return this.look_angle = Math.min(this.look_angle, (1.0 - relTime) * 90.0);
                } else {
                    return this.look_angle = Math.max(this.look_angle, (1.0 - relTime) * -90.0);
                }
                break;
            default:
                return Player.__super__.performAction.call(this, action);
        }
    };

    Player.prototype.finishAction = function(action) {
        var ref1;
        if (action.id === Action.LOOK_RESET) {
            this.look_action = null;
            return this.look_angle = 0.0;
        } else {
            if (action.id === ((ref1 = this.move_action) != null ? ref1.id : void 0)) {
                this.dir_sgn = this.new_dir_sgn;
            }
            if (action.id !== Action.LOOK_UP && action.id !== Action.LOOK_DOWN) {
                Player.__super__.finishAction.call(this, action);
            }
            if (action.id === Action.TURN_LEFT || action.id === Action.TURN_RIGHT) {
                if (this.rotate) {
                    this.rotate_action = this.getActionWithId(this.rotate);
                    this.rotate_action.reset();
                    return Timer.addAction(this.rotate_action);
                }
            }
        }
    };

    Player.prototype.die = function() {};

    Player.prototype.modKeyComboEventDown = function(mod, key, combo, event) {
        var action, ref1;
        switch (key) {
            case 'up':
            case 'down':
            case this.key.forward:
            case this.key.backward:
                this.push = (mod === 'ctrl' || mod === this.key.push);
                this.move = true;
                if (this.move_action == null) {
                    this.new_dir_sgn = this.dir_sgn = (key === 'down' || key === this.key.backward) && -1 || 1;
                    this.moveBot();
                } else {
                    if (this.move_action.id === Action.JUMP && this.move_action.getRelativeTime() < 1) {
                        if (world.isUnoccupiedPos(this.position.plus(this.getUp()).plus(this.getDir())) && world.isUnoccupiedPos(this.position.plus(this.getDir()))) {
                            action = this.getActionWithId(Action.JUMP_FORWARD);
                            action.takeOver(this.move_action);
                            Timer.removeAction(this.move_action);
                            this.move_action = action;
                            Timer.addAction(this.move_action);
                        }
                    }
                    this.new_dir_sgn = (key === 'down' || key === this.key.backward) && -1 || 1;
                }
                return true;
            case 'left':
            case 'right':
            case this.key.left:
            case this.key.right:
                this.rotate = (key === 'left' || key === this.key.left) && Action.TURN_LEFT || Action.TURN_RIGHT;
                if (this.rotate_action == null) {
                    this.rotate_action = this.getActionWithId(this.rotate);
                    Timer.addAction(this.rotate_action);
                }
                return true;
            case this.key.jump:
                this.jump = true;
                this.jump_once = true;
                if (this.move_action == null) {
                    this.moveBot();
                    this.jump_once = false;
                } else {
                    if (this.move_action.id === Action.FORWARD && this.move_action.getRelativeTime() < 0.6 || this.move_action.id === Action.CLIMB_DOWN && this.move_action.getRelativeTime() < 0.4) {
                        if (world.isUnoccupiedPos(this.position.plus(this.getUp()))) {
                            if (world.isUnoccupiedPos(this.position.plus(this.getUp().plus(this.getDir())))) {
                                action = this.getActionWithId(Action.JUMP_FORWARD);
                            } else {
                                action = this.getActionWithId(Action.JUMP);
                            }
                            world.playSound('BOT_JUMP');
                            action.takeOver(this.move_action);
                            Timer.removeAction(this.move_action);
                            this.move_action = action;
                            this.jump_once = false;
                            Timer.addAction(this.move_action);
                        }
                    } else if ((ref1 = this.move_action.id) === Action.JUMP || ref1 === Action.JUMP_FORWARD) {
                        this.jump_once = false;
                    }
                }
                return true;
            case 'ctrl':
            case this.key.push:
                this.push = true;
                return true;
            case 'f':
            case this.key.shoot:
                if (!this.shoot) {
                    this.shoot = true;
                    Timer.addAction(this.getActionWithId(Action.SHOOT));
                }
                return true;
            case this.key.lookUp:
            case this.key.lookDown:
                if (!this.look_action) {
                    this.look_action = this.getActionWithId((key === this.key.lookUp) && Action.LOOK_UP || Action.LOOK_DOWN);
                    this.look_action.reset();
                    Timer.addAction(this.look_action);
                }
                return true;
            case this.key.view:
                world.changeCameraMode();
                return true;
        }
        return false;
    };

    Player.prototype.modKeyComboEventUp = function(mod, key, combo, event) {
        switch (key) {
            case 'f':
            case this.key.shoot:
                Timer.removeAction(this.getActionWithId(Action.SHOOT));
                this.shoot = false;
                return true;
            case 'up':
            case 'down':
            case this.key.forward:
            case this.key.backward:
                this.move = false;
                return true;
            case this.key.jump:
                this.jump = false;
                return true;
            case 'left':
            case 'right':
            case this.key.left:
            case this.key.right:
                this.rotate = 0;
                return true;
            case 'ctrl':
            case this.key.push:
                this.push = false;
                return true;
            case this.key.lookDown:
            case this.key.lookUp:
                if (this.look_action && this.look_action.id !== Action.LOOK_RESET) {
                    Timer.removeAction(this.look_action);
                }
                this.look_action = this.getActionWithId(Action.LOOK_RESET);
                Timer.addAction(this.look_action);
                return true;
            case this.key.view:
                return true;
        }
        return false;
    };

    return Player;

})(Bot);

module.exports = Player;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxheWVyLmpzIiwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBT0EsSUFBQSxxREFBQTtJQUFBOzs7QUFBQSxNQUFtQixPQUFBLENBQVEsS0FBUixDQUFuQixFQUFFLGlCQUFGLEVBQVM7O0FBRVQsR0FBQSxHQUFTLE9BQUEsQ0FBUSxPQUFSOztBQUNULE1BQUEsR0FBUyxPQUFBLENBQVEsVUFBUjs7QUFDVCxLQUFBLEdBQVMsT0FBQSxDQUFRLFNBQVI7O0FBQ1QsTUFBQSxHQUFTLE9BQUEsQ0FBUSxVQUFSOztBQUVIOzs7SUFFQyxnQkFBQTtBQUVDLFlBQUE7UUFBQSx5Q0FBQSxTQUFBO1FBQ0EsSUFBQyxDQUFBLElBQUQsR0FBUTtRQUVSLElBQUcsS0FBQSxDQUFNLElBQUEsR0FBTyxLQUFLLENBQUMsR0FBTixDQUFVLE1BQVYsRUFBaUIsRUFBakIsQ0FBYixDQUFIO1lBQ0ksSUFBQyxDQUFBLEdBQUQsR0FBTyxLQURYO1NBQUEsTUFBQTtZQUdJLElBQUMsQ0FBQSxHQUFELEdBQ0k7Z0JBQUEsT0FBQSxFQUFVLEdBQVY7Z0JBQ0EsUUFBQSxFQUFVLEdBRFY7Z0JBRUEsSUFBQSxFQUFVLEdBRlY7Z0JBR0EsS0FBQSxFQUFVLEdBSFY7Z0JBSUEsTUFBQSxFQUFVLEdBSlY7Z0JBS0EsUUFBQSxFQUFVLEdBTFY7Z0JBTUEsS0FBQSxFQUFVLE9BTlY7Z0JBT0EsSUFBQSxFQUFVLE9BUFY7Z0JBUUEsSUFBQSxFQUFVLEdBUlY7Z0JBU0EsSUFBQSxFQUFVLE9BVFY7O1lBVUosS0FBSyxDQUFDLEdBQU4sQ0FBVSxNQUFWLEVBQWlCLElBQUMsQ0FBQSxHQUFsQixFQWRKOztRQWdCQSxJQUFDLENBQUEsTUFBRCxHQUFVLElBQUksTUFBSixDQUFXLElBQVgsRUFBYztZQUFBLE1BQUEsRUFBUSxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVgsR0FBeUIsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUE1QztTQUFkO1FBRVYsSUFB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LElBQUMsQ0FBQSxJQUFELEdBQVE7QUFDUix1QkFBTztBQXBCZixpQkFzQlMsSUFBQyxDQUFBLEdBQUcsQ0FBQyxRQXRCZDtBQUFBLGlCQXNCd0IsSUFBQyxDQUFBLEdBQUcsQ0FBQyxNQXRCN0I7Z0JBdUJRLElBQUcsSUFBQyxDQUFBLFdBQUQsSUFBaUIsSUFBQyxDQUFBLFdBQVcsQ0FBQyxFQUFiLEtBQW1CLE1BQU0sQ0FBQyxVQUE5QztvQkFDSSxLQUFLLENBQUMsWUFBTixDQUFtQixJQUFDLENBQUEsV0FBcEIsRUFESjs7Z0JBRUEsSUFBQyxDQUFBLFdBQUQsR0FBZSxJQUFDLENBQUEsZUFBRCxDQUFpQixNQUFNLENBQUMsVUFBeEI7Z0JBQ2YsS0FBSyxDQUFDLFNBQU4sQ0FBZ0IsSUFBQyxDQUFBLFdBQWpCO0FBQ0EsdUJBQU87QUEzQmYsaUJBNkJTLElBQUMsQ0FBQSxHQUFHLENBQUMsSUE3QmQ7QUE4QlEsdUJBQU87QUE5QmY7ZUFnQ0E7SUFuQ2dCOzs7O0dBek1IOztBQThPckIsTUFBTSxDQUFDLE9BQVAsR0FBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJcbiMgICAwMDAwMDAwMCAgIDAwMCAgICAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwMDAwMDAgXG4jICAgMDAwICAgMDAwICAwMDAgICAgICAwMDAgICAwMDAgICAwMDAgMDAwICAgMDAwICAgICAgIDAwMCAgIDAwMFxuIyAgIDAwMDAwMDAwICAgMDAwICAgICAgMDAwMDAwMDAwICAgIDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwICBcbiMgICAwMDAgICAgICAgIDAwMCAgICAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgICAgMDAwICAgMDAwXG4jICAgMDAwICAgICAgICAwMDAwMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwMDAwMDAgIDAwMCAgIDAwMFxuXG57IHZhbGlkLCBwcmVmcyB9ID0gcmVxdWlyZSAna3hrJ1xuXG5Cb3QgICAgPSByZXF1aXJlICcuL2JvdCdcbkFjdGlvbiA9IHJlcXVpcmUgJy4vYWN0aW9uJ1xuVGltZXIgID0gcmVxdWlyZSAnLi90aW1lcidcbkNhbWVyYSA9IHJlcXVpcmUgJy4vY2FtZXJhJ1xuIFxuY2xhc3MgUGxheWVyIGV4dGVuZHMgQm90XG4gICAgXG4gICAgQDogLT5cbiAgICAgICAgXG4gICAgICAgIHN1cGVyXG4gICAgICAgIEBuYW1lID0gJ3BsYXllcidcbiAgICAgICAgXG4gICAgICAgIGlmIHZhbGlkIHBrZXkgPSBwcmVmcy5nZXQgJ2tleXMnIHt9XG4gICAgICAgICAgICBAa2V5ID0gcGtleVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBAa2V5ID1cbiAgICAgICAgICAgICAgICBmb3J3YXJkOiAgJ3cnXG4gICAgICAgICAgICAgICAgYmFja3dhcmQ6ICdzJ1xuICAgICAgICAgICAgICAgIGxlZnQ6ICAgICAnYSdcbiAgICAgICAgICAgICAgICByaWdodDogICAgJ2QnXG4gICAgICAgICAgICAgICAgbG9va1VwOiAgICdlJ1xuICAgICAgICAgICAgICAgIGxvb2tEb3duOiAncSdcbiAgICAgICAgICAgICAgICBzaG9vdDogICAgJ2VudGVyJ1xuICAgICAgICAgICAgICAgIGp1bXA6ICAgICAnc3BhY2UnXG4gICAgICAgICAgICAgICAgdmlldzogICAgICdjJ1xuICAgICAgICAgICAgICAgIHB1c2g6ICAgICAnc2hpZnQnXG4gICAgICAgICAgICBwcmVmcy5zZXQgJ2tleXMnIEBrZXlcblxuICAgICAgICBAY2FtZXJhID0gbmV3IENhbWVyYSBALCBhc3BlY3Q6IHdvcmxkLnZpZXcub2Zmc2V0V2lkdGggLyB3b3JsZC52aWV3Lm9mZnNldEhlaWdodFxuXG4gICAgICAgIEBsb29rX2FjdGlvbiA9IG51bGxcbiAgICAgICAgQGxvb2tfYW5nbGUgID0gMC4wXG4gICAgICAgIEBuZXdfZGlyX3NnbiA9IDEuMFxuICAgICAgICBAcm90YXRlICAgICAgPSAwXG4gICAgICAgIFxuICAgICAgICBAcmVjb3JkZXIgICAgPSBudWxsXG4gICAgICAgIEBwbGF5YmFjayAgICA9IG51bGxcbiAgICAgICAgXG4gICAgICAgIEBhZGRBY3Rpb24gbmV3IEFjdGlvbiBALCBBY3Rpb24uTE9PS19VUCwgICAgJ2xvb2sgdXAnICAgIDIyMFxuICAgICAgICBAYWRkQWN0aW9uIG5ldyBBY3Rpb24gQCwgQWN0aW9uLkxPT0tfRE9XTiwgICdsb29rIGRvd24nICAyMjBcbiAgICAgICAgQGFkZEFjdGlvbiBuZXcgQWN0aW9uIEAsIEFjdGlvbi5MT09LX1JFU0VULCAnbG9vayByZXNldCcgNjBcbiAgICBcbiAgICAgICAgQGFkZEV2ZW50V2l0aE5hbWUgXCJsYW5kZWRcIlxuICAgIFxuICAgIGJ1bGxldEhpdFNvdW5kOiAtPiAnQlVMTEVUX0hJVF9QTEFZRVInXG4gICAgICAgICAgICBcbiAgICAjICAgIDAwMDAwMDAgICAgMDAwMDAwMCAgMDAwMDAwMDAwICAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwXG4gICAgIyAgIDAwMCAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAwMDAgICAwMDAgIDAwMDAgIDAwMFxuICAgICMgICAwMDAwMDAwMDAgIDAwMCAgICAgICAgICAwMDAgICAgIDAwMCAgMDAwICAgMDAwICAwMDAgMCAwMDBcbiAgICAjICAgMDAwICAgMDAwICAwMDAgICAgICAgICAgMDAwICAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAwXG4gICAgIyAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMFxuICAgIFxuICAgIGluaXRBY3Rpb246IChhY3Rpb24pIC0+XG4gICAgICAgICMga2xvZyBcImluaXRBY3Rpb24gI3thY3Rpb24uaWR9ICN7YWN0aW9uLm5hbWV9XCJcbiAgICAgICAgc3dpdGNoIGFjdGlvbi5pZFxuICAgICAgICAgICAgd2hlbiBBY3Rpb24uQ0xJTUJfRE9XTlxuICAgICAgICAgICAgICAgIHdvcmxkLnBsYXlTb3VuZCAnQk9UX0NMSU1CJ1xuICAgICAgICAgICAgd2hlbiBBY3Rpb24uRk9SV0FSRFxuICAgICAgICAgICAgICAgIHdvcmxkLnBsYXlTb3VuZCAnQk9UX01PVkUnXG4gICAgICAgICAgICB3aGVuIEFjdGlvbi5UVVJOX0xFRlQsIEFjdGlvbi5UVVJOX1JJR0hUXG4gICAgICAgICAgICAgICAgd29ybGQucGxheVNvdW5kICdCT1RfVFVSTidcbiAgICAgICAgICAgIHdoZW4gQWN0aW9uLkpVTVAsIEFjdGlvbi5KVU1QX0ZPUldBUkRcbiAgICAgICAgICAgICAgICB3b3JsZC5wbGF5U291bmQgJ0JPVF9KVU1QJ1xuICAgICAgICBcbiAgICAgICAgc3VwZXIgYWN0aW9uXG4gICAgICAgIFxuICAgICMgICAwMDAwMDAwMCAgIDAwMDAwMDAwICAwMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAgICAgIDAwXG4gICAgIyAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDBcbiAgICAjICAgMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgICAwMDAwMDAgICAgMDAwICAgMDAwICAwMDAwMDAwICAgIDAwMDAwMDAwMFxuICAgICMgICAwMDAgICAgICAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwIDAgMDAwXG4gICAgIyAgIDAwMCAgICAgICAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAgICAwMDBcblxuICAgIHBlcmZvcm1BY3Rpb246IChhY3Rpb24pIC0+XG4gICAgICAgIFxuICAgICAgICByZWxUaW1lID0gYWN0aW9uLmdldFJlbGF0aXZlVGltZSgpXG4gICAgICAgIFxuICAgICAgICBzd2l0Y2ggYWN0aW9uLmlkXG4gICAgICAgICAgICB3aGVuIEFjdGlvbi5OT09QICAgICAgdGhlbiByZXR1cm5cbiAgICAgICAgICAgIHdoZW4gQWN0aW9uLkxPT0tfVVAgICB0aGVuIEBsb29rX2FuZ2xlID0gcmVsVGltZSAqIDkwLjBcbiAgICAgICAgICAgIHdoZW4gQWN0aW9uLkxPT0tfRE9XTiB0aGVuIEBsb29rX2FuZ2xlID0gcmVsVGltZSAqIC05MC4wXG4gICAgICAgICAgICB3aGVuIEFjdGlvbi5MT09LX1JFU0VUXG4gICAgICAgICAgICAgICAgaWYgQGxvb2tfYW5nbGUgPiAwIHRoZW4gQGxvb2tfYW5nbGUgPSBNYXRoLm1pbiBAbG9va19hbmdsZSwgKDEuMC1yZWxUaW1lKSAqIDkwLjBcbiAgICAgICAgICAgICAgICBlbHNlICAgICAgICAgICAgICAgICAgICBAbG9va19hbmdsZSA9IE1hdGgubWF4IEBsb29rX2FuZ2xlLCAoMS4wLXJlbFRpbWUpICogLTkwLjBcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBzdXBlciBhY3Rpb24gXG4gICAgXG4gICAgIyAgIDAwMDAwMDAwICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwMDAwMCAgMDAwICAgMDAwXG4gICAgIyAgIDAwMCAgICAgICAwMDAgIDAwMDAgIDAwMCAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwXG4gICAgIyAgIDAwMDAwMCAgICAwMDAgIDAwMCAwIDAwMCAgMDAwICAwMDAwMDAwICAgMDAwMDAwMDAwXG4gICAgIyAgIDAwMCAgICAgICAwMDAgIDAwMCAgMDAwMCAgMDAwICAgICAgIDAwMCAgMDAwICAgMDAwXG4gICAgIyAgIDAwMCAgICAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAwMDAwICAgMDAwICAgMDAwXG4gICAgXG4gICAgZmluaXNoQWN0aW9uOiAoYWN0aW9uKSAtPlxuICAgIFxuICAgICAgICBpZiBhY3Rpb24uaWQgPT0gQWN0aW9uLkxPT0tfUkVTRVRcbiAgICAgICAgICAgIEBsb29rX2FjdGlvbiA9IG51bGxcbiAgICAgICAgICAgIEBsb29rX2FuZ2xlICA9IDAuMFxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBpZiBhY3Rpb24uaWQgPT0gQG1vdmVfYWN0aW9uPy5pZCAjIG1vdmUgZmluaXNoZWQsIHVwZGF0ZSBkaXJlY3Rpb25cbiAgICAgICAgICAgICAgICBAZGlyX3NnbiA9IEBuZXdfZGlyX3NnblxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiBhY3Rpb24uaWQgIT0gQWN0aW9uLkxPT0tfVVAgYW5kIGFjdGlvbi5pZCAhPSBBY3Rpb24uTE9PS19ET1dOXG4gICAgICAgICAgICAgICAgc3VwZXIgYWN0aW9uXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIGFjdGlvbi5pZCA9PSBBY3Rpb24uVFVSTl9MRUZUIG9yIGFjdGlvbi5pZCA9PSBBY3Rpb24uVFVSTl9SSUdIVFxuICAgICAgICAgICAgICAgIGlmIEByb3RhdGVcbiAgICAgICAgICAgICAgICAgICAgQHJvdGF0ZV9hY3Rpb24gPSBAZ2V0QWN0aW9uV2l0aElkIEByb3RhdGVcbiAgICAgICAgICAgICAgICAgICAgQHJvdGF0ZV9hY3Rpb24ucmVzZXQoKVxuICAgICAgICAgICAgICAgICAgICBUaW1lci5hZGRBY3Rpb24gQHJvdGF0ZV9hY3Rpb25cbiAgICBcbiAgICBkaWU6IC0+XG4gICAgICAgICAgICAgICAgXG4gICAgIyAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMFxuICAgICMgICAwMDAgIDAwMCAgIDAwMCAgICAgICAgMDAwIDAwMCBcbiAgICAjICAgMDAwMDAwMCAgICAwMDAwMDAwICAgICAwMDAwMCAgXG4gICAgIyAgIDAwMCAgMDAwICAgMDAwICAgICAgICAgIDAwMCAgIFxuICAgICMgICAwMDAgICAwMDAgIDAwMDAwMDAwICAgICAwMDAgICBcbiAgICAgICAgXG4gICAgbW9kS2V5Q29tYm9FdmVudERvd246IChtb2QsIGtleSwgY29tYm8sIGV2ZW50KSAtPlxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgIyBrbG9nIFwicGxheWVyLm1vZEtleUNvbWJvRXZlbnREb3duIG1vZDoje21vZH0ga2V5OiN7a2V5fSBjb21ibzoje2NvbWJvfVwiXG4gICAgICAgIFxuICAgICAgICBzd2l0Y2gga2V5XG4gICAgICAgICAgICB3aGVuICd1cCcgJ2Rvd24nIEBrZXkuZm9yd2FyZCwgQGtleS5iYWNrd2FyZFxuICAgICAgICAgICAgICAgIEBwdXNoID0gKG1vZCBpbiBbJ2N0cmwnIEBrZXkucHVzaF0pXG4gICAgICAgICAgICAgICAgQG1vdmUgPSB0cnVlICMgdHJ5IHRvIG1vdmUgYXMgbG9uZyBhcyB0aGUga2V5IGlzIG5vdCByZWxlYXNlZFxuICAgICAgICAgICAgICAgIGlmIG5vdCBAbW92ZV9hY3Rpb24/XG4gICAgICAgICAgICAgICAgICAgIEBuZXdfZGlyX3NnbiA9IEBkaXJfc2duID0gKGtleSBpbiBbJ2Rvd24nIEBrZXkuYmFja3dhcmRdKSBhbmQgLTEgb3IgMSBcbiAgICAgICAgICAgICAgICAgICAgQG1vdmVCb3QoKSAjIHBlcmZvcm0gbmV3IG1vdmUgYWN0aW9uIChkZXBlbmRpbmcgb24gZW52aXJvbm1lbnQpXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBpZiBAbW92ZV9hY3Rpb24uaWQgPT0gQWN0aW9uLkpVTVAgYW5kIEBtb3ZlX2FjdGlvbi5nZXRSZWxhdGl2ZVRpbWUoKSA8IDEgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHdvcmxkLmlzVW5vY2N1cGllZFBvcyhAcG9zaXRpb24ucGx1cyhAZ2V0VXAoKSkucGx1cyhAZ2V0RGlyKCkpKSBhbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JsZC5pc1Vub2NjdXBpZWRQb3MoQHBvc2l0aW9uLnBsdXMoQGdldERpcigpKSkgIyBmb3J3YXJkIGFuZCBhYm92ZSBmb3J3YXJkIGFsc28gZW1wdHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gQGdldEFjdGlvbldpdGhJZCBBY3Rpb24uSlVNUF9GT1JXQVJEXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbi50YWtlT3ZlciBAbW92ZV9hY3Rpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaW1lci5yZW1vdmVBY3Rpb24gQG1vdmVfYWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBtb3ZlX2FjdGlvbiA9IGFjdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaW1lci5hZGRBY3Rpb24gQG1vdmVfYWN0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgQG5ld19kaXJfc2duID0gKGtleSBpbiBbJ2Rvd24nIEBrZXkuYmFja3dhcmRdKSBhbmQgLTEgb3IgMVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIFxuICAgICAgICAgICAgd2hlbiAnbGVmdCcgJ3JpZ2h0JyBAa2V5LmxlZnQsIEBrZXkucmlnaHRcbiAgICAgICAgICAgICAgICBAcm90YXRlID0gKGtleSBpbiBbJ2xlZnQnIEBrZXkubGVmdF0pIGFuZCBBY3Rpb24uVFVSTl9MRUZUIG9yIEFjdGlvbi5UVVJOX1JJR0hUXG4gICAgICAgICAgICAgICAgaWYgbm90IEByb3RhdGVfYWN0aW9uPyAjIHBsYXllciBpcyBub3QgcGVyZm9ybWluZyBhIHJvdGF0aW9uXG4gICAgICAgICAgICAgICAgICAgIEByb3RhdGVfYWN0aW9uID0gQGdldEFjdGlvbldpdGhJZCBAcm90YXRlXG4gICAgICAgICAgICAgICAgICAgIFRpbWVyLmFkZEFjdGlvbiBAcm90YXRlX2FjdGlvblxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHdoZW4gQGtleS5qdW1wXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgQGp1bXAgPSB0cnVlICMgc3dpdGNoIHRvIGp1bXAgbW9kZSB1bnRpbCBqdW1wX2tleSByZWxlYXNlZFxuICAgICAgICAgICAgICAgIEBqdW1wX29uY2UgPSB0cnVlXG4gICAgICAgICAgICAgICAgaWYgbm90IEBtb3ZlX2FjdGlvbj8gXG4gICAgICAgICAgICAgICAgICAgIEBtb3ZlQm90KCkgIyBwZXJmb3JtIGp1bXAgYWN0aW9uIChkZXBlbmRpbmcgb24gZW52aXJvbm1lbnQpXG4gICAgICAgICAgICAgICAgICAgIEBqdW1wX29uY2UgPSBmYWxzZVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgIyBrbG9nICdqdW1wOm1vdmluZydcbiAgICAgICAgICAgICAgICAgICAgaWYgQG1vdmVfYWN0aW9uLmlkID09IEFjdGlvbi5GT1JXQVJEIGFuZCBAbW92ZV9hY3Rpb24uZ2V0UmVsYXRpdmVUaW1lKCkgPCAwLjYgb3IgXG4gICAgICAgICAgICAgICAgICAgICAgICBAbW92ZV9hY3Rpb24uaWQgPT0gQWN0aW9uLkNMSU1CX0RPV04gYW5kIEBtb3ZlX2FjdGlvbi5nZXRSZWxhdGl2ZVRpbWUoKSA8IDAuNFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgYWJvcnQgY3VycmVudCBtb3ZlIGFuZCBqdW1wIGluc3RlYWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGtsb2cgJ2p1bXA6bW92ZSBvciBjbGltYiBkb3duJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHdvcmxkLmlzVW5vY2N1cGllZFBvcyBAcG9zaXRpb24ucGx1cyBAZ2V0VXAoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGtsb2cgJ2p1bXA6Y2FuIGRvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB3b3JsZC5pc1Vub2NjdXBpZWRQb3MgQHBvc2l0aW9uLnBsdXMgQGdldFVwKCkucGx1cyBAZ2V0RGlyKCkgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gQGdldEFjdGlvbldpdGhJZCBBY3Rpb24uSlVNUF9GT1JXQVJEXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSBAZ2V0QWN0aW9uV2l0aElkIEFjdGlvbi5KVU1QXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmxkLnBsYXlTb3VuZCAnQk9UX0pVTVAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbi50YWtlT3ZlciBAbW92ZV9hY3Rpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaW1lci5yZW1vdmVBY3Rpb24gQG1vdmVfYWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBtb3ZlX2FjdGlvbiA9IGFjdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAanVtcF9vbmNlID0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGltZXIuYWRkQWN0aW9uIEBtb3ZlX2FjdGlvblxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIEBtb3ZlX2FjdGlvbi5pZCBpbiBbQWN0aW9uLkpVTVAsIEFjdGlvbi5KVU1QX0ZPUldBUkRdXG4gICAgICAgICAgICAgICAgICAgICAgICBAanVtcF9vbmNlID0gZmFsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB3aGVuICdjdHJsJyBAa2V5LnB1c2hcbiAgICAgICAgICAgICAgICBAcHVzaCA9IHRydWVcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB3aGVuICdmJyBAa2V5LnNob290XG4gICAgICAgICAgICAgICAgaWYgbm90IEBzaG9vdFxuICAgICAgICAgICAgICAgICAgICBAc2hvb3QgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgIFRpbWVyLmFkZEFjdGlvbiBAZ2V0QWN0aW9uV2l0aElkIEFjdGlvbi5TSE9PVFxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHdoZW4gQGtleS5sb29rVXAsIEBrZXkubG9va0Rvd25cbiAgICAgICAgICAgICAgICBpZiBub3QgQGxvb2tfYWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIEBsb29rX2FjdGlvbiA9IEBnZXRBY3Rpb25XaXRoSWQgKGtleSA9PSBAa2V5Lmxvb2tVcCkgYW5kIEFjdGlvbi5MT09LX1VQIG9yIEFjdGlvbi5MT09LX0RPV05cbiAgICAgICAgICAgICAgICAgICAgQGxvb2tfYWN0aW9uLnJlc2V0KClcbiAgICAgICAgICAgICAgICAgICAgVGltZXIuYWRkQWN0aW9uIEBsb29rX2FjdGlvblxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHdoZW4gQGtleS52aWV3XG4gICAgICAgICAgICAgICAgd29ybGQuY2hhbmdlQ2FtZXJhTW9kZSgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgXG4gICAgICAgIGZhbHNlXG4gICAgXG4gICAgIyAgIDAwMDAwMDAwICAgMDAwMDAwMDAgIDAwMCAgICAgIDAwMDAwMDAwICAgMDAwMDAwMCAgICAwMDAwMDAwICAwMDAwMDAwMFxuICAgICMgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICBcbiAgICAjICAgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwICAgICAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAgXG4gICAgIyAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgIDAwMCAgICAgICAwMDAgICAwMDAgICAgICAgMDAwICAwMDAgICAgIFxuICAgICMgICAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAwMDAwICAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgMDAwMDAwMDBcbiAgICBcbiAgICBtb2RLZXlDb21ib0V2ZW50VXA6IChtb2QsIGtleSwgY29tYm8sIGV2ZW50KSAtPlxuICAgICAgICAjIEBwdXNoID0gZmFsc2UgaWYgQGtleS5wdXNoID09ICdzaGlmdCdcbiAgICAgICAgIyBrbG9nIFwicGxheWVyLm1vZEtleUNvbWJvRXZlbnRVcCBtb2Q6I3ttb2R9IGtleToje2tleX0gY29tYm86I3tjb21ib31cIlxuICAgICAgICBzd2l0Y2gga2V5ICAgIFxuICAgICAgICAgICAgd2hlbiAnZicgQGtleS5zaG9vdFxuICAgICAgICAgICAgICAgIFRpbWVyLnJlbW92ZUFjdGlvbiBAZ2V0QWN0aW9uV2l0aElkIEFjdGlvbi5TSE9PVFxuICAgICAgICAgICAgICAgIEBzaG9vdCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgd2hlbiAndXAnICdkb3duJyBAa2V5LmZvcndhcmQsIEBrZXkuYmFja3dhcmRcbiAgICAgICAgICAgICAgICBAbW92ZSA9IGZhbHNlXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgd2hlbiBAa2V5Lmp1bXBcbiAgICAgICAgICAgICAgICBAanVtcCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgd2hlbiAnbGVmdCcgJ3JpZ2h0JyBAa2V5LmxlZnQsIEBrZXkucmlnaHRcbiAgICAgICAgICAgICAgICBAcm90YXRlID0gMFxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHdoZW4gJ2N0cmwnIEBrZXkucHVzaFxuICAgICAgICAgICAgICAgIEBwdXNoID0gZmFsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB3aGVuIEBrZXkubG9va0Rvd24sIEBrZXkubG9va1VwXG4gICAgICAgICAgICAgICAgaWYgQGxvb2tfYWN0aW9uIGFuZCBAbG9va19hY3Rpb24uaWQgIT0gQWN0aW9uLkxPT0tfUkVTRVRcbiAgICAgICAgICAgICAgICAgICAgVGltZXIucmVtb3ZlQWN0aW9uIEBsb29rX2FjdGlvblxuICAgICAgICAgICAgICAgIEBsb29rX2FjdGlvbiA9IEBnZXRBY3Rpb25XaXRoSWQgQWN0aW9uLkxPT0tfUkVTRVRcbiAgICAgICAgICAgICAgICBUaW1lci5hZGRBY3Rpb24gQGxvb2tfYWN0aW9uXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgd2hlbiBAa2V5LnZpZXcgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgIFxuICAgICAgICBmYWxzZVxuICAgIFxubW9kdWxlLmV4cG9ydHMgPSBQbGF5ZXJcbiJdfQ==
//# sourceURL=../coffee/player.coffee