// koffee 1.4.0
var Action, Actor, Camera, Material, ScreenText, Timer, Vector, klog,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

klog = require('kxk').klog;

Camera = require('./camera');

Action = require('./action');

Timer = require('./timer');

Actor = require('./actor');

Vector = require('./lib/vector');

Material = require('./material');

ScreenText = (function(superClass) {
    extend(ScreenText, superClass);

    ScreenText.init = function() {
        return this.font = new THREE.Font(require('three/examples/fonts/helvetiker_bold.typeface.json'));
    };

    function ScreenText(text) {
        var i, l, len, ref;
        this.text = text;
        ScreenText.__super__.constructor.apply(this, arguments);
        this.addAction(new Action(this, Action.SHOW, "show" + this.constructor.name, 500));
        this.addAction(new Action(this, Action.HIDE, "hide" + this.constructor.name, 500));
        this.scene = new THREE.Scene();
        if (this.lineHeight == null) {
            this.lineHeight = 1.3;
        }
        this.sun = new THREE.PointLight(0xffffff);
        this.sun.position.set(-1, 1, 10);
        this.scene.add(this.sun);
        this.width = this.height = 0;
        this.mesh = new THREE.Object3D;
        this.scene.add(this.mesh);
        this.fov = 20;
        this.aspect = world.screenSize.w / world.screenSize.h;
        this.near = 0.1;
        this.far = 100;
        this.camera = new THREE.PerspectiveCamera(this.fov, this.aspect, this.near, this.far);
        if (this.text != null) {
            ref = this.text.split('\n');
            for (i = 0, len = ref.length; i < len; i++) {
                l = ref[i];
                this.addText(l);
            }
            this.show();
        }
    }

    ScreenText.prototype.del = function() {
        this.scene.remove(this.mesh);
        this.scene.remove(this.sun);
        Timer.removeActionsOfObject(this);
        if (world.text === this) {
            return world.text = null;
        }
    };

    ScreenText.prototype.show = function() {
        return this.startTimedAction(this.getActionWithId(Action.SHOW));
    };

    ScreenText.prototype.addText = function(str, scaleFactor) {
        var geom, max, mesh, min, z;
        if (scaleFactor == null) {
            scaleFactor = 1;
        }
        geom = new THREE.TextGeometry(str, {
            font: ScreenText.font,
            size: 1 * scaleFactor,
            height: 4,
            bevelEnabled: true,
            bevelThickness: 0.1,
            bevelSize: 0.04
        });
        this.width = Math.max(str.length, this.width);
        geom.computeBoundingBox();
        min = geom.boundingBox.min;
        max = geom.boundingBox.max;
        mesh = new THREE.Mesh(geom, Material.text.clone());
        mesh.translateX(-(max.x - min.x) / 2);
        mesh.translateY(-this.height * this.lineHeight);
        this.mesh.add(mesh);
        this.mesh.position.set(0, this.height / 2 * this.lineHeight, 0);
        z = 20 + 4 * this.height;
        this.camera.position.copy(new Vector(0, 0, z));
        this.sun.position.set(-z / 5, z / 5, z);
        this.camera.lookAt(new Vector(0, 0, 0));
        return this.height += 1;
    };

    ScreenText.prototype.setOpacity = function(o) {
        var c, i, len, ref, results;
        ref = this.mesh.children;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
            c = ref[i];
            results.push(c.material.opacity = o);
        }
        return results;
    };

    ScreenText.prototype.resized = function(w, h) {
        this.aspect = w / h;
        this.camera.aspect = this.aspect;
        return this.camera.updateProjectionMatrix();
    };

    ScreenText.prototype.performAction = function(action) {
        switch (action.id) {
            case Action.SHOW:
                return this.setOpacity(action.getRelativeTime());
            case Action.HIDE:
                return this.setOpacity(1 - action.getRelativeTime());
        }
    };

    ScreenText.prototype.actionFinished = function(action) {
        switch (action.id) {
            case Action.HIDE:
                return this.del();
            case Action.SHOW:
                return this.setOpacity(1);
        }
    };

    ScreenText.prototype.fadeOut = function() {
        if (this.fadingOut) {
            return;
        }
        this.fadingOut = true;
        this.stopAction(this.getActionWithId(Action.SHOW));
        return this.startTimedAction(this.getActionWithId(Action.HIDE));
    };

    return ScreenText;

})(Actor);

module.exports = ScreenText;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/screentext.coffee