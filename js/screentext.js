// koffee 1.4.0
var Action, Actor, Camera, Material, ScreenText, Timer, Vector, klog,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

klog = require('kxk').klog;

Camera = require('./camera');

Action = require('./action');

Timer = require('./timer');

Actor = require('./actor');

Vector = require('./lib/vector');

Material = require('./material');

ScreenText = (function(superClass) {
    extend(ScreenText, superClass);

    ScreenText.geomCache = {};

    ScreenText.letters = {};

    ScreenText.init = function() {
        var c, geom, i, len, max, min, ref, results;
        this.font = new THREE.Font(require('three/examples/fonts/helvetiker_bold.typeface.json'));
        ref = "abcdefghijklmnopqrstuvwxyz0123456789.,-+:'?/\\[]()<>!";
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
            c = ref[i];
            geom = new THREE.TextGeometry("" + c, {
                font: ScreenText.font,
                size: 1,
                height: 4,
                bevelEnabled: true,
                bevelThickness: 0.1,
                bevelSize: 0.04
            });
            geom.computeBoundingBox();
            min = geom.boundingBox.min;
            max = geom.boundingBox.max;
            results.push(this.letters[c] = {
                geom: geom,
                width: max.x - min.x,
                height: max.y - min.y
            });
        }
        return results;
    };

    function ScreenText(text, material) {
        var aspect, i, l, len, ref;
        this.text = text;
        if (material == null) {
            material = Material.text;
        }
        this.fadeOut = bind(this.fadeOut, this);
        ScreenText.__super__.constructor.apply(this, arguments);
        this.addAction(new Action(this, Action.SHOW, "show" + this.constructor.name, 500));
        this.addAction(new Action(this, Action.HIDE, "hide" + this.constructor.name, 500));
        this.scene = new THREE.Scene();
        if (this.lineHeight == null) {
            this.lineHeight = 1.3;
        }
        this.sun1 = new THREE.PointLight(0xffffff);
        this.scene.add(this.sun1);
        this.sun2 = new THREE.PointLight(0xffffff);
        this.scene.add(this.sun2);
        this.height = 0;
        this.width = 0;
        this.cameraOffset = 1;
        this.mesh = new THREE.Object3D;
        this.scene.add(this.mesh);
        aspect = world.screenSize.w / world.screenSize.h;
        this.camera = new THREE.PerspectiveCamera(20, aspect, 1, 1000);
        if (this.text != null) {
            ref = this.text.split('\n');
            for (i = 0, len = ref.length; i < len; i++) {
                l = ref[i];
                this.addText(l, 1, material);
            }
            this.show();
        }
    }

    ScreenText.prototype.del = function() {
        this.scene.remove(this.mesh);
        this.scene.remove(this.sun1);
        this.scene.remove(this.sun2);
        Timer.removeActionsOfObject(this);
        if (world.text === this) {
            world.text = null;
            return world.helpShown = false;
        }
    };

    ScreenText.prototype.show = function() {
        return this.startTimedAction(this.getActionWithId(Action.SHOW));
    };

    ScreenText.prototype.addText = function(str, scaleFactor, material) {
        var c, group, i, len, letter, mesh, x, z;
        if (scaleFactor == null) {
            scaleFactor = 1;
        }
        if (material == null) {
            material = Material.text;
        }
        if (str.trim().length === 0) {
            this.height += 1;
            return;
        }
        x = 0;
        group = new THREE.Group;
        for (i = 0, len = str.length; i < len; i++) {
            c = str[i];
            c = c.toLowerCase();
            if (letter = ScreenText.letters[c]) {
                mesh = new THREE.Mesh(letter.geom, material);
                mesh.translateX(x);
                x += letter.width + 0.06;
                group.add(mesh);
            } else {
                x += 0.5;
            }
        }
        this.width = Math.max(this.width, x);
        group.translateX(-x / 2 * scaleFactor);
        group.translateY(-this.height * this.lineHeight * scaleFactor);
        group.scale.set(scaleFactor, scaleFactor, scaleFactor);
        this.mesh.add(group);
        this.mesh.position.set(0, this.height / 2 * this.lineHeight, 0);
        z = 20 + 4 * this.height;
        z = Math.max(z, parseInt(this.width * 4));
        this.cameraOffset = Math.max(this.cameraOffset, z);
        this.camera.position.copy(new Vector(0, 0, this.cameraOffset));
        this.sun1.position.set(-this.cameraOffset / 5, this.cameraOffset / 5, this.cameraOffset);
        this.sun2.position.set(this.cameraOffset / 5, this.cameraOffset / 5, this.cameraOffset);
        this.camera.lookAt(new THREE.Vector3(0, 0, 0));
        return this.height += 1;
    };

    ScreenText.prototype.setOpacity = function(o) {
        return this.mesh.traverse(function(c) {
            var ref;
            return (ref = c.material) != null ? ref.opacity = o : void 0;
        });
    };

    ScreenText.prototype.resized = function(w, h) {
        this.camera.aspect = w / h;
        return this.camera.updateProjectionMatrix();
    };

    ScreenText.prototype.performAction = function(action) {
        switch (action.id) {
            case Action.SHOW:
                return this.setOpacity(action.getRelativeTime());
            case Action.HIDE:
                return this.setOpacity(1 - action.getRelativeTime());
        }
    };

    ScreenText.prototype.actionFinished = function(action) {
        switch (action.id) {
            case Action.HIDE:
                return this.del();
            case Action.SHOW:
                return this.setOpacity(1);
        }
    };

    ScreenText.prototype.fadeOut = function() {
        if (this.fadingOut) {
            return;
        }
        this.fadingOut = true;
        this.stopAction(this.getActionWithId(Action.SHOW));
        return this.startTimedAction(this.getActionWithId(Action.HIDE));
    };

    return ScreenText;

})(Actor);

module.exports = ScreenText;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/screentext.coffee