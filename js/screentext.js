// koffee 1.4.0
var Action, Actor, Camera, Material, ScreenText, Timer, Vector, klog,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

klog = require('kxk').klog;

Camera = require('./camera');

Action = require('./action');

Timer = require('./timer');

Actor = require('./actor');

Vector = require('./lib/vector');

Material = require('./material');

ScreenText = (function(superClass) {
    extend(ScreenText, superClass);

    ScreenText.geomCache = {};

    ScreenText.letters = {};

    ScreenText.init = function() {
        var c, geom, i, len, max, min, ref, results;
        this.font = new THREE.Font(require('three/examples/fonts/helvetiker_bold.typeface.json'));
        ref = "abcdefghijklmnopqrstuvwxyz0123456789.,[]()<>'\"!?:";
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
            c = ref[i];
            geom = new THREE.TextGeometry(c, {
                font: ScreenText.font,
                size: 1,
                height: 4,
                bevelEnabled: true,
                bevelThickness: 0.1,
                bevelSize: 0.04
            });
            geom.computeBoundingBox();
            min = geom.boundingBox.min;
            max = geom.boundingBox.max;
            results.push(this.letters[c] = {
                geom: geom,
                width: max.x - min.x,
                height: max.y - min.y
            });
        }
        return results;
    };

    function ScreenText(text, material) {
        var aspect, i, l, len, ref;
        this.text = text;
        if (material == null) {
            material = Material.text;
        }
        this.fadeOut = bind(this.fadeOut, this);
        ScreenText.__super__.constructor.apply(this, arguments);
        this.addAction(new Action(this, Action.SHOW, "show" + this.constructor.name, 500));
        this.addAction(new Action(this, Action.HIDE, "hide" + this.constructor.name, 500));
        this.scene = new THREE.Scene();
        if (this.lineHeight == null) {
            this.lineHeight = 1.3;
        }
        this.sun = new THREE.PointLight(0xffffff);
        this.sun.position.set(-1, 1, 10);
        this.scene.add(this.sun);
        this.height = 0;
        this.width = 0;
        this.cameraOffset = 1;
        this.mesh = new THREE.Object3D;
        this.scene.add(this.mesh);
        aspect = world.screenSize.w / world.screenSize.h;
        this.camera = new THREE.PerspectiveCamera(20, aspect, 0.1, 100);
        if (this.text != null) {
            ref = this.text.split('\n');
            for (i = 0, len = ref.length; i < len; i++) {
                l = ref[i];
                this.addText(l, 1, material);
            }
            this.show();
        }
    }

    ScreenText.prototype.del = function() {
        this.scene.remove(this.mesh);
        this.scene.remove(this.sun);
        Timer.removeActionsOfObject(this);
        if (world.text === this) {
            world.text = null;
            return world.helpShown = false;
        }
    };

    ScreenText.prototype.show = function() {
        return this.startTimedAction(this.getActionWithId(Action.SHOW));
    };

    ScreenText.prototype.addText = function(str, scaleFactor, material) {
        var c, group, i, len, letter, mesh, x, z;
        if (scaleFactor == null) {
            scaleFactor = 1;
        }
        if (material == null) {
            material = Material.text;
        }
        if (str.trim().length === 0) {
            this.height += 1;
            return;
        }
        x = 0;
        group = new THREE.Group;
        for (i = 0, len = str.length; i < len; i++) {
            c = str[i];
            c = c.toLowerCase();
            if (letter = ScreenText.letters[c]) {
                mesh = new THREE.Mesh(letter.geom, material);
                mesh.translateX(x);
                x += letter.width + 0.06;
                group.add(mesh);
            } else {
                x += 0.5;
            }
        }
        this.width = Math.max(this.width, x);
        group.translateX(-x / 2 * scaleFactor);
        group.translateY(-this.height * this.lineHeight * scaleFactor);
        group.scale.set(scaleFactor, scaleFactor, scaleFactor);
        this.mesh.add(group);
        this.mesh.position.set(0, this.height / 2 * this.lineHeight, 0);
        z = 20 + 4 * this.height;
        z = Math.max(z, parseInt(this.width * 4));
        this.cameraOffset = Math.max(this.cameraOffset, z);
        this.camera.position.copy(new Vector(0, 0, this.cameraOffset));
        this.sun.position.set(-this.cameraOffset / 5, this.cameraOffset / 5, this.cameraOffset);
        this.camera.lookAt(new Vector(0, 0, 0));
        return this.height += 1;
    };

    ScreenText.prototype.setOpacity = function(o) {
        return this.mesh.traverse(function(c) {
            var ref;
            return (ref = c.material) != null ? ref.opacity = o : void 0;
        });
    };

    ScreenText.prototype.resized = function(w, h) {
        this.camera.aspect = w / h;
        return this.camera.updateProjectionMatrix();
    };

    ScreenText.prototype.performAction = function(action) {
        switch (action.id) {
            case Action.SHOW:
                return this.setOpacity(action.getRelativeTime());
            case Action.HIDE:
                return this.setOpacity(1 - action.getRelativeTime());
        }
    };

    ScreenText.prototype.actionFinished = function(action) {
        switch (action.id) {
            case Action.HIDE:
                return this.del();
            case Action.SHOW:
                return this.setOpacity(1);
        }
    };

    ScreenText.prototype.fadeOut = function() {
        if (this.fadingOut) {
            return;
        }
        this.fadingOut = true;
        this.stopAction(this.getActionWithId(Action.SHOW));
        return this.startTimedAction(this.getActionWithId(Action.HIDE));
    };

    return ScreenText;

})(Actor);

module.exports = ScreenText;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyZWVudGV4dC5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQU9BLElBQUEsZ0VBQUE7SUFBQTs7OztBQUFFLE9BQVMsT0FBQSxDQUFRLEtBQVI7O0FBQ1gsTUFBQSxHQUFXLE9BQUEsQ0FBUSxVQUFSOztBQUNYLE1BQUEsR0FBVyxPQUFBLENBQVEsVUFBUjs7QUFDWCxLQUFBLEdBQVcsT0FBQSxDQUFRLFNBQVI7O0FBQ1gsS0FBQSxHQUFXLE9BQUEsQ0FBUSxTQUFSOztBQUNYLE1BQUEsR0FBVyxPQUFBLENBQVEsY0FBUjs7QUFDWCxRQUFBLEdBQVcsT0FBQSxDQUFRLFlBQVI7O0FBRUw7OztJQUVGLFVBQUMsQ0FBQSxTQUFELEdBQVk7O0lBRVosVUFBQyxDQUFBLE9BQUQsR0FBVTs7SUFFVixVQUFDLENBQUEsSUFBRCxHQUFPLFNBQUE7QUFFSCxZQUFBO1FBQUEsSUFBQyxDQUFBLElBQUQsR0FBUSxJQUFJLEtBQUssQ0FBQyxJQUFWLENBQWUsT0FBQSxDQUFRLG9EQUFSLENBQWY7QUFFUjtBQUFBO2FBQUEscUNBQUE7O1lBRUksSUFBQSxHQUFPLElBQUksS0FBSyxDQUFDLFlBQVYsQ0FBdUIsQ0FBdkIsRUFDSDtnQkFBQSxJQUFBLEVBQU0sVUFBVSxDQUFDLElBQWpCO2dCQUNBLElBQUEsRUFBTSxDQUROO2dCQUVBLE1BQUEsRUFBUSxDQUZSO2dCQUdBLFlBQUEsRUFBYyxJQUhkO2dCQUlBLGNBQUEsRUFBZ0IsR0FKaEI7Z0JBS0EsU0FBQSxFQUFXLElBTFg7YUFERztZQVFQLElBQUksQ0FBQyxrQkFBTCxDQUFBO1lBQ0EsR0FBQSxHQUFNLElBQUksQ0FBQyxXQUFXLENBQUM7WUFDdkIsR0FBQSxHQUFNLElBQUksQ0FBQyxXQUFXLENBQUM7eUJBRXZCLElBQUMsQ0FBQSxPQUFRLENBQUEsQ0FBQSxDQUFULEdBQ0k7Z0JBQUEsSUFBQSxFQUFNLElBQU47Z0JBQ0EsS0FBQSxFQUFPLEdBQUcsQ0FB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ZDtBQUFBLGlCQUNTLE1BQU0sQ0FBQyxJQURoQjt1QkFFUSxJQUFDLENBQUEsR0FBRCxDQUFBO0FBRlIsaUJBR1MsTUFBTSxDQUFDLElBSGhCO3VCQUlRLElBQUMsQ0FBQSxVQUFELENBQVksQ0FBWjtBQUpSO0lBRlk7O3lCQVFoQixPQUFBLEdBQVMsU0FBQTtRQUVMLElBQVUsSUFBQyxDQUFBLFNBQVg7QUFBQSxtQkFBQTs7UUFDQSxJQUFDLENBQUEsU0FBRCxHQUFhO1FBQ2IsSUFBQyxDQUFBLFVBQUQsQ0FBWSxJQUFDLENBQUEsZUFBRCxDQUFpQixNQUFNLENBQUMsSUFBeEIsQ0FBWjtlQUNBLElBQUMsQ0FBQSxnQkFBRCxDQUFrQixJQUFDLENBQUEsZUFBRCxDQUFpQixNQUFNLENBQUMsSUFBeEIsQ0FBbEI7SUFMSzs7OztHQTlIWTs7QUFxSXpCLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiXG4jICAgIDAwMDAwMDAgICAwMDAwMDAwICAwMDAwMDAwMCAgIDAwMDAwMDAwICAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMDAgIDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwMFxuIyAgIDAwMCAgICAgICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgIDAwMDAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgICAgIDAwMCAwMDAgICAgICAwMDAgICBcbiMgICAwMDAwMDAwICAgMDAwICAgICAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgMCAwMDAgICAgIDAwMCAgICAgMDAwMDAwMCAgICAgMDAwMDAgICAgICAgMDAwICAgXG4jICAgICAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgMDAwICAwMDAwICAgICAwMDAgICAgIDAwMCAgICAgICAgMDAwIDAwMCAgICAgIDAwMCAgIFxuIyAgIDAwMDAwMDAgICAgMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAwMDAwMCAgMDAwICAgMDAwICAgICAwMDAgICBcblxueyBrbG9nIH0gPSByZXF1aXJlICdreGsnXG5DYW1lcmEgICA9IHJlcXVpcmUgJy4vY2FtZXJhJ1xuQWN0aW9uICAgPSByZXF1aXJlICcuL2FjdGlvbidcblRpbWVyICAgID0gcmVxdWlyZSAnLi90aW1lcidcbkFjdG9yICAgID0gcmVxdWlyZSAnLi9hY3RvcidcblZlY3RvciAgID0gcmVxdWlyZSAnLi9saWIvdmVjdG9yJ1xuTWF0ZXJpYWwgPSByZXF1aXJlICcuL21hdGVyaWFsJ1xuXG5jbGFzcyBTY3JlZW5UZXh0IGV4dGVuZHMgQWN0b3IgICAgXG4gICAgXG4gICAgQGdlb21DYWNoZToge31cbiAgICBcbiAgICBAbGV0dGVyczoge31cbiAgICBcbiAgICBAaW5pdDogLT4gXG4gICAgICAgIFxuICAgICAgICBAZm9udCA9IG5ldyBUSFJFRS5Gb250IHJlcXVpcmUgJ3RocmVlL2V4YW1wbGVzL2ZvbnRzL2hlbHZldGlrZXJfYm9sZC50eXBlZmFjZS5qc29uJ1xuICAgICAgICBcbiAgICAgICAgZm9yIGMgaW4gXCJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkuLFtdKCk8PidcXFwiIT86XCJcblxuICAgICAgICAgICAgZ2VvbSA9IG5ldyBUSFJFRS5UZXh0R2VvbWV0cnkgYywgXG4gICAgICAgICAgICAgICAgZm9udDogU2NyZWVuVGV4dC5mb250XG4gICAgICAgICAgICAgICAgc2l6ZTogMVxuICAgICAgICAgICAgICAgIGhlaWdodDogNFxuICAgICAgICAgICAgICAgIGJldmVsRW5hYmxlZDogdHJ1ZVxuICAgICAgICAgICAgICAgIGJldmVsVGhpY2tuZXNzOiAwLjFcbiAgICAgICAgICAgICAgICBiZXZlbFNpemU6IDAuMDRcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBnZW9tLmNvbXB1dGVCb3VuZGluZ0JveCgpXG4gICAgICAgICAgICBtaW4gPSBnZW9tLmJvdW5kaW5nQm94Lm1pblxuICAgICAgICAgICAgbWF4ID0gZ2VvbS5ib3VuZGluZ0JveC5tYXhcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBAbGV0dGVyc1tjXSA9IFxuICAgICAgICAgICAgICAgIGdlb206IGdlb21cbiAgICAgICAgICAgICAgICB3aWR0aDogbWF4LnggLSBtaW4ueFxuICAgICAgICAgICAgICAgIGhlaWdodDogbWF4LnkgLSBtaW4ueVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgQDogKEB0ZXh0LCBtYXRlcmlhbD1NYXRlcmlhbC50ZXh0KSAtPlxuICAgICAgICBcbiAgICAgICAgc3VwZXJcbiAgICAgICAgXG4gICAgICAgIEBhZGRBY3Rpb24gbmV3IEFjdGlvbiBALCBBY3Rpb24uU0hPVywgXCJzaG93I3tAY29uc3RydWN0b3IubmFtZX1cIiA1MDBcbiAgICAgICAgQGFkZEFjdGlvbiBuZXcgQWN0aW9uIEAsIEFjdGlvbi5ISURFLCBcImhpZGUje0Bjb25zdHJ1Y3Rvci5uYW1lfVwiIDUwMFxuICAgICAgICAgICAgICAgIFxuICAgICAgICBAc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKVxuICAgICAgICBAbGluZUhlaWdodCA9IDEuMyBpZiBub3QgQGxpbmVIZWlnaHQ/XG4gICAgICAgIEBzdW4gPSBuZXcgVEhSRUUuUG9pbnRMaWdodCAweGZmZmZmZlxuICAgICAgICBAc3VuLnBvc2l0aW9uLnNldCAtMSAxIDEwXG4gICAgICAgIEBzY2VuZS5hZGQgQHN1blxuICAgICAgICBcbiAgICAgICAgQGhlaWdodCA9IDBcbiAgICAgICAgQHdpZHRoID0gMFxuICAgICAgICBAY2FtZXJhT2Zmc2V0ID0gMVxuICAgICAgICBAbWVzaCA9IG5ldyBUSFJFRS5PYmplY3QzRFxuICAgICAgICBAc2NlbmUuYWRkIEBtZXNoXG4gICAgICAgIGFzcGVjdCA9IHdvcmxkLnNjcmVlblNpemUudy93b3JsZC5zY3JlZW5TaXplLmhcbiAgICAgICAgQGNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSAyMCwgYXNwZWN0LCAwLjEsIDEwMFxuICAgICAgICBpZiBAdGV4dD9cbiAgICAgICAgICAgIGZvciBsIGluIEB0ZXh0LnNwbGl0ICdcXG4nXG4gICAgICAgICAgICAgICAgQGFkZFRleHQgbCwgMSwgbWF0ZXJpYWxcbiAgICAgICAgICAgIEBzaG93KClcbiAgICBcbiAgICBkZWw6IC0+XG4gICAgICAgIFxuICAgICAgICBAc2NlbmUucmVtb3ZlIEBtZXNoXG4gICAgICAgIEBzY2VuZS5yZW1vdmUgQHN1blxuICAgICAgICBUaW1lci5yZW1vdmVBY3Rpb25zT2ZPYmplY3QgQFxuICAgICAgICBpZiB3b3JsZC50ZXh0ID09IEBcbiAgICAgICAgICAgIHdvcmxkLnRleHQgPSBudWxsIFxuICAgICAgICAgICAgd29ybGQuaGVscFNob3duID0gZmFsc2VcbiAgICBcbiAgICBzaG93OiAtPiBAc3RhcnRUaW1lZEFjdGlvbiBAZ2V0QWN0aW9uV2l0aElkIEFjdGlvbi5TSE9XXG4gICAgXG4gICAgYWRkVGV4dDogKHN0ciwgc2NhbGVGYWN0b3I9MSwgbWF0ZXJpYWw9TWF0ZXJpYWwudGV4dCkgLT5cbiAgICAgICAgXG4gICAgICAgIGlmIHN0ci50cmltKCkubGVuZ3RoID09IDBcbiAgICAgICAgICAgIEBoZWlnaHQgKz0gMVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIFxuICAgICAgICB4ID0gMFxuICAgICAgICBncm91cCA9IG5ldyBUSFJFRS5Hcm91cFxuICAgICAgICBmb3IgYyBpbiBzdHJcbiAgICAgICAgICAgIGMgPSBjLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgIGlmIGxldHRlciA9IFNjcmVlblRleHQubGV0dGVyc1tjXVxuICAgICAgICAgICAgICAgIG1lc2ggPSBuZXcgVEhSRUUuTWVzaCBsZXR0ZXIuZ2VvbSwgbWF0ZXJpYWxcbiAgICAgICAgICAgICAgICBtZXNoLnRyYW5zbGF0ZVggeFxuICAgICAgICAgICAgICAgIHggKz0gbGV0dGVyLndpZHRoICsgMC4wNlxuICAgICAgICAgICAgICAgIGdyb3VwLmFkZCBtZXNoXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgeCArPSAwLjVcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgQHdpZHRoID0gTWF0aC5tYXggQHdpZHRoLCB4XG4gICAgICAgIGdyb3VwLnRyYW5zbGF0ZVggLXgvMiAqIHNjYWxlRmFjdG9yIFxuICAgICAgICBncm91cC50cmFuc2xhdGVZIC1AaGVpZ2h0ICogQGxpbmVIZWlnaHQgKiBzY2FsZUZhY3RvclxuICAgICAgICBncm91cC5zY2FsZS5zZXQgc2NhbGVGYWN0b3IsIHNjYWxlRmFjdG9yLCBzY2FsZUZhY3RvclxuICAgICAgICBAbWVzaC5hZGQgZ3JvdXBcbiAgICAgICAgICAgIFxuICAgICAgICBAbWVzaC5wb3NpdGlvbi5zZXQgMCwgQGhlaWdodC8yKkBsaW5lSGVpZ2h0LCAwXG4gICAgICAgIFxuICAgICAgICAjIGFkanVzdCBwcm9qZWN0aW9uXG4gICAgICAgIHogPSAyMCs0KkBoZWlnaHRcbiAgICAgICAgeiA9IE1hdGgubWF4IHosIHBhcnNlSW50IEB3aWR0aCo0XG5cbiAgICAgICAgQGNhbWVyYU9mZnNldCA9IE1hdGgubWF4IEBjYW1lcmFPZmZzZXQsIHpcbiAgICAgICAgQGNhbWVyYS5wb3NpdGlvbi5jb3B5IG5ldyBWZWN0b3IgMCAwIEBjYW1lcmFPZmZzZXRcbiAgICAgICAgQHN1bi5wb3NpdGlvbi5zZXQgLUBjYW1lcmFPZmZzZXQvNSBAY2FtZXJhT2Zmc2V0LzUgQGNhbWVyYU9mZnNldFxuICAgICAgICBAY2FtZXJhLmxvb2tBdCBuZXcgVmVjdG9yIDAgMCAwXG4gICAgICAgIEBoZWlnaHQgKz0gMVxuXG4gICAgc2V0T3BhY2l0eTogKG8pIC0+XG4gICAgICAgIFxuICAgICAgICBAbWVzaC50cmF2ZXJzZSAoYykgLT4gYy5tYXRlcmlhbD8ub3BhY2l0eSA9IG9cbiAgICAgICAgICAgIFxuICAgIHJlc2l6ZWQ6ICh3LGgpIC0+XG4gICAgICAgIFxuICAgICAgICBAY2FtZXJhLmFzcGVjdCA9IHcvaFxuICAgICAgICBAY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKVxuICAgIFxuICAgIHBlcmZvcm1BY3Rpb246IChhY3Rpb24pIC0+XG4gICAgICAgIFxuICAgICAgICBzd2l0Y2ggYWN0aW9uLmlkXG4gICAgICAgICAgICB3aGVuIEFjdGlvbi5TSE9XXG4gICAgICAgICAgICAgICAgQHNldE9wYWNpdHkgYWN0aW9uLmdldFJlbGF0aXZlVGltZSgpXG4gICAgICAgICAgICB3aGVuIEFjdGlvbi5ISURFXG4gICAgICAgICAgICAgICAgQHNldE9wYWNpdHkgMSAtIGFjdGlvbi5nZXRSZWxhdGl2ZVRpbWUoKVxuICAgIFxuICAgIGFjdGlvbkZpbmlzaGVkOiAoYWN0aW9uKSAtPlxuICAgICAgICBcbiAgICAgICAgc3dpdGNoIGFjdGlvbi5pZFxuICAgICAgICAgICAgd2hlbiBBY3Rpb24uSElERVxuICAgICAgICAgICAgICAgIEBkZWwoKVxuICAgICAgICAgICAgd2hlbiBBY3Rpb24uU0hPV1xuICAgICAgICAgICAgICAgIEBzZXRPcGFjaXR5IDFcbiAgICAgICAgICAgIFxuICAgIGZhZGVPdXQ6ID0+IFxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGlmIEBmYWRpbmdPdXRcbiAgICAgICAgQGZhZGluZ091dCA9IHRydWVcbiAgICAgICAgQHN0b3BBY3Rpb24gQGdldEFjdGlvbldpdGhJZCBBY3Rpb24uU0hPV1xuICAgICAgICBAc3RhcnRUaW1lZEFjdGlvbiBAZ2V0QWN0aW9uV2l0aElkIEFjdGlvbi5ISURFXG4gICAgXG5tb2R1bGUuZXhwb3J0cyA9IFNjcmVlblRleHRcbiAgICAiXX0=
//# sourceURL=../coffee/screentext.coffee