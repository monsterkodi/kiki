// koffee 1.4.0
var _, config, dissect, last, ranges, sortRanges;

last = require('./tools').last;

_ = require('lodash');

config = function(patterns) {
    var a, p, results;
    results = [];
    for (p in patterns) {
        a = patterns[p];
        results.push([new RegExp(p), a]);
    }
    return results;
};

sortRanges = function(rgs) {
    return rgs.sort(function(a, b) {
        if (a.start === b.start) {
            if (a.match.length === b.match.length) {
                return a.index - b.index;
            } else {
                return a.match.length - b.match.length;
            }
        } else {
            return a.start - b.start;
        }
    });
};

ranges = function(regexes, str) {
    var arg, gi, gs, i, j, k, l, match, r, ref, ref1, reg, rgs, s, value;
    rgs = [];
    if (str == null) {
        return rgs;
    }
    for (r = k = 0, ref = regexes.length; 0 <= ref ? k < ref : k > ref; r = 0 <= ref ? ++k : --k) {
        reg = regexes[r][0];
        arg = regexes[r][1];
        i = 0;
        s = str;
        while (s.length) {
            match = reg.exec(s);
            if (match == null) {
                break;
            }
            if (match.length === 1) {
                rgs.push({
                    start: match.index + i,
                    match: match[0],
                    value: arg,
                    index: r
                });
                i += match.index + match[0].length;
                s = str.slice(i);
            } else {
                gs = 0;
                for (j = l = 0, ref1 = match.length - 2; 0 <= ref1 ? l <= ref1 : l >= ref1; j = 0 <= ref1 ? ++l : --l) {
                    value = arg;
                    if (_.isArray(value) && j < value.length) {
                        value = value[j];
                    } else if (_.isObject(value) && j < _.size(value)) {
                        value = [_.keys(value)[j], value[_.keys(value)[j]]];
                    }
                    gi = match[0].slice(gs).indexOf(match[j + 1]);
                    rgs.push({
                        start: match.index + i + gs + gi,
                        match: match[j + 1],
                        value: value,
                        index: r
                    });
                    gs += match[j + 1].length;
                }
                i += match.index + match[0].length;
                s = str.slice(i);
            }
        }
    }
    return sortRanges(rgs);
};

dissect = function(ranges, opt) {
    var c, d, di, i, k, l, len, len1, len2, len3, m, n, o, p, pn, q, r, ref, ref1, ref2, ref3, ref4, ref5, ref6, rg, ri, si, t, u;
    if (opt == null) {
        opt = {
            join: false
        };
    }
    if (!ranges.length) {
        return [];
    }
    di = [];
    for (ri = k = 0, ref = ranges.length; 0 <= ref ? k < ref : k > ref; ri = 0 <= ref ? ++k : --k) {
        rg = ranges[ri];
        di.push([rg.start, ri]);
        di.push([rg.start + rg.match.length]);
    }
    di.sort(function(a, b) {
        if (a[0] === b[0]) {
            return a[1] - b[1];
        } else {
            return a[0] - b[0];
        }
    });
    d = [];
    si = -1;
    for (i = l = 0, ref1 = di.length - 1; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
        if (di[i][0] > si) {
            si = di[i][0];
            d.push({
                start: si,
                cid: 0,
                cls: []
            });
        }
    }
    p = 0;
    for (ri = m = 0, ref2 = ranges.length; 0 <= ref2 ? m < ref2 : m > ref2; ri = 0 <= ref2 ? ++m : --m) {
        rg = ranges[ri];
        while (d[p].start < rg.start) {
            p += 1;
        }
        pn = p;
        while (d[pn].start < rg.start + rg.match.length) {
            if ((d[pn].cid < rg.index || opt.join) && (rg.value != null)) {
                if (rg.value.split == null) {
                    ref3 = rg.value;
                    for (n = 0, len = ref3.length; n < len; n++) {
                        r = ref3[n];
                        if (r.split == null) {
                            continue;
                        }
                        ref4 = r.split('.');
                        for (o = 0, len1 = ref4.length; o < len1; o++) {
                            c = ref4[o];
                            if (d[pn].cls.indexOf(c) < 0) {
                                d[pn].cls.push(c);
                            }
                        }
                    }
                } else {
                    ref5 = rg.value.split('.');
                    for (q = 0, len2 = ref5.length; q < len2; q++) {
                        c = ref5[q];
                        if (d[pn].cls.indexOf(c) < 0) {
                            d[pn].cls.push(c);
                        }
                    }
                }
                d[pn].cid = rg.index;
            }
            if (pn + 1 < d.length) {
                if (!d[pn].match) {
                    d[pn].match = rg.match.substr(d[pn].start - rg.start, d[pn + 1].start - d[pn].start);
                }
                pn += 1;
            } else {
                if (!d[pn].match) {
                    d[pn].match = rg.match.substr(d[pn].start - rg.start);
                }
                break;
            }
        }
    }
    d = d.filter(function(i) {
        var ref6;
        return (ref6 = i.match) != null ? ref6.trim().length : void 0;
    });
    for (t = 0, len3 = d.length; t < len3; t++) {
        i = d[t];
        i.clss = i.cls.join(' ');
    }
    if (d.length > 1) {
        for (i = u = ref6 = d.length - 2; ref6 <= 0 ? u <= 0 : u >= 0; i = ref6 <= 0 ? ++u : --u) {
            if (d[i].start + d[i].match.length === d[i + 1].start) {
                if (d[i].clss === d[i + 1].clss) {
                    d[i].match += d[i + 1].match;
                    d.splice(i + 1, 1);
                }
            }
        }
    }
    return d;
};

module.exports = {
    config: config,
    ranges: ranges,
    dissect: dissect,
    sortRanges: sortRanges
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/tools/matchr.coffee