// koffee 1.4.0
var _, fs, log, os, path, pos, sfmt;

pos = require('./pos');

log = require('./log');

_ = require('lodash');

sfmt = require('sprintf-js');

path = require('path');

os = require('os');

fs = require('fs');

module.exports = {
    def: function(c, d) {
        if (c != null) {
            return _.defaults(_.clone(c), d);
        } else if (d != null) {
            return _.clone(d);
        } else {
            return {};
        }
    },
    del: function(l, e) {
        return _.remove(l, function(n) {
            return n === e;
        });
    },
    last: function(a) {
        if (a != null ? a.length : void 0) {
            return a[a.length - 1];
        }
    },
    first: function(a) {
        if (a != null ? a.length : void 0) {
            return a[0];
        }
    },
    startOf: function(r) {
        return r[0];
    },
    endOf: function(r) {
        return r[0] + Math.max(1, r[1] - r[0]);
    },
    clamp: function(r1, r2, v) {
        var ref;
        if (r1 > r2) {
            ref = [r2, r1], r1 = ref[0], r2 = ref[1];
        }
        if (r1 != null) {
            v = Math.max(v, r1);
        }
        if (r2 != null) {
            v = Math.min(v, r2);
        }
        return v;
    },
    absMax: function(a, b) {
        if (Math.abs(a) >= Math.abs(b)) {
            return a;
        } else {
            return b;
        }
    },
    absMin: function(a, b) {
        if (Math.abs(a) < Math.abs(b)) {
            return a;
        } else {
            return b;
        }
    },
    randInt: function(r) {
        return Math.floor(Math.random() * r);
    },
    shortCount: function(v) {
        v = parseInt(v);
        switch (false) {
            case !(v > 999999):
                return (Math.floor(v / 1000000)) + "M";
            case !(v > 999):
                return (Math.floor(v / 1000)) + "k";
            default:
                return "" + v;
        }
    },
    rad2deg: function(r) {
        return 180 * r / Math.PI;
    },
    resolve: function(p) {
        return path.normalize(path.resolve(p.replace(/^\~/, process.env.HOME)));
    },
    unresolve: function(p) {
        return p.replace(os.homedir(), "~");
    },
    fileName: function(p) {
        return path.basename(p, path.extname(p));
    },
    extName: function(p) {
        return path.extname(p).slice(1);
    },
    fileList: function(paths, opt) {
        var dirfiles, err, f, files, i, l, len, p, ref, stat;
        if (opt == null) {
            opt = {
                ignoreHidden: true,
                logError: true
            };
        }
        files = [];
        if (typeof paths === 'string') {
            paths = [paths];
        }
        for (i = 0, len = paths.length; i < len; i++) {
            p = paths[i];
            try {
                ref = p.split(':'), p = ref[0], l = ref[1];
                stat = fs.statSync(p);
                if (stat.isDirectory()) {
                    dirfiles = fs.readdirSync(p);
                    dirfiles = (function() {
                        var j, len1, results;
                        results = [];
                        for (j = 0, len1 = dirfiles.length; j < len1; j++) {
                            f = dirfiles[j];
                            results.push(path.join(p, f));
                        }
                        return results;
                    })();
                    dirfiles = (function() {
                        var j, len1, results;
                        results = [];
                        for (j = 0, len1 = dirfiles.length; j < len1; j++) {
                            f = dirfiles[j];
                            if (fs.statSync(f).isFile()) {
                                results.push(f);
                            }
                        }
                        return results;
                    })();
                    if (opt.ignoreHidden) {
                        dirfiles = dirfiles.filter(function(f) {
                            return !path.basename(f).startsWith('.');
                        });
                    }
                    files = files.concat(dirfiles);
                } else if (stat.isFile()) {
                    if (opt.ignoreHidden && path.basename(p).startsWith('.')) {
                        continue;
                    }
                    if (l != null) {
                        p += ":" + l;
                    }
                    files.push(p);
                }
            } catch (error) {
                err = error;
                if (opt.logError) {
                    console.log('tools.fileList.error:', err);
                }
            }
        }
        return files;
    },
    fileExists: function(file) {
        try {
            if (fs.statSync(file).isFile()) {
                fs.accessSync(file, fs.R_OK | fs.W_OK);
                return true;
            }
        } catch (error) {
            return false;
        }
    },
    dirExists: function(dir) {
        try {
            if (fs.statSync(dir).isDirectory()) {
                fs.accessSync(dir, fs.R_OK);
                return true;
            }
        } catch (error) {
            return false;
        }
    },
    relative: function(absolute, to) {
        var d, r, unresolved;
        if (!(absolute != null ? absolute.startsWith('/') : void 0)) {
            return absolute;
        }
        d = path.normalize(path.resolve(to.replace(/\~/, process.env.HOME)));
        r = path.relative(d, absolute);
        if (r.startsWith('../../')) {
            unresolved = absolute.replace(os.homedir(), "~");
            if (unresolved.length < r.length) {
                r = unresolved;
            }
        }
        if (absolute.length < r.length) {
            r = absolute;
        }
        return r;
    },
    swapExt: function(p, ext) {
        return path.join(path.dirname(p), path.basename(p, path.extname(p))) + ext;
    },
    setStyle: function(selector, key, value, ssid) {
        var i, len, ref, rule;
        if (ssid == null) {
            ssid = 0;
        }
        ref = document.styleSheets[ssid].cssRules;
        for (i = 0, len = ref.length; i < len; i++) {
            rule = ref[i];
            if (rule.selectorText === selector) {
                rule.style[key] = value;
                return;
            }
        }
    },
    getStyle: function(selector, key, value, ssid) {
        var i, len, ref, rule;
        if (ssid == null) {
            ssid = 0;
        }
        ref = document.styleSheets[ssid].cssRules;
        for (i = 0, len = ref.length; i < len; i++) {
            rule = ref[i];
            if (rule.selectorText === selector) {
                return rule.style[key];
            }
        }
        return value;
    },
    $: function(idOrClass, e) {
        if (e == null) {
            e = document;
        }
        if (idOrClass.startsWith('.')) {
            return e.getElementsByClassName(idOrClass.substr(1).split('.').join(" "))[0];
        } else {
            return e.getElementById(idOrClass);
        }
    },
    absPos: function(event) {
        event = event != null ? event : window.event;
        if (isNaN(window.scrollX)) {
            return pos(event.clientX + document.documentElement.scrollLeft + document.body.scrollLeft, event.clientY + document.documentElement.scrollTop + document.body.scrollTop);
        } else {
            return pos(event.clientX + window.scrollX, event.clientY + window.scrollY);
        }
    },
    sw: function() {
        return document.body.clientWidth;
    },
    sh: function() {
        return document.body.clientHeight;
    }
};

if (!String.prototype.splice) {
    String.prototype.splice = function(start, delCount, newSubStr) {
        if (newSubStr == null) {
            newSubStr = '';
        }
        return this.slice(0, start) + newSubStr + this.slice(start + Math.abs(delCount));
    };
    String.prototype.strip = String.prototype.trim;
    String.prototype.fmt = function() {
        return sfmt.vsprintf(this, [].slice.call(arguments));
    };
}

if (!Array.prototype.reversed) {
    Array.prototype.reversed = function() {
        return _.clone(this).reverse();
    };
}

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/tools/tools.coffee