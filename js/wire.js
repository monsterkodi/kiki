// koffee 1.4.0
var Face, Gate, Geom, Item, Material, Vector, Wire,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

Item = require('./item');

Geom = require('./geom');

Face = require('./face');

Gate = require('./gate');

Vector = require('./lib/vector');

Material = require('./material');

Wire = (function(superClass) {
    extend(Wire, superClass);

    Wire.UP = 1;

    Wire.RIGHT = 2;

    Wire.DOWN = 4;

    Wire.LEFT = 8;

    Wire.VERTICAL = 5;

    Wire.HORIZONTAL = 10;

    Wire.ALL = 15;

    function Wire(face, connections) {
        this.face = face != null ? face : Face.Z;
        this.connections = connections != null ? connections : Wire.ALL;
        this.glow = null;
        this.active = false;
        this.value = 1.0;
        Wire.__super__.constructor.apply(this, arguments);
        this.SWITCH_OFF_EVENT = this.addEventWithName("off");
        this.SWITCH_ON_EVENT = this.addEventWithName("on");
        this.SWITCHED_EVENT = this.addEventWithName("switched");
    }

    Wire.prototype.del = function() {
        var ref, ref1;
        if ((ref = this.glow) != null) {
            ref.material.map.dispose();
        }
        if ((ref1 = this.glow) != null) {
            ref1.material.dispose();
        }
        this.mesh.remove(this.glow);
        this.mesh.remove(this.wire);
        this.mesh.geometry.dispose();
        this.wire.geometry.dispose();
        return Wire.__super__.del.apply(this, arguments);
    };

    Wire.prototype.createMesh = function() {
        var geom, h, o, plane, s, w;
        o = 0.005;
        geom = new THREE.Geometry;
        h = 0.1;
        s = 0.5;
        w = s + o;
        if (this.connections & Wire.RIGHT) {
            plane = new THREE.PlaneGeometry(w, h);
            plane.translate(w / 2, 0, -s + o);
            geom.merge(plane);
            plane.dispose();
        }
        if (this.connections & Wire.LEFT) {
            plane = new THREE.PlaneGeometry(w, h);
            plane.translate(-w / 2, 0, -s + o);
            geom.merge(plane);
            plane.dispose();
        }
        if (this.connections & Wire.UP) {
            plane = new THREE.PlaneGeometry(h, w);
            plane.translate(0, w / 2, -s + o);
            geom.merge(plane);
            plane.dispose();
        }
        if (this.connections & Wire.DOWN) {
            plane = new THREE.PlaneGeometry(h, w);
            plane.translate(0, -w / 2, -s + o);
            geom.merge(plane);
            plane.dispose();
        }
        this.wire = new THREE.Mesh(geom, Material.wire);
        this.mesh = new THREE.Mesh(Geom.wire(), Material.wirePlate);
        this.mesh.add(this.wire);
        this.mesh.receiveShadow = true;
        this.mesh.position.copy(Face.normal(this.face).mul(-(0.5 + o)));
        return this.mesh.quaternion.copy(Face.orientation(this.face));
    };

    Wire.prototype.updateActive = function() {
        var j, len, ref, results, wire;
        ref = this.neighborWires();
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
            wire = ref[j];
            if (wire.active) {
                results.push(this.setActive(true));
            } else {
                results.push(void 0);
            }
        }
        return results;
    };

    Wire.prototype.setActive = function(active) {
        var gate, j, len, neighbors, wire;
        if (this.active !== active) {
            this.active = active;
            neighbors = this.neighborWires();
            for (j = 0, len = neighbors.length; j < len; j++) {
                wire = neighbors[j];
                wire.setActive(this.active);
            }
            gate = world.getObjectOfTypeAtPos(Gate, this.getPos());
            if (gate != null) {
                gate.setActive(this.active);
            }
            if (this.active) {
                if (this.glow == null) {
                    this.glow = new THREE.Sprite(Material.glow);
                    this.glow.position.set(0, 0, -0.3);
                    this.glow.scale.set(.5, .5, 1);
                    this.glow.renderOrder = 999;
                    this.mesh.add(this.glow);
                }
            } else if (this.glow != null) {
                this.glow.material.map.dispose();
                this.glow.material.dispose();
                this.mesh.remove(this.glow);
                this.glow = null;
            }
            this.events[this.active && this.SWITCH_ON_EVENT || this.SWITCH_OFF_EVENT].triggerActions();
            return this.events[this.SWITCHED_EVENT].triggerActions();
        }
    };

    Wire.prototype.neighborWires = function() {
        var i, iter, j, k, l, len, len1, len2, m, n, neighbor_dirs, neighbor_point, neighbor_points, neighbors, point, points, ref, rot, wires;
        wires = [];
        points = this.connectionPoints();
        neighbor_dirs = [];
        rot = Face.orientationForFace(this.face);
        n = Face.normalVectorForFace(this.face);
        neighbor_dirs.push(new Vector(0, 0, 0));
        if (this.connections & Wire.RIGHT) {
            neighbor_dirs.push(rot.rotate(new Vector(1, 0, 0)));
            neighbor_dirs.push(rot.rotate(new Vector(1, 0, 0)).minus(n));
        }
        if (this.connections & Wire.LEFT) {
            neighbor_dirs.push(rot.rotate(new Vector(-1, 0, 0)));
            neighbor_dirs.push(rot.rotate(new Vector(-1, 0, 0)).minus(n));
        }
        if (this.connections & Wire.UP) {
            neighbor_dirs.push(rot.rotate(new Vector(0, 1, 0)));
            neighbor_dirs.push(rot.rotate(new Vector(0, 1, 0)).minus(n));
        }
        if (this.connections & Wire.DOWN) {
            neighbor_dirs.push(rot.rotate(new Vector(0, -1, 0)));
            neighbor_dirs.push(rot.rotate(new Vector(0, -1, 0)).minus(n));
        }
        for (i = j = 0, ref = neighbor_dirs.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
            neighbors = world.getObjectsOfTypeAtPos(Wire, this.position.plus(neighbor_dirs[i]));
            for (k = 0, len = neighbors.length; k < len; k++) {
                iter = neighbors[k];
                if (iter === this) {
                    continue;
                }
                neighbor_points = iter.connectionPoints();
                for (l = 0, len1 = points.length; l < len1; l++) {
                    point = points[l];
                    for (m = 0, len2 = neighbor_points.length; m < len2; m++) {
                        neighbor_point = neighbor_points[m];
                        if (neighbor_point.minus(point).length() < 0.1) {
                            wires.push(iter);
                        }
                    }
                }
            }
        }
        return wires;
    };

    Wire.prototype.connectionPoints = function() {
        var points, rot, to_border;
        points = [];
        to_border = Face.normal(this.face).mul(-0.5);
        rot = Face.orientation(this.face);
        if (this.connections & Wire.RIGHT) {
            points.push(this.position.plus(to_border.plus(rot.rotate(new Vector(0.5, 0, 0)))));
        }
        if (this.connections & Wire.LEFT) {
            points.push(this.position.plus(to_border.plus(rot.rotate(new Vector(-0.5, 0, 0)))));
        }
        if (this.connections & Wire.UP) {
            points.push(this.position.plus(to_border.plus(rot.rotate(new Vector(0, 0.5, 0)))));
        }
        if (this.connections & Wire.DOWN) {
            points.push(this.position.plus(to_border.plus(rot.rotate(new Vector(0, -0.5, 0)))));
        }
        return points;
    };

    return Wire;

})(Item);

module.exports = Wire;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/wire.coffee