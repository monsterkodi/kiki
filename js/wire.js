// koffee 1.4.0
var Face, Gate, Geom, Item, Material, Vector, Wire,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

Item = require('./item');

Geom = require('./geom');

Face = require('./face');

Gate = require('./gate');

Vector = require('./lib/vector');

Material = require('./material');

Wire = (function(superClass) {
    extend(Wire, superClass);

    Wire.UP = 1;

    Wire.RIGHT = 2;

    Wire.DOWN = 4;

    Wire.LEFT = 8;

    Wire.VERTICAL = 5;

    Wire.HORIZONTAL = 10;

    Wire.ALL = 15;

    function Wire(face, connections) {
        this.face = face != null ? face : Face.Z;
        this.connections = connections != null ? connections : Wire.ALL;
        this.glow = null;
        this.active = false;
        this.value = 1.0;
        Wire.__super__.constructor.apply(this, arguments);
        this.SWITCH_OFF_EVENT = this.addEventWithName("off");
        this.SWITCH_ON_EVENT = this.addEventWithName("on");
        this.SWITCHED_EVENT = this.addEventWithName("switched");
    }

    Wire.prototype.createMesh = function() {
        var geom, h, o, plane, s, w;
        o = 0.005;
        geom = new THREE.Geometry;
        h = 0.1;
        s = 0.5;
        w = s + o;
        if (this.connections & Wire.RIGHT) {
            plane = new THREE.PlaneGeometry(w, h);
            plane.translate(w / 2, 0, -s + o);
            geom.merge(plane);
        }
        if (this.connections & Wire.LEFT) {
            plane = new THREE.PlaneGeometry(w, h);
            plane.translate(-w / 2, 0, -s + o);
            geom.merge(plane);
        }
        if (this.connections & Wire.UP) {
            plane = new THREE.PlaneGeometry(h, w);
            plane.translate(0, w / 2, -s + o);
            geom.merge(plane);
        }
        if (this.connections & Wire.DOWN) {
            plane = new THREE.PlaneGeometry(h, w);
            plane.translate(0, -w / 2, -s + o);
            geom.merge(plane);
        }
        this.wire = new THREE.Mesh(geom, Material.wire);
        this.mesh = new THREE.Mesh(Geom.wire(), Material.wirePlate);
        this.mesh.add(this.wire);
        this.mesh.receiveShadow = true;
        this.mesh.position.copy(Face.normal(this.face).mul(-(0.5 + o)));
        return this.mesh.quaternion.copy(Face.orientation(this.face));
    };

    Wire.prototype.updateActive = function() {
        var j, len, ref, results, wire;
        ref = this.neighborWires();
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
            wire = ref[j];
            if (wire.active) {
                results.push(this.setActive(true));
            } else {
                results.push(void 0);
            }
        }
        return results;
    };

    Wire.prototype.setActive = function(active) {
        var gate, j, len, neighbors, wire;
        if (this.active !== active) {
            this.active = active;
            neighbors = this.neighborWires();
            for (j = 0, len = neighbors.length; j < len; j++) {
                wire = neighbors[j];
                wire.setActive(this.active);
            }
            gate = world.getObjectOfTypeAtPos(Gate, this.getPos());
            if (gate != null) {
                gate.setActive(this.active);
            }
            if (this.active) {
                if (this.glow == null) {
                    this.glow = new THREE.Sprite(Material.glow);
                    this.glow.position.set(0, 0, -0.3);
                    this.glow.scale.set(.5, .5, 1);
                    this.glow.renderOrder = 999;
                    this.mesh.add(this.glow);
                }
            } else if (this.glow != null) {
                this.mesh.remove(this.glow);
                this.glow = null;
            }
            this.events[this.active && this.SWITCH_ON_EVENT || this.SWITCH_OFF_EVENT].triggerActions();
            return this.events[this.SWITCHED_EVENT].triggerActions();
        }
    };

    Wire.prototype.neighborWires = function() {
        var i, iter, j, k, l, len, len1, len2, m, n, neighbor_dirs, neighbor_point, neighbor_points, neighbors, point, points, ref, rot, wires;
        wires = [];
        points = this.connectionPoints();
        neighbor_dirs = [];
        rot = Face.orientationForFace(this.face);
        n = Face.normalVectorForFace(this.face);
        neighbor_dirs.push(new Vector(0, 0, 0));
        if (this.connections & Wire.RIGHT) {
            neighbor_dirs.push(rot.rotate(new Vector(1, 0, 0)));
            neighbor_dirs.push(rot.rotate(new Vector(1, 0, 0)).minus(n));
        }
        if (this.connections & Wire.LEFT) {
            neighbor_dirs.push(rot.rotate(new Vector(-1, 0, 0)));
            neighbor_dirs.push(rot.rotate(new Vector(-1, 0, 0)).minus(n));
        }
        if (this.connections & Wire.UP) {
            neighbor_dirs.push(rot.rotate(new Vector(0, 1, 0)));
            neighbor_dirs.push(rot.rotate(new Vector(0, 1, 0)).minus(n));
        }
        if (this.connections & Wire.DOWN) {
            neighbor_dirs.push(rot.rotate(new Vector(0, -1, 0)));
            neighbor_dirs.push(rot.rotate(new Vector(0, -1, 0)).minus(n));
        }
        for (i = j = 0, ref = neighbor_dirs.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
            neighbors = world.getObjectsOfTypeAtPos(Wire, this.position.plus(neighbor_dirs[i]));
            for (k = 0, len = neighbors.length; k < len; k++) {
                iter = neighbors[k];
                if (iter === this) {
                    continue;
                }
                neighbor_points = iter.connectionPoints();
                for (l = 0, len1 = points.length; l < len1; l++) {
                    point = points[l];
                    for (m = 0, len2 = neighbor_points.length; m < len2; m++) {
                        neighbor_point = neighbor_points[m];
                        if (neighbor_point.minus(point).length() < 0.1) {
                            wires.push(iter);
                        }
                    }
                }
            }
        }
        return wires;
    };

    Wire.prototype.connectionPoints = function() {
        var points, rot, to_border;
        points = [];
        to_border = Face.normal(this.face).mul(-0.5);
        rot = Face.orientation(this.face);
        if (this.connections & Wire.RIGHT) {
            points.push(this.position.plus(to_border.plus(rot.rotate(new Vector(0.5, 0, 0)))));
        }
        if (this.connections & Wire.LEFT) {
            points.push(this.position.plus(to_border.plus(rot.rotate(new Vector(-0.5, 0, 0)))));
        }
        if (this.connections & Wire.UP) {
            points.push(this.position.plus(to_border.plus(rot.rotate(new Vector(0, 0.5, 0)))));
        }
        if (this.connections & Wire.DOWN) {
            points.push(this.position.plus(to_border.plus(rot.rotate(new Vector(0, -0.5, 0)))));
        }
        return points;
    };

    return Wire;

})(Item);

module.exports = Wire;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lyZS5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQU1BLElBQUEsOENBQUE7SUFBQTs7O0FBQUEsSUFBQSxHQUFXLE9BQUEsQ0FBUSxRQUFSOztBQUNYLElBQUEsR0FBVyxPQUFBLENBQVEsUUFBUjs7QUFDWCxJQUFBLEdBQVcsT0FBQSxDQUFRLFFBQVI7O0FBQ1gsSUFBQSxHQUFXLE9BQUEsQ0FBUSxRQUFSOztBQUNYLE1BQUEsR0FBVyxPQUFBLENBQVEsY0FBUjs7QUFDWCxRQUFBLEdBQVcsT0FBQSxDQUFRLFlBQVI7O0FBRUw7OztJQUVGLElBQUMsQ0FBQSxFQUFELEdBQWE7O0lBQ2IsSUFBQyxDQUFBLEtBQUQsR0FBYTs7SUFDYixJQUFDLENBQUEsSUFBRCxHQUFhOztJQUNiLElBQUMsQ0FBQSxJQUFELEdBQWE7O0lBQ2IsSUFBQyxDQUFBLFFBQUQsR0FBYTs7SUFDYixJQUFDLENBQUEsVUFBRCxHQUFhOztJQUNiLElBQUMsQ0FBQSxHQUFELEdBQWE7O0lBRUEsY0FBQyxJQUFELEVBQWUsV0FBZjtRQUFDLElBQUMsQ0FBQSxzQkFBRCxPQUFNLElBQUksQ0FBQztRQUFHLElBQUMsQ0FBQSxvQ0FBRCxjQUFhLElBQUksQ0FBQztRQUMxQyxJQUFDLENBQUEsSUFBRCxHQUFVO1FBQ1YsSUFBQyxDQUFBLE1BQUQsR0FBVTtRQUNWLElBQUMsQ0FBQSxLQUFELEdBQVU7UUFFVix1Q0FBQSxTQUFBO1FBRUEsSUFBQyxDQUFBLGdCQUFELEdBQW9CLElBQUMsQ0FBQSxnQkFBRCxDQUFrQixLQUFsQjtRQUNwQixJQUFDLENBQUEsZUFBRCxHQUFvQixJQUFDLENBQUEsZ0JBQUQsQ0FBa0IsSUFBbEI7UUFDcEIsSUFBQyxDQUFBLGNBQUQsR0FBb0IsSUFBQyxDQUFBLGdCQUFELENBQWtCLFVBQWxCO0lBVFg7O21CQVdiLFVBQUEsR0FBWSxTQUFBO0FBQ1IsWUFBQTtRQUFBLENBQUEsR0FBSTtRQUNKLElBQUEs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QXBCLENBQVgsQ0FBZixDQUFmLENBQVosRUFESjs7ZUFFQTtJQVpjOzs7O0dBL0hIOztBQTZJbkIsTUFBTSxDQUFDLE9BQVAsR0FBaUIiLCJzb3VyY2VzQ29udGVudCI6WyIjIDAwMCAgIDAwMCAgMDAwICAwMDAwMDAwMCAgIDAwMDAwMDAwXG4jIDAwMCAwIDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgXG4jIDAwMDAwMDAwMCAgMDAwICAwMDAwMDAwICAgIDAwMDAwMDAgXG4jIDAwMCAgIDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgXG4jIDAwICAgICAwMCAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwXG5cbkl0ZW0gICAgID0gcmVxdWlyZSAnLi9pdGVtJ1xuR2VvbSAgICAgPSByZXF1aXJlICcuL2dlb20nXG5GYWNlICAgICA9IHJlcXVpcmUgJy4vZmFjZSdcbkdhdGUgICAgID0gcmVxdWlyZSAnLi9nYXRlJ1xuVmVjdG9yICAgPSByZXF1aXJlICcuL2xpYi92ZWN0b3InXG5NYXRlcmlhbCA9IHJlcXVpcmUgJy4vbWF0ZXJpYWwnXG5cbmNsYXNzIFdpcmUgZXh0ZW5kcyBJdGVtXG5cbiAgICBAVVAgICAgICAgICA9MVxuICAgIEBSSUdIVCAgICAgID0yIFxuICAgIEBET1dOICAgICAgID00XG4gICAgQExFRlQgICAgICAgPThcbiAgICBAVkVSVElDQUwgICA9NVxuICAgIEBIT1JJWk9OVEFMID0xMFxuICAgIEBBTEwgICAgICAgID0xNVxuICAgIFxuICAgIGNvbnN0cnVjdG9yOiAoQGZhY2U9RmFjZS5aLCBAY29ubmVjdGlvbnM9V2lyZS5BTEwpIC0+XG4gICAgICAgIEBnbG93ICAgPSBudWxsXG4gICAgICAgIEBhY3RpdmUgPSBmYWxzZVxuICAgICAgICBAdmFsdWUgID0gMS4wXG4gICAgICAgIFxuICAgICAgICBzdXBlciBcbiAgICBcbiAgICAgICAgQFNXSVRDSF9PRkZfRVZFTlQgPSBAYWRkRXZlbnRXaXRoTmFtZSBcIm9mZlwiXG4gICAgICAgIEBTV0lUQ0hfT05fRVZFTlQgID0gQGFkZEV2ZW50V2l0aE5hbWUgXCJvblwiXG4gICAgICAgIEBTV0lUQ0hFRF9FVkVOVCAgID0gQGFkZEV2ZW50V2l0aE5hbWUgXCJzd2l0Y2hlZFwiXG4gICAgXG4gICAgY3JlYXRlTWVzaDogLT5cbiAgICAgICAgbyA9IDAuMDA1XG4gICAgICAgIGdlb20gPSBuZXcgVEhSRUUuR2VvbWV0cnlcbiAgICAgICAgXG4gICAgICAgIGggPSAwLjFcbiAgICAgICAgcyA9IDAuNVxuICAgICAgICB3ID0gcytvXG4gICAgICAgIFxuICAgICAgICBpZiBAY29ubmVjdGlvbnMgJiBXaXJlLlJJR0hUIFxuICAgICAgICAgICAgcGxhbmUgPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeSAgdywgaFxuICAgICAgICAgICAgcGxhbmUudHJhbnNsYXRlIHcvMiwgMCwgLXMrb1xuICAgICAgICAgICAgZ2VvbS5tZXJnZSBwbGFuZVxuICAgICAgICBpZiBAY29ubmVjdGlvbnMgJiBXaXJlLkxFRlQgICBcbiAgICAgICAgICAgIHBsYW5lID0gbmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkgIHcsIGhcbiAgICAgICAgICAgIHBsYW5lLnRyYW5zbGF0ZSAtdy8yLCAwLCAtcytvXG4gICAgICAgICAgICBnZW9tLm1lcmdlIHBsYW5lXG4gICAgICAgIGlmIEBjb25uZWN0aW9ucyAmIFdpcmUuVVAgXG4gICAgICAgICAgICBwbGFuZSA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5ICBoLCB3XG4gICAgICAgICAgICBwbGFuZS50cmFuc2xhdGUgMCwgdy8yLCAtcytvXG4gICAgICAgICAgICBnZW9tLm1lcmdlIHBsYW5lXG4gICAgICAgIGlmIEBjb25uZWN0aW9ucyAmIFdpcmUuRE9XTiAgICBcbiAgICAgICAgICAgIHBsYW5lID0gbmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkgaCwgd1xuICAgICAgICAgICAgcGxhbmUudHJhbnNsYXRlIDAsIC13LzIsIC1zK29cbiAgICAgICAgICAgIGdlb20ubWVyZ2UgcGxhbmVcbiAgICAgICAgXG4gICAgICAgIEB3aXJlID0gbmV3IFRIUkVFLk1lc2ggZ2VvbSwgICAgICAgIE1hdGVyaWFsLndpcmUgICAgICAgICAgICBcbiAgICAgICAgQG1lc2ggPSBuZXcgVEhSRUUuTWVzaCBHZW9tLndpcmUoKSwgTWF0ZXJpYWwud2lyZVBsYXRlXG4gICAgICAgIEBtZXNoLmFkZCBAd2lyZVxuICAgICAgICBAbWVzaC5yZWNlaXZlU2hhZG93ID0gdHJ1ZVxuICAgICAgICBAbWVzaC5wb3NpdGlvbi5jb3B5IEZhY2Uubm9ybWFsKEBmYWNlKS5tdWwgLSgwLjUrbylcbiAgICAgICAgQG1lc2gucXVhdGVybmlvbi5jb3B5IEZhY2Uub3JpZW50YXRpb24gQGZhY2VcbiAgICAgICAgXG4gICAgdXBkYXRlQWN0aXZlOiAtPlxuICAgICAgICBmb3Igd2lyZSBpbiBAbmVpZ2hib3JXaXJlcygpXG4gICAgICAgICAgICBAc2V0QWN0aXZlIHRydWUgaWYgd2lyZS5hY3RpdmVcbiAgICBcbiAgICBzZXRBY3RpdmU6IChhY3RpdmUpIC0+XG4gICAgICAgIGlmIEBhY3RpdmUgIT0gYWN0aXZlXG4gICAgICAgICAgICBAYWN0aXZlID0gYWN0aXZlXG4gICAgICAgICAgICBuZWlnaGJvcnMgPSBAbmVpZ2hib3JXaXJlcygpXG4gICAgICAgICAgICAjIGxvZyBcIndpcmUgYWN0aXZlOiN7YWN0aXZlfSBmYWNlOiN7QGZhY2V9IG5laWdoYm9yczoje25laWdoYm9ycy5sZW5ndGh9IHBvczpcIiwgQGdldFBvcygpXG4gICAgICAgICAgICBmb3Igd2lyZSBpbiBuZWlnaGJvcnNcbiAgICAgICAgICAgICAgICB3aXJlLnNldEFjdGl2ZSBAYWN0aXZlXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAjIGFjdGl2ZV9uZWlnaGJvciA9IGZhbHNlXG4gICAgICAgICAgICAjIGlmIEBhY3RpdmVcbiAgICAgICAgICAgICAgICAjIGZvciB3aXJlIGluIG5laWdoYm9yc1xuICAgICAgICAgICAgICAgICAgICAjIGlmIHdpcmUuYWN0aXZlXG4gICAgICAgICAgICAgICAgICAgICAgICAjIGFjdGl2ZV9uZWlnaGJvciA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICMgYnJlYWtcbiMgICAgICAgICAgICAgIFxuICAgICAgICAgICAgIyBmb3Igd2lyZSBpbiB3aXJlc1xuICAgICAgICAgICAgICAgICMgd2lyZS5zZXRBY3RpdmUgYWN0aXZlXG4gICAgXG4gICAgICAgICAgICBnYXRlID0gd29ybGQuZ2V0T2JqZWN0T2ZUeXBlQXRQb3MgR2F0ZSwgQGdldFBvcygpXG4gICAgICAgICAgICBnYXRlPy5zZXRBY3RpdmUgQGFjdGl2ZVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiBAYWN0aXZlXG4gICAgICAgICAgICAgICAgaWYgbm90IEBnbG93P1xuICAgICAgICAgICAgICAgICAgICBAZ2xvdyA9IG5ldyBUSFJFRS5TcHJpdGUgTWF0ZXJpYWwuZ2xvd1xuICAgICAgICAgICAgICAgICAgICBAZ2xvdy5wb3NpdGlvbi5zZXQgMCwgMCwgLTAuM1xuICAgICAgICAgICAgICAgICAgICBAZ2xvdy5zY2FsZS5zZXQgLjUsIC41LCAxXG4gICAgICAgICAgICAgICAgICAgIEBnbG93LnJlbmRlck9yZGVyID0gOTk5XG4gICAgICAgICAgICAgICAgICAgIEBtZXNoLmFkZCBAZ2xvd1xuICAgICAgICAgICAgZWxzZSBpZiBAZ2xvdz9cbiAgICAgICAgICAgICAgICBAbWVzaC5yZW1vdmUgQGdsb3dcbiAgICAgICAgICAgICAgICBAZ2xvdyA9IG51bGxcbiAgICBcbiAgICAgICAgICAgIEBldmVudHNbQGFjdGl2ZSBhbmQgQFNXSVRDSF9PTl9FVkVOVCBvciBAU1dJVENIX09GRl9FVkVOVF0udHJpZ2dlckFjdGlvbnMoKVxuICAgICAgICAgICAgQGV2ZW50c1tAU1dJVENIRURfRVZFTlRdLnRyaWdnZXJBY3Rpb25zKClcbiAgICBcbiAgICBuZWlnaGJvcldpcmVzOiAtPlxuICAgICAgICB3aXJlcyA9IFtdXG4gICAgICAgIHBvaW50cyA9IEBjb25uZWN0aW9uUG9pbnRzKClcbiAgICAgICAgIyBsb2cgJ3BvaW50cycsIHBvaW50c1xuICAgICAgICBuZWlnaGJvcl9kaXJzID0gW11cbiAgICAgICAgIFxuICAgICAgICByb3QgPSBGYWNlLm9yaWVudGF0aW9uRm9yRmFjZSBAZmFjZVxuICAgICAgICBuICAgPSBGYWNlLm5vcm1hbFZlY3RvckZvckZhY2UgQGZhY2VcbiAgICBcbiAgICAgICAgbmVpZ2hib3JfZGlycy5wdXNoIG5ldyBWZWN0b3IgMCwwLDAgXG4gICAgICAgICBcbiAgICAgICAgaWYgQGNvbm5lY3Rpb25zICYgV2lyZS5SSUdIVCBcbiAgICAgICAgICAgIG5laWdoYm9yX2RpcnMucHVzaCByb3Qucm90YXRlIG5ldyBWZWN0b3IoMSwwLDApXG4gICAgICAgICAgICBuZWlnaGJvcl9kaXJzLnB1c2ggcm90LnJvdGF0ZShuZXcgVmVjdG9yKDEsMCwwKSkubWludXMgblxuICAgICAgICBpZiBAY29ubmVjdGlvbnMgJiBXaXJlLkxFRlQgIFxuICAgICAgICAgICAgbmVpZ2hib3JfZGlycy5wdXNoIHJvdC5yb3RhdGUgbmV3IFZlY3RvcigtMSwwLDApXG4gICAgICAgICAgICBuZWlnaGJvcl9kaXJzLnB1c2ggcm90LnJvdGF0ZShuZXcgVmVjdG9yKC0xLDAsMCkpLm1pbnVzIG5cbiAgICAgICAgaWYgQGNvbm5lY3Rpb25zICYgV2lyZS5VUCAgICBcbiAgICAgICAgICAgIG5laWdoYm9yX2RpcnMucHVzaCByb3Qucm90YXRlIG5ldyBWZWN0b3IoMCwxLDApXG4gICAgICAgICAgICBuZWlnaGJvcl9kaXJzLnB1c2ggcm90LnJvdGF0ZShuZXcgVmVjdG9yKDAsMSwwKSkubWludXMgblxuICAgICAgICBpZiBAY29ubmVjdGlvbnMgJiBXaXJlLkRPV05cbiAgICAgICAgICAgIG5laWdoYm9yX2RpcnMucHVzaCByb3Qucm90YXRlIG5ldyBWZWN0b3IoMCwtMSwwKVxuICAgICAgICAgICAgbmVpZ2hib3JfZGlycy5wdXNoIHJvdC5yb3RhdGUobmV3IFZlY3RvcigwLC0xLDApKS5taW51cyBuXG4gICAgICAgICBcbiAgICAgICAgZm9yIGkgaW4gWzAuLi5uZWlnaGJvcl9kaXJzLmxlbmd0aF1cbiAgICAgICAgICAgIG5laWdoYm9ycyA9IHdvcmxkLmdldE9iamVjdHNPZlR5cGVBdFBvcyBXaXJlLCBAcG9zaXRpb24ucGx1cyBuZWlnaGJvcl9kaXJzW2ldXG4gICAgICAgICAgICBmb3IgaXRlciBpbiBuZWlnaGJvcnNcbiAgICAgICAgICAgICAgICBjb250aW51ZSBpZiBpdGVyID09IEBcbiAgICAgICAgICAgICAgICBuZWlnaGJvcl9wb2ludHMgPSBpdGVyLmNvbm5lY3Rpb25Qb2ludHMoKVxuICAgICAgICAgICAgICAgIGZvciBwb2ludCBpbiBwb2ludHNcbiAgICAgICAgICAgICAgICAgICAgZm9yIG5laWdoYm9yX3BvaW50IGluIG5laWdoYm9yX3BvaW50c1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgbmVpZ2hib3JfcG9pbnQubWludXMocG9pbnQpLmxlbmd0aCgpIDwgMC4xXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lyZXMucHVzaCBpdGVyXG4gICAgICAgIHdpcmVzXG4gICAgXG4gICAgY29ubmVjdGlvblBvaW50czogLT5cbiAgICAgICAgcG9pbnRzID0gW11cbiAgICAgICAgdG9fYm9yZGVyID0gRmFjZS5ub3JtYWwoQGZhY2UpLm11bCAtMC41XG4gICAgICAgIHJvdCA9IEZhY2Uub3JpZW50YXRpb24gQGZhY2VcbiAgICAgICAgaWYgQGNvbm5lY3Rpb25zICYgV2lyZS5SSUdIVCBcbiAgICAgICAgICAgIHBvaW50cy5wdXNoIEBwb3NpdGlvbi5wbHVzIHRvX2JvcmRlci5wbHVzIHJvdC5yb3RhdGUgbmV3IFZlY3RvciAwLjUsIDAsIDBcbiAgICAgICAgaWYgQGNvbm5lY3Rpb25zICYgV2lyZS5MRUZUXG4gICAgICAgICAgICBwb2ludHMucHVzaCBAcG9zaXRpb24ucGx1cyB0b19ib3JkZXIucGx1cyByb3Qucm90YXRlIG5ldyBWZWN0b3IgLTAuNSwgMCwgMFxuICAgICAgICBpZiBAY29ubmVjdGlvbnMgJiBXaXJlLlVQIFxuICAgICAgICAgICAgcG9pbnRzLnB1c2ggQHBvc2l0aW9uLnBsdXMgdG9fYm9yZGVyLnBsdXMgcm90LnJvdGF0ZSBuZXcgVmVjdG9yIDAsIDAuNSwgMFxuICAgICAgICBpZiBAY29ubmVjdGlvbnMgJiBXaXJlLkRPV05cbiAgICAgICAgICAgIHBvaW50cy5wdXNoIEBwb3NpdGlvbi5wbHVzIHRvX2JvcmRlci5wbHVzIHJvdC5yb3RhdGUgbmV3IFZlY3RvciAwLCAtMC41LCAwXG4gICAgICAgIHBvaW50c1xuICAgICAgICBcbm1vZHVsZS5leHBvcnRzID0gV2lyZVxuIl19
//# sourceURL=../coffee/wire.coffee